/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, Input, Output, EventEmitter, QueryList } from '@angular/core';
import { PillBorder, PillShape, PillsViewType, SelectMode, PillsMultiRow, ShowMoreViewType } from '../models';
import { PillItemComponent } from '../pill-item/pill-item.component';
var PillsGridComponent = /** @class */ (function () {
    function PillsGridComponent() {
        this.visiblePillItems = [];
        this.visiblePillTemplateRefs = [];
        this.pillShape = PillShape.DEFAULT;
        this.pillsViewType = PillsViewType.NONE;
        this.pillBorder = PillBorder.NONE;
        this.selectMode = SelectMode.SINGLE;
        this.pillsMultiRow = PillsMultiRow.DEFAULT;
        this.showMoreViewType = ShowMoreViewType.EXPAND;
        this.select = new EventEmitter();
        this.viewMorePillList = new EventEmitter();
    }
    Object.defineProperty(PillsGridComponent.prototype, "PillShape", {
        get: /**
         * @return {?}
         */
        function () { return PillShape; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PillsGridComponent.prototype, "PillsViewType", {
        get: /**
         * @return {?}
         */
        function () { return PillsViewType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PillsGridComponent.prototype, "PillBorder", {
        get: /**
         * @return {?}
         */
        function () { return PillBorder; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PillsGridComponent.prototype, "PillsMultiRow", {
        get: /**
         * @return {?}
         */
        function () { return PillsMultiRow; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PillsGridComponent.prototype, "ShowMoreViewType", {
        get: /**
         * @return {?}
         */
        function () { return ShowMoreViewType; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PillsGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.assignDefaultPillsConfig();
    };
    /**
     * @return {?}
     */
    PillsGridComponent.prototype.assignDefaultPillsConfig = /**
     * @return {?}
     */
    function () {
        this.pillShape = this.pillShape || PillShape.DEFAULT;
        this.pillsViewType = this.pillsViewType || PillsViewType.NONE;
        this.pillBorder = this.pillBorder || PillBorder.NONE;
        this.selectMode = this.selectMode || SelectMode.SINGLE;
        this.pillsMultiRow = this.pillsMultiRow || PillsMultiRow.DEFAULT;
        if (this.minDisplayCount !== null && this.minDisplayCount !== undefined) {
            this.viewMoreText = this.viewMoreText || 'View More';
            this.viewLessText = this.viewLessText || 'View Less';
            this.showMoreViewType = this.showMoreViewType || ShowMoreViewType.EXPAND;
        }
    };
    /**
     * @return {?}
     */
    PillsGridComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.viewCount = (this.minDisplayCount) ? this.minDisplayCount : this.pillItems.length;
        this.visiblePillItems = this.pillItems.toArray().slice(0, this.viewCount);
        this.visiblePillTemplateRefs = this.visiblePillItems.map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.template; }));
        /** @type {?} */
        var onSelect = (/**
         * @param {?} pill
         * @param {?} event
         * @return {?}
         */
        function (pill, event) {
            if (_this.selectMode === SelectMode.SINGLE && pill.selected) {
                _this.visiblePillItems.forEach((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    if (e !== pill) {
                        e.selected = false;
                    }
                }));
                pill.selected = false;
                _this.select.emit({ event: event, data: [{ name: pill.name, value: pill.value }] });
            }
            else {
                _this.select.emit({
                    event: event,
                    data: _this.visiblePillItems
                        .filter((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return p.selected; }))
                        .map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return ({ name: p.name, value: p.value }); }))
                });
            }
        });
        this.visiblePillItems.forEach((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.onSelect = onSelect; }));
    };
    /**
     * @return {?}
     */
    PillsGridComponent.prototype.viewMore = /**
     * @return {?}
     */
    function () {
        this.viewCount = this.pillItems.length;
        this.visiblePillItems = this.pillItems.toArray().slice(0, this.viewCount);
        this.visiblePillTemplateRefs = this.visiblePillItems.map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.template; }));
    };
    /**
     * @return {?}
     */
    PillsGridComponent.prototype.viewLess = /**
     * @return {?}
     */
    function () {
        this.viewCount = this.minDisplayCount;
        this.visiblePillItems = this.pillItems.toArray().slice(0, this.viewCount);
        this.visiblePillTemplateRefs = this.visiblePillItems.map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.template; }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PillsGridComponent.prototype.viewMoreInNewScreen = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.viewMorePillList.emit({ event: event, data: (this.pillItems && this.pillItems.toArray()) });
    };
    PillsGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-pills-grid',
                    template: "<div class=\"sb-label-grid show-icon\" [ngClass]=\"{\r\n  'sb-box-grid':((pillShape === PillShape.BOX)||(pillShape === PillShape.CIRCLE)||(pillShape === PillShape.IMAGE_OVERLAP)), \r\n  'sb-pills-grid':(pillShape === PillShape.DEFAULT), \r\n  'show-circle':(pillShape === PillShape.CIRCLE), \r\n  'icon-header':(pillShape === PillShape.IMAGE_OVERLAP),\r\n  'hscroll': (pillsViewType === PillsViewType.SCROLL), \r\n  'border-radius':(pillBorder === PillBorder.ROUNDED),\r\n  'two-rows-grid':(pillsMultiRow === PillsMultiRow.DOUBLE_VIEW_COLUMN) || (pillsMultiRow === PillsMultiRow.DOUBLE_VIEW_ROW) || (pillsMultiRow === PillsMultiRow.SINGLE),\r\n  'one-row-grid':(pillsMultiRow === PillsMultiRow.SINGLE),\r\n  'column-sequence':(pillsMultiRow === PillsMultiRow.DOUBLE_VIEW_COLUMN),\r\n  'row-sequence':(pillsMultiRow === PillsMultiRow.DOUBLE_VIEW_ROW)\r\n}\">\r\n  <ng-container *ngFor=\"let ref of visiblePillTemplateRefs\">\r\n    <ng-container *ngTemplateOutlet=\"ref\"></ng-container>\r\n  </ng-container>\r\n</div>\r\n\r\n<div class=\"sb-view-more-less pb-16\" *ngIf=\"minDisplayCount && (pillItems?.length > minDisplayCount)\">\r\n  <div *ngIf=\"showMoreViewType===ShowMoreViewType.EXPAND\">\r\n    <button class=\"sb-btn sb-btn-normal view-more\" *ngIf=\"viewCount < pillItems?.length\" (click)=\"viewMore()\">{{viewMoreText}}</button>\r\n    <button class=\"sb-btn sb-btn-normal view-less\" *ngIf=\"viewCount === pillItems?.length\"  (click)=\"viewLess()\">{{viewLessText}}</button>\r\n  </div>\r\n\r\n  <div *ngIf=\"showMoreViewType===ShowMoreViewType.NEW_SCREEN\">\r\n    <button class=\"sb-btn sb-btn-normal view-all\" (click)=\"viewMoreInNewScreen($event)\">{{viewMoreText}}</button>\r\n  </div>\r\n</div>\r\n",
                    styles: [".sb-view-more-less{text-align:center}"]
                }] }
    ];
    PillsGridComponent.propDecorators = {
        pillItems: [{ type: ContentChildren, args: [PillItemComponent,] }],
        pillShape: [{ type: Input }],
        pillsViewType: [{ type: Input }],
        pillBorder: [{ type: Input }],
        selectMode: [{ type: Input }],
        pillsMultiRow: [{ type: Input }],
        minDisplayCount: [{ type: Input }],
        viewMoreText: [{ type: Input }],
        viewLessText: [{ type: Input }],
        showMoreViewType: [{ type: Input }],
        select: [{ type: Output }],
        viewMorePillList: [{ type: Output }]
    };
    return PillsGridComponent;
}());
export { PillsGridComponent };
if (false) {
    /** @type {?} */
    PillsGridComponent.prototype.pillItems;
    /** @type {?} */
    PillsGridComponent.prototype.visiblePillItems;
    /** @type {?} */
    PillsGridComponent.prototype.visiblePillTemplateRefs;
    /** @type {?} */
    PillsGridComponent.prototype.pillShape;
    /** @type {?} */
    PillsGridComponent.prototype.pillsViewType;
    /** @type {?} */
    PillsGridComponent.prototype.pillBorder;
    /** @type {?} */
    PillsGridComponent.prototype.selectMode;
    /** @type {?} */
    PillsGridComponent.prototype.pillsMultiRow;
    /** @type {?} */
    PillsGridComponent.prototype.minDisplayCount;
    /** @type {?} */
    PillsGridComponent.prototype.viewMoreText;
    /** @type {?} */
    PillsGridComponent.prototype.viewLessText;
    /** @type {?} */
    PillsGridComponent.prototype.showMoreViewType;
    /** @type {?} */
    PillsGridComponent.prototype.select;
    /** @type {?} */
    PillsGridComponent.prototype.viewMorePillList;
    /** @type {?} */
    PillsGridComponent.prototype.viewCount;
}
//# sourceMappingURL=data:application/json;base64,