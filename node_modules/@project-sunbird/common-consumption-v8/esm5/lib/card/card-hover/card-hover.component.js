/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
var CardHoverComponent = /** @class */ (function () {
    function CardHoverComponent() {
        this.hoverActionClick = new EventEmitter();
        this.text = 'click';
    }
    /**
     * @return {?}
     */
    CardHoverComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CardHoverComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} item
     * @param {?} content
     * @param {?} event
     * @return {?}
     */
    CardHoverComponent.prototype.actionClick = /**
     * @param {?} item
     * @param {?} content
     * @param {?} event
     * @return {?}
     */
    function (item, content, event) {
        this.hoverActionClick.emit({ event: event, hover: item, content: content });
        event.stopPropagation();
    };
    CardHoverComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-card-hover',
                    template: "\r\n<!-- <div class=\"card-hover\"> -->\r\n    <div class=\"action-container\">\r\n        <ng-container *ngFor=\"let item of hoverData?.actions\">\r\n            <div class=\"action-item\" *ngIf=\"item.type === 'save'\">\r\n                <button class=\"sb-btn-grow\" (click)=\"actionClick(item, content, $event);\" [disabled]=\"item.disabled\">\r\n                    <i class=\"icon-svg icon-svg--md\">\r\n                        <svg class=\"icon\">\r\n                            <use xlink:href=\"assets/common-consumption/images/sprite.svg#pendrive\"></use>\r\n                        </svg>\r\n                    </i>\r\n                  <span class=\"sb__ellipsis\">{{item.label}}</span>\r\n                </button>\r\n            </div>\r\n            <div class=\"action-item\" *ngIf=\"item.type === 'download'\">\r\n                <button class=\"sb-btn-grow\" (click)=\"actionClick(item, content, $event);\" [disabled]=\"item.disabled\">\r\n                    <i class=\"icon-svg icon-svg--md\">\r\n                        <svg class=\"icon\">\r\n                            <use xlink:href=\"assets/common-consumption/images/sprite.svg#outline-cloud_download\"></use>\r\n                        </svg>\r\n                    </i>\r\n                    <span class=\"sb__ellipsis\">{{item.label}}</span>\r\n                  </button>\r\n            </div>\r\n            <div class=\"action-item\" *ngIf=\"item.type === 'open'\">\r\n                <button class=\"sb-btn-grow\" (click)=\"actionClick(item, content, $event);\" [disabled]=\"item.disabled\">\r\n                    <i class=\"icon-svg icon-svg--md\">\r\n                        <svg class=\"icon\">\r\n                            <use xlink:href=\"assets/common-consumption/images/sprite.svg#book-open\"></use>\r\n                        </svg>\r\n                    </i>\r\n                    <span class=\"sb__ellipsis\">{{item.label}}</span>\r\n                  </button>\r\n            </div>\r\n            <div class=\"action-item\" *ngIf=\"item.type === 'view'\">\r\n                <button class=\"sb-btn-grow\" (click)=\"actionClick(item, content, $event);\" [disabled]=\"item.disabled\">\r\n                    <i class=\"icon-svg icon-svg--sm\">\r\n                        <svg class=\"icon\">\r\n                            <use xlink:href=\"assets/common-consumption/images/sprite.svg#eye\"></use>\r\n                        </svg>\r\n                    </i>\r\n                    <span class=\"sb__ellipsis\">{{item.label}}</span>\r\n                  </button>\r\n            </div>\r\n            <div class=\"action-item\" *ngIf=\"item.type === 'addToGroup'\">\r\n                <button class=\"sb-btn-grow\" (click)=\"actionClick(item, content, $event);\" [disabled]=\"item.disabled\">\r\n                    <i class=\"icon-svg icon-svg--sm\">\r\n                        <svg class=\"icon\">\r\n                            <use xlink:href=\"assets/common-consumption/images/sprite.svg#add-icon\"></use>\r\n                        </svg>\r\n                    </i>\r\n                    <span class=\"sb__ellipsis\">{{item.label}}</span>\r\n                  </button>\r\n            </div>\r\n            <div  class=\"d-flex flex-ai-center flex-jc-center fnormal sb-color-white\" *ngIf=\"item.type === 'text'\">\r\n                {{item?.label}}\r\n                </div>\r\n        </ng-container>\r\n        \r\n        <!-- <div class=\"action-item\">\r\n            <button class=\"sb-btn sb-btn-link sb-btn-link- sb-btn-normal sb-btn-square sb-color-white w-auto sb-btn-grow\" (click)=\"test('button3'); $event.stopPropagation()\">\r\n                <i class=\"icon-svg icon-svg--sm\">\r\n                    <svg class=\"icon\">\r\n                        <use xlink:href=\"assets/common-consumption/images/sprite.svg#book\"></use>\r\n                    </svg>\r\n                </i>\r\n                <span>{{text}}</span>\r\n              </button>\r\n        </div> -->\r\n    </div>\r\n    <div class=\"hover-meta-info\" *ngIf=\"hoverData?.note\">\r\n        {{hoverData?.note}}\r\n    </div>\r\n<!-- </div> -->",
                    styles: [".sb-btn-grow{background:0 0;border:0 solid transparent;font-size:.75rem;color:var(--white);cursor:pointer;outline:0!important;transition:.2s ease-in-out}.sb-btn-grow:disabled{opacity:.4;cursor:default}.sb-btn-grow:hover:not([disabled]){background:0 0;transform:scale(1.15)}"]
                }] }
    ];
    /** @nocollapse */
    CardHoverComponent.ctorParameters = function () { return []; };
    CardHoverComponent.propDecorators = {
        hoverData: [{ type: Input }],
        content: [{ type: Input }],
        hoverActionClick: [{ type: Output }]
    };
    return CardHoverComponent;
}());
export { CardHoverComponent };
if (false) {
    /** @type {?} */
    CardHoverComponent.prototype.hoverData;
    /** @type {?} */
    CardHoverComponent.prototype.content;
    /** @type {?} */
    CardHoverComponent.prototype.hoverActionClick;
    /** @type {?} */
    CardHoverComponent.prototype.text;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1ob3Zlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcHJvamVjdC1zdW5iaXJkL2NvbW1vbi1jb25zdW1wdGlvbi12OC8iLCJzb3VyY2VzIjpbImxpYi9jYXJkL2NhcmQtaG92ZXIvY2FyZC1ob3Zlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFpQixNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlGO0lBYUU7UUFKVSxxQkFBZ0IsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU1RCxTQUFJLEdBQUcsT0FBTyxDQUFDO0lBR3RCLENBQUM7Ozs7SUFFRCxxQ0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQsNENBQWU7OztJQUFmO0lBQ0EsQ0FBQzs7Ozs7OztJQUVELHdDQUFXOzs7Ozs7SUFBWCxVQUFZLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMxQixDQUFDOztnQkF6QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6Qix5aklBQTBDOztpQkFFM0M7Ozs7OzRCQUdFLEtBQUs7MEJBQ0wsS0FBSzttQ0FDTCxNQUFNOztJQWtCVCx5QkFBQztDQUFBLEFBM0JELElBMkJDO1NBdEJZLGtCQUFrQjs7O0lBRTdCLHVDQUFtQjs7SUFDbkIscUNBQWlCOztJQUNqQiw4Q0FBbUU7O0lBRW5FLGtDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnc2ItY2FyZC1ob3ZlcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2NhcmQtaG92ZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2NhcmQtaG92ZXIuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2FyZEhvdmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQElucHV0KCkgaG92ZXJEYXRhO1xyXG4gIEBJbnB1dCgpIGNvbnRlbnQ7XHJcbiAgQE91dHB1dCgpIGhvdmVyQWN0aW9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBwdWJsaWMgdGV4dCA9ICdjbGljayc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgfVxyXG5cclxuICBhY3Rpb25DbGljayhpdGVtLCBjb250ZW50LCBldmVudCkge1xyXG4gICAgdGhpcy5ob3ZlckFjdGlvbkNsaWNrLmVtaXQoeyBldmVudDogZXZlbnQsIGhvdmVyOiBpdGVtLCBjb250ZW50OiBjb250ZW50IH0pO1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=