/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { ActionButtonType } from './model';
/** @type {?} */
var IMAGE_PATH = 'assets/common-consumption/images/sprite.svg';
/** @type {?} */
var DEFAULT_BUTTON = {
    name: ActionButtonType.FULL_SCREEN,
    label: 'Fullscreen',
    iconPath: IMAGE_PATH + "#" + ActionButtonType.FULL_SCREEN,
    disabled: false
};
var PlayerActionsComponent = /** @class */ (function () {
    function PlayerActionsComponent() {
        this.actionButtons = [];
        this.buttonClick = new EventEmitter();
        this.showFullscreen = false;
        this.fullscreenButton = DEFAULT_BUTTON;
    }
    Object.defineProperty(PlayerActionsComponent.prototype, "ActionButtonType", {
        get: /**
         * @return {?}
         */
        function () { return ActionButtonType; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PlayerActionsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.actionButtons) {
            this.actionButtons.forEach((/**
             * @param {?} item
             * @param {?} index
             * @param {?} object
             * @return {?}
             */
            function (item, index, object) {
                item.iconPath = item.iconPath ? item.iconPath : IMAGE_PATH + "#" + item.name;
                if (item.name === ActionButtonType.FULL_SCREEN) {
                    _this.showFullscreen = true;
                    _this.fullscreenButton = item;
                    object.splice(index, 1);
                }
            }));
        }
    };
    /**
     * Emits event when user clicks on the button
     * @param event Contains default mouse click event
     * @param actionButton Data for the clicked button
     */
    /**
     * Emits event when user clicks on the button
     * @param {?} event Contains default mouse click event
     * @param {?} actionButton Data for the clicked button
     * @return {?}
     */
    PlayerActionsComponent.prototype.onButtonClick = /**
     * Emits event when user clicks on the button
     * @param {?} event Contains default mouse click event
     * @param {?} actionButton Data for the clicked button
     * @return {?}
     */
    function (event, actionButton) {
        this.buttonClick.emit({ event: event, data: actionButton });
    };
    PlayerActionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-player-actions',
                    template: "<div class=\"d-flex flex-w-wrap content-video__player__tools\">\r\n  <div *ngFor=\"let item of actionButtons\">\r\n    <button class=\"sb-btn sb-btn-link sb-btn-link-gray sb-btn-sm sb-btn-square\"\r\n      [class.sb-btn-link-disabled]=\"item?.disabled\" [hidden]=\"item?.disabled\" (click)=\"onButtonClick($event, item)\">\r\n      <i class=\"icon-svg icon-svg--sm icon-back\">\r\n        <svg class=\"icon icon-svg--primary\">\r\n          <use [attr.xlink:href]=\"item?.iconPath\"></use>\r\n        </svg>\r\n      </i>\r\n      <span class=\"fxsmall\">{{item?.label}}</span>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"d-flex flex-ai-center content-video__player__screenpart\" *ngIf=\"showFullscreen\">\r\n    <div class=\"separator\"></div>\r\n    <button class=\"sb-btn sb-btn-link sb-btn-link-gray sb-btn-sm sb-btn-square\"\r\n      [class.sb-btn-link-disabled]=\"fullscreenButton?.disabled\" [hidden]=\"fullscreenButton?.disabled\"\r\n      (click)=\"onButtonClick($event, fullscreenButton)\">\r\n      <i class=\"icon-svg icon-svg--sm icon-back\">\r\n        <svg class=\"icon icon-svg--primary\">\r\n          <use [attr.xlink:href]=\"fullscreenButton?.iconPath\"></use>\r\n        </svg>\r\n      </i>\r\n      <span class=\"fxsmall\">{{fullscreenButton?.label}}</span>\r\n    </button>\r\n  </div>\r\n</div>",
                    styles: [":host .content-video__player__screenpart{padding-left:0}:host .content-video__player__screenpart .separator{border-left:.03125rem solid var(--gray-100);height:2.5rem;width:.0625rem}[dir=ltr] :host .content-video__player__screenpart .separator,[dir=rtl] :host .content-video__player__screenpart .separator{margin:0 .5rem}:host .sb-btn-link-disabled,:host .sb-btn-link-disabled[disabled]{opacity:.5;cursor:initial;background:0 0;color:var(--gray-200);border:none}:host .sb-btn-link-disabled:hover,:host .sb-btn-link-disabled[disabled]:hover{background:0 0;color:var(--gray-200);border:0 solid var(--gray-100);cursor:default;opacity:.5}:host .sb-btn-link-disabled:focus,:host .sb-btn-link-disabled[disabled]:focus{outline:0;background:0 0}"]
                }] }
    ];
    PlayerActionsComponent.propDecorators = {
        actionButtons: [{ type: Input }],
        buttonClick: [{ type: Output }]
    };
    return PlayerActionsComponent;
}());
export { PlayerActionsComponent };
if (false) {
    /** @type {?} */
    PlayerActionsComponent.prototype.actionButtons;
    /** @type {?} */
    PlayerActionsComponent.prototype.buttonClick;
    /** @type {?} */
    PlayerActionsComponent.prototype.showFullscreen;
    /** @type {?} */
    PlayerActionsComponent.prototype.fullscreenButton;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHByb2plY3Qtc3VuYmlyZC9jb21tb24tY29uc3VtcHRpb24tdjgvIiwic291cmNlcyI6WyJsaWIvY29udGVudC1kZXRhaWxzL3BsYXllci1hY3Rpb25zL3BsYXllci1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQWlCLGdCQUFnQixFQUFnQixNQUFNLFNBQVMsQ0FBQzs7SUFFbEUsVUFBVSxHQUFHLDZDQUE2Qzs7SUFDMUQsY0FBYyxHQUFrQjtJQUNwQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsV0FBVztJQUNsQyxLQUFLLEVBQUUsWUFBWTtJQUNuQixRQUFRLEVBQUssVUFBVSxTQUFJLGdCQUFnQixDQUFDLFdBQWE7SUFDekQsUUFBUSxFQUFFLEtBQUs7Q0FDaEI7QUFFRDtJQUFBO1FBT1csa0JBQWEsR0FBb0IsRUFBRSxDQUFDO1FBQ25DLGdCQUFXLEdBQStCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFdkUsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFDdkIscUJBQWdCLEdBQWtCLGNBQWMsQ0FBQztJQTBCbkQsQ0FBQztJQXhCQyxzQkFBVyxvREFBZ0I7Ozs7UUFBM0IsY0FBZ0MsT0FBTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7OztPQUFBOzs7O0lBRTFELHlDQUFROzs7SUFBUjtRQUFBLGlCQVlDO1FBWEMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTzs7Ozs7O1lBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU07Z0JBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUksVUFBVSxTQUFJLElBQUksQ0FBQyxJQUFNLENBQUM7Z0JBRTdFLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUU7b0JBQzlDLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO29CQUMzQixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO29CQUM3QixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDekI7WUFDSCxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7SUFDSCw4Q0FBYTs7Ozs7O0lBQWIsVUFBYyxLQUFpQixFQUFFLFlBQTJCO1FBQzFELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxPQUFBLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Z0JBcENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3Qix5ekNBQThDOztpQkFFL0M7OztnQ0FHRSxLQUFLOzhCQUNMLE1BQU07O0lBNkJULDZCQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FoQ1ksc0JBQXNCOzs7SUFFakMsK0NBQTZDOztJQUM3Qyw2Q0FBdUU7O0lBRXZFLGdEQUF1Qjs7SUFDdkIsa0RBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJQWN0aW9uQnV0dG9uLCBBY3Rpb25CdXR0b25UeXBlLCBJQnV0dG9uQ2xpY2sgfSBmcm9tICcuL21vZGVsJztcclxuXHJcbmNvbnN0IElNQUdFX1BBVEggPSAnYXNzZXRzL2NvbW1vbi1jb25zdW1wdGlvbi9pbWFnZXMvc3ByaXRlLnN2Zyc7XHJcbmNvbnN0IERFRkFVTFRfQlVUVE9OOiBJQWN0aW9uQnV0dG9uID0ge1xyXG4gIG5hbWU6IEFjdGlvbkJ1dHRvblR5cGUuRlVMTF9TQ1JFRU4sXHJcbiAgbGFiZWw6ICdGdWxsc2NyZWVuJyxcclxuICBpY29uUGF0aDogYCR7SU1BR0VfUEFUSH0jJHtBY3Rpb25CdXR0b25UeXBlLkZVTExfU0NSRUVOfWAsXHJcbiAgZGlzYWJsZWQ6IGZhbHNlXHJcbn07XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3NiLXBsYXllci1hY3Rpb25zJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcGxheWVyLWFjdGlvbnMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3BsYXllci1hY3Rpb25zLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFBsYXllckFjdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBASW5wdXQoKSBhY3Rpb25CdXR0b25zOiBJQWN0aW9uQnV0dG9uW10gPSBbXTtcclxuICBAT3V0cHV0KCkgYnV0dG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxJQnV0dG9uQ2xpY2s+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBzaG93RnVsbHNjcmVlbiA9IGZhbHNlO1xyXG4gIGZ1bGxzY3JlZW5CdXR0b246IElBY3Rpb25CdXR0b24gPSBERUZBVUxUX0JVVFRPTjtcclxuXHJcbiAgcHVibGljIGdldCBBY3Rpb25CdXR0b25UeXBlKCkgeyByZXR1cm4gQWN0aW9uQnV0dG9uVHlwZTsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmICh0aGlzLmFjdGlvbkJ1dHRvbnMpIHtcclxuICAgICAgdGhpcy5hY3Rpb25CdXR0b25zLmZvckVhY2goKGl0ZW0sIGluZGV4LCBvYmplY3QpID0+IHtcclxuICAgICAgICBpdGVtLmljb25QYXRoID0gaXRlbS5pY29uUGF0aCA/IGl0ZW0uaWNvblBhdGggOiBgJHtJTUFHRV9QQVRIfSMke2l0ZW0ubmFtZX1gO1xyXG5cclxuICAgICAgICBpZiAoaXRlbS5uYW1lID09PSBBY3Rpb25CdXR0b25UeXBlLkZVTExfU0NSRUVOKSB7XHJcbiAgICAgICAgICB0aGlzLnNob3dGdWxsc2NyZWVuID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMuZnVsbHNjcmVlbkJ1dHRvbiA9IGl0ZW07XHJcbiAgICAgICAgICBvYmplY3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW1pdHMgZXZlbnQgd2hlbiB1c2VyIGNsaWNrcyBvbiB0aGUgYnV0dG9uXHJcbiAgICogQHBhcmFtIGV2ZW50IENvbnRhaW5zIGRlZmF1bHQgbW91c2UgY2xpY2sgZXZlbnRcclxuICAgKiBAcGFyYW0gYWN0aW9uQnV0dG9uIERhdGEgZm9yIHRoZSBjbGlja2VkIGJ1dHRvblxyXG4gICAqL1xyXG4gIG9uQnV0dG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIGFjdGlvbkJ1dHRvbjogSUFjdGlvbkJ1dHRvbikge1xyXG4gICAgdGhpcy5idXR0b25DbGljay5lbWl0KHsgZXZlbnQsIGRhdGE6IGFjdGlvbkJ1dHRvbiB9KTtcclxuICB9XHJcbn1cclxuIl19