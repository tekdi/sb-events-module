/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent() {
        this.openCloseItems = new Subject();
        this.isHiidden = true;
        this.cardClick = new EventEmitter();
        this.multiValue = false;
    }
    Object.defineProperty(AccordionComponent.prototype, "multi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.multiValue;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.multiValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AccordionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * Opens all enabled accordion items.
     */
    /**
     * Opens all enabled accordion items.
     * @return {?}
     */
    AccordionComponent.prototype.openAll = /**
     * Opens all enabled accordion items.
     * @return {?}
     */
    function () {
        if (this.multi) {
            this.openCloseItems.next(false);
        }
    };
    /**
     * Closes all enabled accordion items.
     */
    /**
     * Closes all enabled accordion items.
     * @return {?}
     */
    AccordionComponent.prototype.closeAll = /**
     * Closes all enabled accordion items.
     * @return {?}
     */
    function () {
        this.openCloseItems.next(true);
    };
    AccordionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-accordion',
                    template: "<div class=\"sb-accordion-item\">\r\n<ng-content select=\"sb-accordion-item\"></ng-content>\r\n</div>",
                    styles: ["::ng-deep .expanded .sbaccordion{margin-bottom:1.5rem}"]
                }] }
    ];
    /** @nocollapse */
    AccordionComponent.ctorParameters = function () { return []; };
    AccordionComponent.propDecorators = {
        multi: [{ type: Input, args: ['multi',] }],
        isHiidden: [{ type: Input }],
        cardClick: [{ type: Output }]
    };
    return AccordionComponent;
}());
export { AccordionComponent };
if (false) {
    /** @type {?} */
    AccordionComponent.prototype.openCloseItems;
    /** @type {?} */
    AccordionComponent.prototype.isHiidden;
    /** @type {?} */
    AccordionComponent.prototype.cardClick;
    /**
     * @type {?}
     * @private
     */
    AccordionComponent.prototype.multiValue;
}
/**
 * @param {?} val
 * @return {?}
 */
export function convertToBoolProperty(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === '');
    }
    return !!val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwcm9qZWN0LXN1bmJpcmQvY29tbW9uLWNvbnN1bXB0aW9uLXY4LyIsInNvdXJjZXMiOlsibGliL2FjY29yZGlvbi9hY2NvcmRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0I7SUFtQkU7UUFiQSxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFTL0IsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNoQixjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFcEQsZUFBVSxHQUFHLEtBQUssQ0FBQztJQUNYLENBQUM7SUFaakIsc0JBQ0kscUNBQUs7Ozs7UUFEVDtZQUVFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDOzs7OztRQUNELFVBQVUsR0FBWTtZQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLENBQUM7OztPQUhBOzs7O0lBV0QscUNBQVE7OztJQUFSO0lBQ0EsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILG9DQUFPOzs7O0lBQVA7UUFDRSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxxQ0FBUTs7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Z0JBdENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsaUhBQXlDOztpQkFFMUM7Ozs7O3dCQUdFLEtBQUssU0FBQyxPQUFPOzRCQVFiLEtBQUs7NEJBQ0wsTUFBTTs7SUE0QlQseUJBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQXZDWSxrQkFBa0I7OztJQUM3Qiw0Q0FBd0M7O0lBU3hDLHVDQUEwQjs7SUFDMUIsdUNBQTREOzs7OztJQUU1RCx3Q0FBMkI7Ozs7OztBQTZCN0IsTUFBTSxVQUFVLHFCQUFxQixDQUFDLEdBQVE7SUFDNUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDM0IsR0FBRyxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUvQixPQUFPLENBQUMsR0FBRyxLQUFLLE1BQU0sSUFBSSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDdkM7SUFFRCxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3NiLWFjY29yZGlvbicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2FjY29yZGlvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vYWNjb3JkaW9uLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEFjY29yZGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgb3BlbkNsb3NlSXRlbXMgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xyXG4gIEBJbnB1dCgnbXVsdGknKVxyXG4gIGdldCBtdWx0aSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLm11bHRpVmFsdWU7XHJcbiAgfVxyXG4gIHNldCBtdWx0aSh2YWw6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMubXVsdGlWYWx1ZSA9IGNvbnZlcnRUb0Jvb2xQcm9wZXJ0eSh2YWwpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgaXNIaWlkZGVuID0gdHJ1ZTtcclxuICBAT3V0cHV0KCkgY2FyZENsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgcHJpdmF0ZSBtdWx0aVZhbHVlID0gZmFsc2U7XHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcGVucyBhbGwgZW5hYmxlZCBhY2NvcmRpb24gaXRlbXMuXHJcbiAgICovXHJcbiAgb3BlbkFsbCgpIHtcclxuICAgIGlmICh0aGlzLm11bHRpKSB7XHJcbiAgICAgIHRoaXMub3BlbkNsb3NlSXRlbXMubmV4dChmYWxzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9zZXMgYWxsIGVuYWJsZWQgYWNjb3JkaW9uIGl0ZW1zLlxyXG4gICAqL1xyXG4gIGNsb3NlQWxsKCkge1xyXG4gICAgdGhpcy5vcGVuQ2xvc2VJdGVtcy5uZXh0KHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLy8gdG9nZ2xlQWNjb3JkaW9uKCkge1xyXG4gIC8vICAgdGhpcy5pc0hpaWRkZW4gPSAhdGhpcy5pc0hpaWRkZW47XHJcbiAgLy8gICB0aGlzLmNhcmRDbGljay5lbWl0KHsgZXZlbnQ6IGV2ZW50LCBkYXRhOiB0aGlzLmlzSGlpZGRlbiB9KTtcclxuICAvLyB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvQm9vbFByb3BlcnR5KHZhbDogYW55KTogYm9vbGVhbiB7XHJcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICB2YWwgPSB2YWwudG9Mb3dlckNhc2UoKS50cmltKCk7XHJcblxyXG4gICAgcmV0dXJuICh2YWwgPT09ICd0cnVlJyB8fCB2YWwgPT09ICcnKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAhIXZhbDtcclxufVxyXG4iXX0=