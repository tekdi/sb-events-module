/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { LibraryFiltersLayout, TocMimeTypes } from './models';
var LibraryFiltersComponent = /** @class */ (function () {
    function LibraryFiltersComponent() {
        this.selectedFilter = new EventEmitter();
        this.selectedMimeType = new EventEmitter();
        this.TocMimeTypesMaster = [
            { name: 'all', value: ['all'] },
            {
                name: 'video', value: ['video/mp4', 'video/x-youtube', 'video/webm']
            },
            {
                name: 'docs', value: ['application/pdf', 'application/epub', 'application/msword']
            },
            {
                name: 'interactive',
                value: ['application/vnd.ekstep.ecml-archive', 'application/vnd.ekstep.h5p-archive', 'application/vnd.ekstep.html-archive'],
            },
        ];
    }
    Object.defineProperty(LibraryFiltersComponent.prototype, "LibraryFiltersLayout", {
        get: /**
         * @return {?}
         */
        function () { return LibraryFiltersLayout; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LibraryFiltersComponent.prototype, "TocMimeTypes", {
        get: /**
         * @return {?}
         */
        function () { return TocMimeTypes; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} input
     * @return {?}
     */
    LibraryFiltersComponent.prototype.fetchCorrespondingTypes = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var type = '';
        switch (input) {
            case TocMimeTypes.ALL:
                type = TocMimeTypes.ALL;
                break;
            case TocMimeTypes.AUDIO:
                type = TocMimeTypes.AUDIO;
                break;
            case TocMimeTypes.COLLECTION:
                type = TocMimeTypes.COLLECTION;
                break;
            case TocMimeTypes.DOCS:
                type = TocMimeTypes.DOCS;
                break;
            case TocMimeTypes.INTERACTIVE:
                type = TocMimeTypes.INTERACTIVE;
                break;
            case TocMimeTypes.VIDEO:
                type = TocMimeTypes.VIDEO;
                break;
        }
        return type;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LibraryFiltersComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (this.layout === LibraryFiltersLayout.ROUND_WITH_ICONS) {
            if (this.tocList) {
                this.filterList = this.tocList.map((/**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */
                function (item, index) {
                    /** @type {?} */
                    var type = _this.fetchCorrespondingTypes(item.value);
                    if (_this.selectedItems && _this.selectedItems.includes(index)) {
                        return ({ text: item.text, selected: true, type: type });
                    }
                    else if (!_this.selectedItems && type === TocMimeTypes.ALL) {
                        return ({ text: item.text, selected: true, type: type });
                    }
                    else {
                        return ({ text: item.text, selected: false, type: type });
                    }
                }));
            }
            else if (this.list) {
                this.filterList = this.list.map((/**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */
                function (item, index) {
                    /** @type {?} */
                    var type = _this.fetchCorrespondingTypes(item);
                    if (_this.selectedItems && _this.selectedItems.includes(index)) {
                        return ({ text: item, selected: true, type: type });
                    }
                    else if (!_this.selectedItems && item === TocMimeTypes.ALL) {
                        return ({ text: item, selected: true, type: type });
                    }
                    else {
                        return ({ text: item, selected: false, type: type });
                    }
                }));
            }
        }
        else {
            if (this.list) {
                this.filterList = this.list.map((/**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */
                function (item, index) {
                    if (_this.selectedItems && _this.selectedItems.includes(index)) {
                        return ({ text: item, selected: true });
                    }
                    else {
                        return ({ text: item, selected: false });
                    }
                }));
            }
        }
    };
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    LibraryFiltersComponent.prototype.selectPill = /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    function (event, index) {
        this.filterList = this.filterList.map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return (tslib_1.__assign({}, e, { selected: false })); }));
        try {
            this.filterList[index].selected = true;
            this.selectedFilter.emit({ event: event, data: tslib_1.__assign({}, this.filterList[index], { index: index }) });
            // animation code
            /** @type {?} */
            var el_1 = document.getElementById('class' + index);
            if (el_1) {
                el_1.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'start' });
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    el_1 = document.getElementById('class' + index);
                    if (el_1) {
                        el_1.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'start' });
                    }
                }), 1000);
            }
        }
        catch (error) {
            console.error('Error in selectPill method', error);
        }
    };
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    LibraryFiltersComponent.prototype.selectMimeFilter = /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    function (event, index) {
        var _this = this;
        /** @type {?} */
        var outputType = {};
        this.filterList = this.filterList.map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return (tslib_1.__assign({}, e, { selected: false })); }));
        try {
            this.filterList[index].selected = true;
            this.TocMimeTypesMaster.map((/**
             * @param {?} mimeType
             * @return {?}
             */
            function (mimeType) {
                if (mimeType.name === _this.filterList[index].type) {
                    outputType = {
                        event: event,
                        data: tslib_1.__assign({ value: mimeType.value }, _this.filterList[index], { index: index })
                    };
                }
            }));
            this.selectedMimeType.emit(tslib_1.__assign({}, outputType));
            // animation code
            /** @type {?} */
            var el_2 = document.getElementById('mimeType' + index);
            if (el_2) {
                el_2.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'start' });
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    el_2 = document.getElementById('mimeType' + index);
                    if (el_2) {
                        el_2.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'start' });
                    }
                }), 1000);
            }
        }
        catch (error) {
            console.error('Error in selectPill method', error);
        }
    };
    LibraryFiltersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-library-filters',
                    template: "<div class=\"fixed-container\">\r\n    <!-- Library medium filter -->\r\n    <div *ngIf=\"layout === LibraryFiltersLayout.SQUARE\" class=\"sb-slider-pills-container\">\r\n        <div class=\"sb-pills-container sb-medium-pills-container\" id=\"mediumScroll\">\r\n            <div class=\"pill\" *ngFor=\"let item of filterList; let i = index;\" [ngClass]=\"{'active': item?.selected}\"\r\n                attr.id=\"medium{{i}}\" (click)=\"selectPill($event, i)\">{{item.text}} medium\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!-- Library class/grade filter -->\r\n    <div *ngIf=\"layout === LibraryFiltersLayout.ROUND\" class=\"sb-slider-pills-container\">\r\n        <div class=\"sb-pills-container sb-grade-pills-container\" id=\"gradeScroll\">\r\n            <div class=\"pill rounded\" *ngFor=\"let item of filterList; let i = index;\"\r\n                [ngClass]=\"{'active': item?.selected}\" attr.id=\"class{{i}}\" (click)=\"selectPill($event, i)\">\r\n                {{item.text}}</div>\r\n        </div>\r\n    </div>\r\n    <!-- Player page content filters -->\r\n    <div *ngIf=\"layout === LibraryFiltersLayout.ROUND_WITH_ICONS\" class=\"sb-slider-pills-container\">\r\n        <div class=\"sb-pills-container sb-grade-pills-container\" id=\"gradeScroll\">\r\n            <div class=\"pill rounded rounded-with-icon\" *ngFor=\"let item of filterList; let i = index;\"\r\n                [ngClass]=\"{'active': item?.selected}\" attr.id=\"mimeType{{i}}\" (click)=\"selectMimeFilter($event, i)\">\r\n                <ng-container *ngIf=\"item?.type === TocMimeTypes.VIDEO \">\r\n                    <i class=\"icon-svg icon-svg--xs icon-videos\" >\r\n                        <svg class=\"icon icon-svg--primary\">\r\n                            <use xlink:href=\"assets/common-consumption/images/sprite.svg#play\"></use>\r\n                        </svg>\r\n                    </i>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item?.type === TocMimeTypes.DOCS \">\r\n                    <i class=\"icon-svg icon-svg--xs icon-docs\" >\r\n                        <svg class=\"icon icon-svg--primary\">\r\n                            <use xlink:href=\"assets/common-consumption/images/sprite.svg#doc\"></use>\r\n                        </svg>\r\n                    </i>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item?.type === TocMimeTypes.INTERACTIVE \">\r\n                    <i class=\"icon-svg icon-svg--xs icon-touch\" >\r\n                        <svg class=\"icon icon-svg--primary\">\r\n                            <use xlink:href=\"assets/common-consumption/images/sprite.svg#touch\"></use>\r\n                        </svg>\r\n                    </i>\r\n                </ng-container>\r\n                <span class=\"name\">{{item.text}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
                    styles: [":host .fixed-container{width:100%;position:relative;z-index:2}:host .sb-slider-pills-container{overflow-x:auto}:host .sb-slider-pills-container .sb-pills-container{display:inline-flex;align-items:center;box-sizing:border-box}[dir=ltr] :host .sb-slider-pills-container .sb-pills-container,[dir=rtl] :host .sb-slider-pills-container .sb-pills-container{padding:1rem}:host .sb-slider-pills-container .sb-pills-container .pill{background-color:var(--white);white-space:nowrap;-webkit-appearance:none;text-overflow:ellipsis;min-height:2rem;cursor:pointer;transition:.25s ease-in-out;border-radius:.125rem;text-transform:capitalize;text-decoration:none;text-align:center;font-weight:400;font-style:normal;font-stretch:normal;font-size:.75rem;box-sizing:border-box;display:flex;align-items:center;line-height:1rem}[dir=ltr] :host .sb-slider-pills-container .sb-pills-container .pill{margin-right:.5rem}[dir=rtl] :host .sb-slider-pills-container .sb-pills-container .pill{margin-left:.5rem}[dir=ltr] :host .sb-slider-pills-container .sb-pills-container .pill,[dir=rtl] :host .sb-slider-pills-container .sb-pills-container .pill{padding:.25rem .5rem}[dir=ltr] :host .sb-slider-pills-container .sb-pills-container .pill:last-child{margin-right:.5rem}[dir=rtl] :host .sb-slider-pills-container .sb-pills-container .pill:last-child{margin-left:.5rem}:host .sb-slider-pills-container .sb-medium-pills-container{min-height:4rem;background:var(--white);min-width:100%}:host .sb-slider-pills-container .sb-medium-pills-container .pill{border:var(--secondary-color) .0625rem solid;color:var(--secondary-color)}:host .sb-slider-pills-container .sb-medium-pills-container .pill.active,:host .sb-slider-pills-container .sb-medium-pills-container .pill:active,:host .sb-slider-pills-container .sb-medium-pills-container .pill:hover{color:var(--white);background-color:var(--secondary-color);box-shadow:0 3px 4px 0 rgba(var(--rc-rgba-black),.19)}:host .sb-slider-pills-container .sb-grade-pills-container{min-height:3rem;background:var(--gray-0);min-width:100%}:host .sb-slider-pills-container .sb-grade-pills-container .pill{border-radius:1rem;color:var(--primary-color);min-height:2rem}[dir=ltr] :host .sb-slider-pills-container .sb-grade-pills-container .pill,[dir=rtl] :host .sb-slider-pills-container .sb-grade-pills-container .pill{padding:.25rem 1rem}:host .sb-slider-pills-container .sb-grade-pills-container .pill.active,:host .sb-slider-pills-container .sb-grade-pills-container .pill:active,:host .sb-slider-pills-container .sb-grade-pills-container .pill:hover{background-color:var(--primary-color);color:var(--white);box-shadow:0 3px 4px 0 rgba(var(--rc-rgba-black),.19)}:host .sb-slider-pills-container .sb-grade-pills-container .pill.active .icon-svg svg,:host .sb-slider-pills-container .sb-grade-pills-container .pill:active .icon-svg svg,:host .sb-slider-pills-container .sb-grade-pills-container .pill:hover .icon-svg svg{fill:var(--white)}:host .sb-slider-pills-container .sb-grade-pills-container .pill.rounded{font-size:.875rem}:host .sb-slider-pills-container .sb-grade-pills-container .pill.rounded-with-icon .icon-svg{margin-right:.25rem;top:0}html[dir=rtl] :host .sb-slider-pills-container .sb-grade-pills-container .pill.rounded-with-icon .icon-svg{margin-left:.25rem;margin-right:inherit}:host .sb-slider-pills-container .sb-grade-pills-container .pill.rounded-with-icon .name{-ms-grid-row-align:center;align-self:center;display:inline-block;line-height:1rem}"]
                }] }
    ];
    LibraryFiltersComponent.propDecorators = {
        list: [{ type: Input }],
        tocList: [{ type: Input }],
        selectedItems: [{ type: Input }],
        layout: [{ type: Input }],
        selectedFilter: [{ type: Output }],
        selectedMimeType: [{ type: Output }]
    };
    return LibraryFiltersComponent;
}());
export { LibraryFiltersComponent };
if (false) {
    /** @type {?} */
    LibraryFiltersComponent.prototype.list;
    /** @type {?} */
    LibraryFiltersComponent.prototype.tocList;
    /** @type {?} */
    LibraryFiltersComponent.prototype.selectedItems;
    /** @type {?} */
    LibraryFiltersComponent.prototype.layout;
    /** @type {?} */
    LibraryFiltersComponent.prototype.selectedFilter;
    /** @type {?} */
    LibraryFiltersComponent.prototype.selectedMimeType;
    /** @type {?} */
    LibraryFiltersComponent.prototype.TocMimeTypesMaster;
    /** @type {?} */
    LibraryFiltersComponent.prototype.filterList;
}
//# sourceMappingURL=data:application/json;base64,