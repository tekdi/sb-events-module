/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { ActionButtonType } from './model';
/** @type {?} */
const IMAGE_PATH = 'assets/common-consumption/images/sprite.svg';
/** @type {?} */
const DEFAULT_BUTTON = {
    name: ActionButtonType.FULL_SCREEN,
    label: 'Fullscreen',
    iconPath: `${IMAGE_PATH}#${ActionButtonType.FULL_SCREEN}`,
    disabled: false
};
export class PlayerActionsComponent {
    constructor() {
        this.actionButtons = [];
        this.buttonClick = new EventEmitter();
        this.showFullscreen = false;
        this.fullscreenButton = DEFAULT_BUTTON;
    }
    /**
     * @return {?}
     */
    get ActionButtonType() { return ActionButtonType; }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.actionButtons) {
            this.actionButtons.forEach((/**
             * @param {?} item
             * @param {?} index
             * @param {?} object
             * @return {?}
             */
            (item, index, object) => {
                item.iconPath = item.iconPath ? item.iconPath : `${IMAGE_PATH}#${item.name}`;
                if (item.name === ActionButtonType.FULL_SCREEN) {
                    this.showFullscreen = true;
                    this.fullscreenButton = item;
                    object.splice(index, 1);
                }
            }));
        }
    }
    /**
     * Emits event when user clicks on the button
     * @param {?} event Contains default mouse click event
     * @param {?} actionButton Data for the clicked button
     * @return {?}
     */
    onButtonClick(event, actionButton) {
        this.buttonClick.emit({ event, data: actionButton });
    }
}
PlayerActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-player-actions',
                template: "<div class=\"d-flex flex-w-wrap content-video__player__tools\">\r\n  <div *ngFor=\"let item of actionButtons\">\r\n    <button class=\"sb-btn sb-btn-link sb-btn-link-gray sb-btn-sm sb-btn-square\"\r\n      [class.sb-btn-link-disabled]=\"item?.disabled\" [hidden]=\"item?.disabled\" (click)=\"onButtonClick($event, item)\">\r\n      <i class=\"icon-svg icon-svg--sm icon-back\">\r\n        <svg class=\"icon icon-svg--primary\">\r\n          <use [attr.xlink:href]=\"item?.iconPath\"></use>\r\n        </svg>\r\n      </i>\r\n      <span class=\"fxsmall\">{{item?.label}}</span>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"d-flex flex-ai-center content-video__player__screenpart\" *ngIf=\"showFullscreen\">\r\n    <div class=\"separator\"></div>\r\n    <button class=\"sb-btn sb-btn-link sb-btn-link-gray sb-btn-sm sb-btn-square\"\r\n      [class.sb-btn-link-disabled]=\"fullscreenButton?.disabled\" [hidden]=\"fullscreenButton?.disabled\"\r\n      (click)=\"onButtonClick($event, fullscreenButton)\">\r\n      <i class=\"icon-svg icon-svg--sm icon-back\">\r\n        <svg class=\"icon icon-svg--primary\">\r\n          <use [attr.xlink:href]=\"fullscreenButton?.iconPath\"></use>\r\n        </svg>\r\n      </i>\r\n      <span class=\"fxsmall\">{{fullscreenButton?.label}}</span>\r\n    </button>\r\n  </div>\r\n</div>",
                styles: [":host .content-video__player__screenpart{padding-left:0}:host .content-video__player__screenpart .separator{border-left:.03125rem solid var(--gray-100);height:2.5rem;width:.0625rem}[dir=ltr] :host .content-video__player__screenpart .separator,[dir=rtl] :host .content-video__player__screenpart .separator{margin:0 .5rem}:host .sb-btn-link-disabled,:host .sb-btn-link-disabled[disabled]{opacity:.5;cursor:initial;background:0 0;color:var(--gray-200);border:none}:host .sb-btn-link-disabled:hover,:host .sb-btn-link-disabled[disabled]:hover{background:0 0;color:var(--gray-200);border:0 solid var(--gray-100);cursor:default;opacity:.5}:host .sb-btn-link-disabled:focus,:host .sb-btn-link-disabled[disabled]:focus{outline:0;background:0 0}"]
            }] }
];
PlayerActionsComponent.propDecorators = {
    actionButtons: [{ type: Input }],
    buttonClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PlayerActionsComponent.prototype.actionButtons;
    /** @type {?} */
    PlayerActionsComponent.prototype.buttonClick;
    /** @type {?} */
    PlayerActionsComponent.prototype.showFullscreen;
    /** @type {?} */
    PlayerActionsComponent.prototype.fullscreenButton;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHByb2plY3Qtc3VuYmlyZC9jb21tb24tY29uc3VtcHRpb24tdjgvIiwic291cmNlcyI6WyJsaWIvY29udGVudC1kZXRhaWxzL3BsYXllci1hY3Rpb25zL3BsYXllci1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQWlCLGdCQUFnQixFQUFnQixNQUFNLFNBQVMsQ0FBQzs7TUFFbEUsVUFBVSxHQUFHLDZDQUE2Qzs7TUFDMUQsY0FBYyxHQUFrQjtJQUNwQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsV0FBVztJQUNsQyxLQUFLLEVBQUUsWUFBWTtJQUNuQixRQUFRLEVBQUUsR0FBRyxVQUFVLElBQUksZ0JBQWdCLENBQUMsV0FBVyxFQUFFO0lBQ3pELFFBQVEsRUFBRSxLQUFLO0NBQ2hCO0FBT0QsTUFBTSxPQUFPLHNCQUFzQjtJQUxuQztRQU9XLGtCQUFhLEdBQW9CLEVBQUUsQ0FBQztRQUNuQyxnQkFBVyxHQUErQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXZFLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLHFCQUFnQixHQUFrQixjQUFjLENBQUM7SUEwQm5ELENBQUM7Ozs7SUF4QkMsSUFBVyxnQkFBZ0IsS0FBSyxPQUFPLGdCQUFnQixDQUFDLENBQUMsQ0FBQzs7OztJQUUxRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTzs7Ozs7O1lBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNqRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFFN0UsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGdCQUFnQixDQUFDLFdBQVcsRUFBRTtvQkFDOUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7b0JBQzNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7b0JBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUN6QjtZQUNILENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7Ozs7O0lBT0QsYUFBYSxDQUFDLEtBQWlCLEVBQUUsWUFBMkI7UUFDMUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7O1lBcENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qix5ekNBQThDOzthQUUvQzs7OzRCQUdFLEtBQUs7MEJBQ0wsTUFBTTs7OztJQURQLCtDQUE2Qzs7SUFDN0MsNkNBQXVFOztJQUV2RSxnREFBdUI7O0lBQ3ZCLGtEQUFpRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSUFjdGlvbkJ1dHRvbiwgQWN0aW9uQnV0dG9uVHlwZSwgSUJ1dHRvbkNsaWNrIH0gZnJvbSAnLi9tb2RlbCc7XHJcblxyXG5jb25zdCBJTUFHRV9QQVRIID0gJ2Fzc2V0cy9jb21tb24tY29uc3VtcHRpb24vaW1hZ2VzL3Nwcml0ZS5zdmcnO1xyXG5jb25zdCBERUZBVUxUX0JVVFRPTjogSUFjdGlvbkJ1dHRvbiA9IHtcclxuICBuYW1lOiBBY3Rpb25CdXR0b25UeXBlLkZVTExfU0NSRUVOLFxyXG4gIGxhYmVsOiAnRnVsbHNjcmVlbicsXHJcbiAgaWNvblBhdGg6IGAke0lNQUdFX1BBVEh9IyR7QWN0aW9uQnV0dG9uVHlwZS5GVUxMX1NDUkVFTn1gLFxyXG4gIGRpc2FibGVkOiBmYWxzZVxyXG59O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdzYi1wbGF5ZXItYWN0aW9ucycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BsYXllci1hY3Rpb25zLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9wbGF5ZXItYWN0aW9ucy5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXJBY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQElucHV0KCkgYWN0aW9uQnV0dG9uczogSUFjdGlvbkJ1dHRvbltdID0gW107XHJcbiAgQE91dHB1dCgpIGJ1dHRvbkNsaWNrOiBFdmVudEVtaXR0ZXI8SUJ1dHRvbkNsaWNrPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgc2hvd0Z1bGxzY3JlZW4gPSBmYWxzZTtcclxuICBmdWxsc2NyZWVuQnV0dG9uOiBJQWN0aW9uQnV0dG9uID0gREVGQVVMVF9CVVRUT047XHJcblxyXG4gIHB1YmxpYyBnZXQgQWN0aW9uQnV0dG9uVHlwZSgpIHsgcmV0dXJuIEFjdGlvbkJ1dHRvblR5cGU7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAodGhpcy5hY3Rpb25CdXR0b25zKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uQnV0dG9ucy5mb3JFYWNoKChpdGVtLCBpbmRleCwgb2JqZWN0KSA9PiB7XHJcbiAgICAgICAgaXRlbS5pY29uUGF0aCA9IGl0ZW0uaWNvblBhdGggPyBpdGVtLmljb25QYXRoIDogYCR7SU1BR0VfUEFUSH0jJHtpdGVtLm5hbWV9YDtcclxuXHJcbiAgICAgICAgaWYgKGl0ZW0ubmFtZSA9PT0gQWN0aW9uQnV0dG9uVHlwZS5GVUxMX1NDUkVFTikge1xyXG4gICAgICAgICAgdGhpcy5zaG93RnVsbHNjcmVlbiA9IHRydWU7XHJcbiAgICAgICAgICB0aGlzLmZ1bGxzY3JlZW5CdXR0b24gPSBpdGVtO1xyXG4gICAgICAgICAgb2JqZWN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVtaXRzIGV2ZW50IHdoZW4gdXNlciBjbGlja3Mgb24gdGhlIGJ1dHRvblxyXG4gICAqIEBwYXJhbSBldmVudCBDb250YWlucyBkZWZhdWx0IG1vdXNlIGNsaWNrIGV2ZW50XHJcbiAgICogQHBhcmFtIGFjdGlvbkJ1dHRvbiBEYXRhIGZvciB0aGUgY2xpY2tlZCBidXR0b25cclxuICAgKi9cclxuICBvbkJ1dHRvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50LCBhY3Rpb25CdXR0b246IElBY3Rpb25CdXR0b24pIHtcclxuICAgIHRoaXMuYnV0dG9uQ2xpY2suZW1pdCh7IGV2ZW50LCBkYXRhOiBhY3Rpb25CdXR0b24gfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==