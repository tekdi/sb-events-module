/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
export class AccordionComponent {
    constructor() {
        this.openCloseItems = new Subject();
        this.isHiidden = true;
        this.cardClick = new EventEmitter();
        this.multiValue = false;
    }
    /**
     * @return {?}
     */
    get multi() {
        return this.multiValue;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set multi(val) {
        this.multiValue = convertToBoolProperty(val);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * Opens all enabled accordion items.
     * @return {?}
     */
    openAll() {
        if (this.multi) {
            this.openCloseItems.next(false);
        }
    }
    /**
     * Closes all enabled accordion items.
     * @return {?}
     */
    closeAll() {
        this.openCloseItems.next(true);
    }
}
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-accordion',
                template: "<div class=\"sb-accordion-item\">\r\n<ng-content select=\"sb-accordion-item\"></ng-content>\r\n</div>",
                styles: ["::ng-deep .expanded .sbaccordion{margin-bottom:1.5rem}"]
            }] }
];
/** @nocollapse */
AccordionComponent.ctorParameters = () => [];
AccordionComponent.propDecorators = {
    multi: [{ type: Input, args: ['multi',] }],
    isHiidden: [{ type: Input }],
    cardClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AccordionComponent.prototype.openCloseItems;
    /** @type {?} */
    AccordionComponent.prototype.isHiidden;
    /** @type {?} */
    AccordionComponent.prototype.cardClick;
    /**
     * @type {?}
     * @private
     */
    AccordionComponent.prototype.multiValue;
}
/**
 * @param {?} val
 * @return {?}
 */
export function convertToBoolProperty(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === '');
    }
    return !!val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwcm9qZWN0LXN1bmJpcmQvY29tbW9uLWNvbnN1bXB0aW9uLXY4LyIsInNvdXJjZXMiOlsibGliL2FjY29yZGlvbi9hY2NvcmRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFPL0IsTUFBTSxPQUFPLGtCQUFrQjtJQWM3QjtRQWJBLG1CQUFjLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQVMvQixjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLGNBQVMsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVwRCxlQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ1gsQ0FBQzs7OztJQVpqQixJQUNJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFDRCxJQUFJLEtBQUssQ0FBQyxHQUFZO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQVFELFFBQVE7SUFDUixDQUFDOzs7OztJQUtELE9BQU87UUFDTCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7Ozs7O0lBS0QsUUFBUTtRQUNOLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLGlIQUF5Qzs7YUFFMUM7Ozs7O29CQUdFLEtBQUssU0FBQyxPQUFPO3dCQVFiLEtBQUs7d0JBQ0wsTUFBTTs7OztJQVZQLDRDQUF3Qzs7SUFTeEMsdUNBQTBCOztJQUMxQix1Q0FBNEQ7Ozs7O0lBRTVELHdDQUEyQjs7Ozs7O0FBNkI3QixNQUFNLFVBQVUscUJBQXFCLENBQUMsR0FBUTtJQUM1QyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtRQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRS9CLE9BQU8sQ0FBQyxHQUFHLEtBQUssTUFBTSxJQUFJLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2QztJQUVELE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnc2ItYWNjb3JkaW9uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vYWNjb3JkaW9uLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9hY2NvcmRpb24uY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBvcGVuQ2xvc2VJdGVtcyA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcbiAgQElucHV0KCdtdWx0aScpXHJcbiAgZ2V0IG11bHRpKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMubXVsdGlWYWx1ZTtcclxuICB9XHJcbiAgc2V0IG11bHRpKHZhbDogYm9vbGVhbikge1xyXG4gICAgdGhpcy5tdWx0aVZhbHVlID0gY29udmVydFRvQm9vbFByb3BlcnR5KHZhbCk7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKSBpc0hpaWRkZW4gPSB0cnVlO1xyXG4gIEBPdXRwdXQoKSBjYXJkQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBwcml2YXRlIG11bHRpVmFsdWUgPSBmYWxzZTtcclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW5zIGFsbCBlbmFibGVkIGFjY29yZGlvbiBpdGVtcy5cclxuICAgKi9cclxuICBvcGVuQWxsKCkge1xyXG4gICAgaWYgKHRoaXMubXVsdGkpIHtcclxuICAgICAgdGhpcy5vcGVuQ2xvc2VJdGVtcy5uZXh0KGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb3NlcyBhbGwgZW5hYmxlZCBhY2NvcmRpb24gaXRlbXMuXHJcbiAgICovXHJcbiAgY2xvc2VBbGwoKSB7XHJcbiAgICB0aGlzLm9wZW5DbG9zZUl0ZW1zLm5leHQodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvLyB0b2dnbGVBY2NvcmRpb24oKSB7XHJcbiAgLy8gICB0aGlzLmlzSGlpZGRlbiA9ICF0aGlzLmlzSGlpZGRlbjtcclxuICAvLyAgIHRoaXMuY2FyZENsaWNrLmVtaXQoeyBldmVudDogZXZlbnQsIGRhdGE6IHRoaXMuaXNIaWlkZGVuIH0pO1xyXG4gIC8vIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9Cb29sUHJvcGVydHkodmFsOiBhbnkpOiBib29sZWFuIHtcclxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcclxuICAgIHZhbCA9IHZhbC50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuXHJcbiAgICByZXR1cm4gKHZhbCA9PT0gJ3RydWUnIHx8IHZhbCA9PT0gJycpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuICEhdmFsO1xyXG59XHJcbiJdfQ==