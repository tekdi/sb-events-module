/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Host, Output, EventEmitter } from '@angular/core';
import { AccordionComponent } from '../accordion.component';
export class AccordionItemComponent {
    /**
     * @param {?} accordion
     */
    constructor(accordion) {
        this.accordion = accordion;
        this.collapsedValue = true;
        this.collapsedChange = new EventEmitter();
    }
    /**
     * Item is collapse (`true` by default)
     * type {boolean}
     * @return {?}
     */
    get collapsed() {
        return this.collapsedValue;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set collapsed(val) {
        /** @type {?} */
        const newVal = convertToBoolProperty(val);
        if (this.collapsedValue === newVal) {
            return;
        }
        this.collapsedValue = newVal;
        this.collapsedChange.emit(this.collapsedValue);
    }
    /**
     * Item is expanded (`false` by default)
     * type {boolean}
     * @return {?}
     */
    get expanded() {
        return !this.collapsed;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set expanded(val) {
        this.collapsedValue = !convertToBoolProperty(val);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.accordion.openCloseItems
            .subscribe((/**
         * @param {?} collapsed
         * @return {?}
         */
        collapsed => {
            this.collapsed = collapsed;
        }));
    }
    /**
     * Open/close the item
     * @return {?}
     */
    toggle() {
        // we need this temporary variable as `openCloseItems.next` will change current value we need to save
        /** @type {?} */
        const willSet = !this.collapsed;
        if (!this.accordion.multi) {
            this.accordion.openCloseItems.next(true);
        }
        this.collapsed = willSet;
    }
    /**
     * @return {?}
     */
    open() {
        this.collapsed = false;
    }
    /**
     * @return {?}
     */
    close() {
        this.collapsed = true;
    }
}
AccordionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-accordion-item',
                template: "<div class=\"sbaccordion sbaccordion--toc\">\r\n  <div class=\"sbaccordion__panel\">\r\n    <ng-content select=\"sb-accordion-header\"></ng-content>\r\n    <ng-content select=\"sb-accordion-body\"></ng-content>\r\n  </div>\r\n</div>",
                styles: [".sbaccordion{width:100%;box-shadow:0 .1875rem .25rem 0 rgba(var(--rc-rgba-primary),.1)!important}.sbaccordion__panel{margin-bottom:.5rem}.sbaccordion__panel-header{background:var(--white);padding:.5rem 1rem;display:flex;align-items:center;justify-content:space-between;cursor:pointer;height:3.5rem;border-radius:.25rem;border:1px solid var(--primary-300)}.accordion-item-header-collapsed .sbaccordion__panel-header__title{font-weight:400}"]
            }] }
];
/** @nocollapse */
AccordionItemComponent.ctorParameters = () => [
    { type: AccordionComponent, decorators: [{ type: Host }] }
];
AccordionItemComponent.propDecorators = {
    collapsed: [{ type: Input, args: ['collapsed',] }, { type: HostBinding, args: ['class.collapsed',] }],
    expanded: [{ type: Input, args: ['expanded',] }, { type: HostBinding, args: ['class.expanded',] }],
    collapsedChange: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    AccordionItemComponent.prototype.collapsedValue;
    /** @type {?} */
    AccordionItemComponent.prototype.collapsedChange;
    /**
     * @type {?}
     * @private
     */
    AccordionItemComponent.prototype.accordion;
}
/**
 * @param {?} val
 * @return {?}
 */
export function convertToBoolProperty(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === '');
    }
    return !!val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHByb2plY3Qtc3VuYmlyZC9jb21tb24tY29uc3VtcHRpb24tdjgvIiwic291cmNlcyI6WyJsaWIvYWNjb3JkaW9uL2FjY29yZGlvbi1pdGVtL2FjY29yZGlvbi1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBTTVELE1BQU0sT0FBTyxzQkFBc0I7Ozs7SUFpQ2pDLFlBQTRCLFNBQTZCO1FBQTdCLGNBQVMsR0FBVCxTQUFTLENBQW9CO1FBaENqRCxtQkFBYyxHQUFHLElBQUksQ0FBQztRQThCcEIsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO0lBR3hELENBQUM7Ozs7OztJQTVCRCxJQUVJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFDRCxJQUFJLFNBQVMsQ0FBQyxHQUFZOztjQUNsQixNQUFNLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFDO1FBQ3pDLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxNQUFNLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFDL0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7OztJQU1ELElBRUksUUFBUTtRQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3pCLENBQUM7Ozs7O0lBQ0QsSUFBSSxRQUFRLENBQUMsR0FBWTtRQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7OztJQU9ELFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWM7YUFDNUIsU0FBUzs7OztRQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQy9CLENBQUMsRUFBQyxDQUFDO0lBQ0gsQ0FBQzs7Ozs7SUFNRCxNQUFNOzs7Y0FFRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUztRQUUvQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7SUFDM0IsQ0FBQzs7OztJQUNELElBQUk7UUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7OztZQW5FRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0Isb1BBQThDOzthQUUvQzs7OztZQUxRLGtCQUFrQix1QkF1Q1osSUFBSTs7O3dCQTNCaEIsS0FBSyxTQUFDLFdBQVcsY0FDakIsV0FBVyxTQUFDLGlCQUFpQjt1QkFlN0IsS0FBSyxTQUFDLFVBQVUsY0FDaEIsV0FBVyxTQUFDLGdCQUFnQjs4QkFRNUIsTUFBTTs7Ozs7OztJQTlCUCxnREFBOEI7O0lBOEI5QixpREFBd0Q7Ozs7O0lBRTVDLDJDQUE2Qzs7Ozs7O0FBaUMzRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsR0FBUTtJQUM1QyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtRQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLEtBQUssTUFBTSxJQUFJLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2QztJQUVELE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBIb3N0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY2NvcmRpb25Db21wb25lbnQgfSBmcm9tICcuLi9hY2NvcmRpb24uY29tcG9uZW50JztcclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdzYi1hY2NvcmRpb24taXRlbScsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2FjY29yZGlvbi1pdGVtLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9hY2NvcmRpb24taXRlbS5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25JdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBwcml2YXRlIGNvbGxhcHNlZFZhbHVlID0gdHJ1ZTtcclxuICAvKipcclxuICAgKiBJdGVtIGlzIGNvbGxhcHNlIChgdHJ1ZWAgYnkgZGVmYXVsdClcclxuICAgKiB0eXBlIHtib29sZWFufVxyXG4gICAqL1xyXG4gIEBJbnB1dCgnY29sbGFwc2VkJylcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbGxhcHNlZCcpXHJcbiAgZ2V0IGNvbGxhcHNlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxhcHNlZFZhbHVlO1xyXG4gIH1cclxuICBzZXQgY29sbGFwc2VkKHZhbDogYm9vbGVhbikge1xyXG4gICAgY29uc3QgbmV3VmFsID0gY29udmVydFRvQm9vbFByb3BlcnR5KHZhbCk7XHJcbiAgICBpZiAodGhpcy5jb2xsYXBzZWRWYWx1ZSA9PT0gbmV3VmFsKSB7IHJldHVybjsgfVxyXG4gICAgdGhpcy5jb2xsYXBzZWRWYWx1ZSA9IG5ld1ZhbDtcclxuICAgIHRoaXMuY29sbGFwc2VkQ2hhbmdlLmVtaXQodGhpcy5jb2xsYXBzZWRWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJdGVtIGlzIGV4cGFuZGVkIChgZmFsc2VgIGJ5IGRlZmF1bHQpXHJcbiAgICogdHlwZSB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBASW5wdXQoJ2V4cGFuZGVkJylcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmV4cGFuZGVkJylcclxuICBnZXQgZXhwYW5kZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIXRoaXMuY29sbGFwc2VkO1xyXG4gIH1cclxuICBzZXQgZXhwYW5kZWQodmFsOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmNvbGxhcHNlZFZhbHVlID0gIWNvbnZlcnRUb0Jvb2xQcm9wZXJ0eSh2YWwpO1xyXG4gIH1cclxuXHJcbiAgQE91dHB1dCgpIGNvbGxhcHNlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwcml2YXRlIGFjY29yZGlvbjogQWNjb3JkaW9uQ29tcG9uZW50KSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuYWNjb3JkaW9uLm9wZW5DbG9zZUl0ZW1zXHJcbiAgICAuc3Vic2NyaWJlKGNvbGxhcHNlZCA9PiB7XHJcbiAgICAgIHRoaXMuY29sbGFwc2VkID0gY29sbGFwc2VkO1xyXG4gIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW4vY2xvc2UgdGhlIGl0ZW1cclxuICAgKi9cclxuICB0b2dnbGUoKSB7XHJcbiAgICAvLyB3ZSBuZWVkIHRoaXMgdGVtcG9yYXJ5IHZhcmlhYmxlIGFzIGBvcGVuQ2xvc2VJdGVtcy5uZXh0YCB3aWxsIGNoYW5nZSBjdXJyZW50IHZhbHVlIHdlIG5lZWQgdG8gc2F2ZVxyXG4gICAgY29uc3Qgd2lsbFNldCA9ICF0aGlzLmNvbGxhcHNlZDtcclxuXHJcbiAgICBpZiAoIXRoaXMuYWNjb3JkaW9uLm11bHRpKSB7XHJcbiAgICAgIHRoaXMuYWNjb3JkaW9uLm9wZW5DbG9zZUl0ZW1zLm5leHQodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbGxhcHNlZCA9IHdpbGxTZXQ7XHJcbiAgfVxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLmNvbGxhcHNlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLmNvbGxhcHNlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb0Jvb2xQcm9wZXJ0eSh2YWw6IGFueSk6IGJvb2xlYW4ge1xyXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xyXG4gICAgdmFsID0gdmFsLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xyXG4gICAgcmV0dXJuICh2YWwgPT09ICd0cnVlJyB8fCB2YWwgPT09ICcnKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAhIXZhbDtcclxufVxyXG4iXX0=