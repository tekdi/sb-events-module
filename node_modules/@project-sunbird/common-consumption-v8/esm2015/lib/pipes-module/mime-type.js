/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
export class MimeTypeMasterData {
}
MimeTypeMasterData.COLLECTION = 'application/vnd.ekstep.content-collection';
MimeTypeMasterData.VIDEO = ['video/avi', 'video/mpeg', 'video/quicktime', 'video/3gpp', 'video/mpeg', 'video/mp4',
    'video/ogg', 'video/webm'];
MimeTypeMasterData.AUDIO = ['audio/mp3', 'audio/mp4', 'audio/mpeg', 'audio/ogg', 'audio/webm', 'audio/x-wav', 'audio/wav'];
MimeTypeMasterData.INTERACTIVE = ['application/vnd.ekstep.ecml-archive', 'application/vnd.ekstep.html-archive',
    'application/vnd.android.package-archive', 'application/vnd.ekstep.content-archive',
    'application/vnd.ekstep.plugin-archive', 'application/vnd.ekstep.h5p-archive'];
MimeTypeMasterData.DOCS = ['application/pdf', 'application/epub', 'application/msword'];
MimeTypeMasterData.ALL = ['video/mp4', 'video/x-youtube', 'video/webm', 'application/pdf', 'application/epub',
    'application/pdf', 'application/epub', 'application/vnd.ekstep.ecml-archive', 'application/vnd.ekstep.h5p-archive',
    'application/vnd.ekstep.html-archive'
];
if (false) {
    /** @type {?} */
    MimeTypeMasterData.COLLECTION;
    /** @type {?} */
    MimeTypeMasterData.VIDEO;
    /** @type {?} */
    MimeTypeMasterData.AUDIO;
    /** @type {?} */
    MimeTypeMasterData.INTERACTIVE;
    /** @type {?} */
    MimeTypeMasterData.DOCS;
    /** @type {?} */
    MimeTypeMasterData.ALL;
}
/*
  Contents are filtered based on given mimetype
*/
export class MimeTypePipe {
    /**
     * @param {?=} item
     * @param {?=} mimeTypes
     * @param {?=} isTextbookTocPage
     * @return {?}
     */
    transform(item, mimeTypes = ['all'], isTextbookTocPage = false) {
        if (mimeTypes.indexOf('all') > -1 && item != null) {
            if (item.mimeType !== MimeTypeMasterData.COLLECTION && !item.children) {
                return true;
            }
            else {
                if (item.mimeType === MimeTypeMasterData.COLLECTION && item.children && !item.children.length) {
                    return false;
                }
                if (item.children && item.children.length) {
                    return this.getFilteredItems(item.children, MimeTypeMasterData.ALL);
                }
                else {
                    return true;
                }
            }
        }
        if (item != null && item.mimeType !== MimeTypeMasterData.COLLECTION && (!item.children || !item.children.length)) {
            return this.getFilteredItems([item], mimeTypes);
        }
        if (item != null) {
            return this.getFilteredItems(item.children, mimeTypes);
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} contents
     * @param {?} mimeTypes
     * @return {?}
     */
    getFilteredItems(contents, mimeTypes) {
        if (contents) {
            return this.flattenDeep(contents)
                .some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => !!mimeTypes.find((/**
             * @param {?} m
             * @return {?}
             */
            m => m === c.mimeType))));
        }
    }
    /**
     * @private
     * @param {?} contents
     * @return {?}
     */
    flattenDeep(contents) {
        if (contents) {
            return contents.reduce((/**
             * @param {?} acc
             * @param {?} val
             * @return {?}
             */
            (acc, val) => {
                if (val.children) {
                    acc.push(val);
                    return acc.concat(this.flattenDeep(val.children));
                }
                else {
                    return acc.concat(val);
                }
            }), []);
        }
    }
}
MimeTypePipe.decorators = [
    { type: Pipe, args: [{
                name: 'hasMimeType',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWltZS10eXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHByb2plY3Qtc3VuYmlyZC9jb21tb24tY29uc3VtcHRpb24tdjgvIiwic291cmNlcyI6WyJsaWIvcGlwZXMtbW9kdWxlL21pbWUtdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsTUFBTSxPQUFPLGtCQUFrQjs7QUFDTiw2QkFBVSxHQUFHLDJDQUEyQyxDQUFDO0FBQ3pELHdCQUFLLEdBQUcsQ0FBQyxXQUFXLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsV0FBVztJQUNuSCxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDTix3QkFBSyxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDeEcsOEJBQVcsR0FBRyxDQUFDLHFDQUFxQyxFQUFFLHFDQUFxQztJQUNoSCx5Q0FBeUMsRUFBRSx3Q0FBd0M7SUFDbkYsdUNBQXVDLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztBQUMxRCx1QkFBSSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUNyRSxzQkFBRyxHQUFHLENBQUMsV0FBVyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxrQkFBa0I7SUFDL0csaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUscUNBQXFDLEVBQUUsb0NBQW9DO0lBQ2xILHFDQUFxQztDQUN0QyxDQUFDOzs7SUFYRiw4QkFBZ0Y7O0lBQ2hGLHlCQUM2Qjs7SUFDN0IseUJBQStIOztJQUMvSCwrQkFFaUY7O0lBQ2pGLHdCQUE0Rjs7SUFDNUYsdUJBR0U7Ozs7O0FBV0osTUFBTSxPQUFPLFlBQVk7Ozs7Ozs7SUFDdkIsU0FBUyxDQUFDLElBQVUsRUFBRSxZQUFzQixDQUFDLEtBQUssQ0FBQyxFQUFFLG9CQUE2QixLQUFLO1FBQ3JGLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2pELElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxrQkFBa0IsQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNyRSxPQUFPLElBQUksQ0FBQzthQUNiO2lCQUFNO2dCQUNMLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxrQkFBa0IsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO29CQUM3RixPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7b0JBQ3pDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3JFO3FCQUFNO29CQUNMLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2FBQ0Y7U0FDRjtRQUNELElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLGtCQUFrQixDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDaEgsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNqRDtRQUNELElBQUcsSUFBSSxJQUFFLElBQUksRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDeEQ7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFFSCxDQUFDOzs7Ozs7SUFHRCxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsU0FBbUI7UUFDNUMsSUFBSSxRQUFRLEVBQUU7WUFFWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO2lCQUM5QixJQUFJOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUMsRUFBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sV0FBVyxDQUFDLFFBQVE7UUFDMUIsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLFFBQVEsQ0FBQyxNQUFNOzs7OztZQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNsQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUU7b0JBQ2hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7aUJBQ25EO3FCQUFNO29CQUNMLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDeEI7WUFDSCxDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7U0FDUjtJQUNILENBQUM7OztZQWxERixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGFBQWE7YUFDcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmV4cG9ydCBjbGFzcyBNaW1lVHlwZU1hc3RlckRhdGEge1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ09MTEVDVElPTiA9ICdhcHBsaWNhdGlvbi92bmQuZWtzdGVwLmNvbnRlbnQtY29sbGVjdGlvbic7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBWSURFTyA9IFsndmlkZW8vYXZpJywgJ3ZpZGVvL21wZWcnLCAndmlkZW8vcXVpY2t0aW1lJywgJ3ZpZGVvLzNncHAnLCAndmlkZW8vbXBlZycsICd2aWRlby9tcDQnLFxyXG4gICAgJ3ZpZGVvL29nZycsICd2aWRlby93ZWJtJ107XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBVURJTyA9IFsnYXVkaW8vbXAzJywgJ2F1ZGlvL21wNCcsICdhdWRpby9tcGVnJywgJ2F1ZGlvL29nZycsICdhdWRpby93ZWJtJywgJ2F1ZGlvL3gtd2F2JywgJ2F1ZGlvL3dhdiddO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSU5URVJBQ1RJVkUgPSBbJ2FwcGxpY2F0aW9uL3ZuZC5la3N0ZXAuZWNtbC1hcmNoaXZlJywgJ2FwcGxpY2F0aW9uL3ZuZC5la3N0ZXAuaHRtbC1hcmNoaXZlJyxcclxuICAgICdhcHBsaWNhdGlvbi92bmQuYW5kcm9pZC5wYWNrYWdlLWFyY2hpdmUnLCAnYXBwbGljYXRpb24vdm5kLmVrc3RlcC5jb250ZW50LWFyY2hpdmUnLFxyXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5la3N0ZXAucGx1Z2luLWFyY2hpdmUnLCAnYXBwbGljYXRpb24vdm5kLmVrc3RlcC5oNXAtYXJjaGl2ZSddO1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRE9DUyA9IFsnYXBwbGljYXRpb24vcGRmJywgJ2FwcGxpY2F0aW9uL2VwdWInLCAnYXBwbGljYXRpb24vbXN3b3JkJ107XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTEwgPSBbJ3ZpZGVvL21wNCcsICd2aWRlby94LXlvdXR1YmUnLCAndmlkZW8vd2VibScsICdhcHBsaWNhdGlvbi9wZGYnLCAnYXBwbGljYXRpb24vZXB1YicsXHJcbiAgICAnYXBwbGljYXRpb24vcGRmJywgJ2FwcGxpY2F0aW9uL2VwdWInLCAnYXBwbGljYXRpb24vdm5kLmVrc3RlcC5lY21sLWFyY2hpdmUnLCAnYXBwbGljYXRpb24vdm5kLmVrc3RlcC5oNXAtYXJjaGl2ZScsXHJcbiAgICAnYXBwbGljYXRpb24vdm5kLmVrc3RlcC5odG1sLWFyY2hpdmUnXHJcbiAgXTtcclxufVxyXG5cclxuLypcclxuICBDb250ZW50cyBhcmUgZmlsdGVyZWQgYmFzZWQgb24gZ2l2ZW4gbWltZXR5cGVcclxuKi9cclxuXHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2hhc01pbWVUeXBlJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE1pbWVUeXBlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIHRyYW5zZm9ybShpdGVtPzogYW55LCBtaW1lVHlwZXM6IHN0cmluZ1tdID0gWydhbGwnXSwgaXNUZXh0Ym9va1RvY1BhZ2U6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKG1pbWVUeXBlcy5pbmRleE9mKCdhbGwnKSA+IC0xICYmIGl0ZW0gIT0gbnVsbCkge1xyXG4gICAgICBpZiAoaXRlbS5taW1lVHlwZSAhPT0gTWltZVR5cGVNYXN0ZXJEYXRhLkNPTExFQ1RJT04gJiYgIWl0ZW0uY2hpbGRyZW4pIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoaXRlbS5taW1lVHlwZSA9PT0gTWltZVR5cGVNYXN0ZXJEYXRhLkNPTExFQ1RJT04gJiYgaXRlbS5jaGlsZHJlbiAmJiAhaXRlbS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmdldEZpbHRlcmVkSXRlbXMoaXRlbS5jaGlsZHJlbiwgTWltZVR5cGVNYXN0ZXJEYXRhLkFMTCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGl0ZW0gIT0gbnVsbCAmJiBpdGVtLm1pbWVUeXBlICE9PSBNaW1lVHlwZU1hc3RlckRhdGEuQ09MTEVDVElPTiAmJiAoIWl0ZW0uY2hpbGRyZW4gfHwgIWl0ZW0uY2hpbGRyZW4ubGVuZ3RoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXRGaWx0ZXJlZEl0ZW1zKFtpdGVtXSwgbWltZVR5cGVzKTtcclxuICAgIH1cclxuICAgIGlmKGl0ZW0hPW51bGwpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0RmlsdGVyZWRJdGVtcyhpdGVtLmNoaWxkcmVuLCBtaW1lVHlwZXMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICB9XHJcblxyXG5cclxuICBnZXRGaWx0ZXJlZEl0ZW1zKGNvbnRlbnRzLCBtaW1lVHlwZXM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoY29udGVudHMpIHtcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmZsYXR0ZW5EZWVwKGNvbnRlbnRzKVxyXG4gICAgICAgIC5zb21lKChjKSA9PiAhIW1pbWVUeXBlcy5maW5kKG0gPT4gbSA9PT0gYy5taW1lVHlwZSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmbGF0dGVuRGVlcChjb250ZW50cykge1xyXG4gICAgaWYgKGNvbnRlbnRzKSB7XHJcbiAgICAgIHJldHVybiBjb250ZW50cy5yZWR1Y2UoKGFjYywgdmFsKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbC5jaGlsZHJlbikge1xyXG4gICAgICAgICAgYWNjLnB1c2godmFsKTtcclxuICAgICAgICAgIHJldHVybiBhY2MuY29uY2F0KHRoaXMuZmxhdHRlbkRlZXAodmFsLmNoaWxkcmVuKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBhY2MuY29uY2F0KHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBbXSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==