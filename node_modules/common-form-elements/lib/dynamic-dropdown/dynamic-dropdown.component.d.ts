import { OnChanges, OnDestroy, OnInit, SimpleChanges, EventEmitter } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { Observable, Subject, Subscription } from 'rxjs';
import { FieldConfig, FieldConfigOption } from '../common-form-config';
import { ValueComparator } from '../utilities/value-comparator';
export declare class DynamicDropdownComponent implements OnInit, OnChanges, OnDestroy {
    ValueComparator: typeof ValueComparator;
    field: FieldConfig<String>;
    disabled?: boolean;
    options: any;
    label?: string;
    placeholder?: string;
    isMultiple?: boolean;
    context?: FormControl;
    contextTerms?: any;
    formControlRef?: FormControl;
    formGroup?: FormGroup;
    default?: any;
    contextData: any;
    dataLoadStatusDelegate: Subject<'LOADING' | 'LOADED'>;
    type?: string;
    styleClass?: string;
    onChangeFilter: EventEmitter<any>;
    validations?: any;
    depends?: FormControl[];
    dependencyTerms?: any;
    isDependsInvalid: any;
    options$?: Observable<FieldConfigOption<any>[]>;
    contextValueChangesSubscription?: Subscription;
    selectedType: any;
    tempAssociation: any;
    latestParentValue: string;
    constructor();
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    isOptionsArray(options: any): boolean;
    isOptionsClosure(options: any): boolean;
    isOptionsMap(input: any): boolean;
    isOptionsArrayMap(input: any): boolean;
    onChangeFacet($event: any): void;
    fetchAssociations(): any;
    getParentValue(): any;
    getOptionValueForTerms(option: any): any;
    getOptionValueForRange(option: any, optionsType: any): any;
    convertOptionToArray(option: any, output?: any): void;
}
