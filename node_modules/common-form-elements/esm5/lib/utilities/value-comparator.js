/**
 * @fileoverview added by tsickle
 * Generated from: lib/utilities/value-comparator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ValueComparator = /** @class */ (function () {
    function ValueComparator() {
    }
    /**
     * @param {?} v1
     * @param {?} v2
     * @return {?}
     */
    ValueComparator.valueComparator = /**
     * @param {?} v1
     * @param {?} v2
     * @return {?}
     */
    function (v1, v2) {
        if (typeof v1 === 'object' && typeof v2 === 'object') {
            return ObjectUtil.equals(v1, v2);
        }
        else if (v1 === v2) {
            return true;
        }
        else if (!v1 && !v2) {
            return true;
        }
        return false;
    };
    return ValueComparator;
}());
export { ValueComparator };
var ObjectUtil = /** @class */ (function () {
    function ObjectUtil() {
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ObjectUtil.equals = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        /** @type {?} */
        var countProps = (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            /** @type {?} */
            var count = 0;
            for (var k in obj) {
                if (obj.hasOwnProperty(k)) {
                    count++;
                }
            }
            return count;
        });
        /** @type {?} */
        var objectEquals = (/**
         * @param {?} v1
         * @param {?} v2
         * @return {?}
         */
        function (v1, v2) {
            if (typeof (v1) !== typeof (v2)) {
                return false;
            }
            if (typeof (v1) === 'function') {
                return v1.toString() === v2.toString();
            }
            if (v1 instanceof Object && v2 instanceof Object) {
                if (countProps(v1) !== countProps(v2)) {
                    return false;
                }
                /** @type {?} */
                var r = true;
                for (var k in v1) {
                    r = objectEquals(v1[k], v2[k]);
                    if (!r) {
                        return false;
                    }
                }
                return true;
            }
            else {
                return v1 === v2;
            }
        });
        return objectEquals(a, b);
    };
    /**
     * @param {?} newObj
     * @param {?} oldObj
     * @return {?}
     */
    ObjectUtil.getPropDiff = /**
     * @param {?} newObj
     * @param {?} oldObj
     * @return {?}
     */
    function (newObj, oldObj) {
        return Object.keys(newObj).reduce((/**
         * @param {?} acc
         * @param {?} key
         * @return {?}
         */
        function (acc, key) {
            if (ObjectUtil.equals(newObj[key], oldObj[key])) {
                return acc;
            }
            acc.push(key);
            return acc;
        }), []);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ObjectUtil.getTruthyProps = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Object.keys(obj).filter((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return !!obj[key]; }));
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ObjectUtil.toOrderedString = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return JSON.stringify(Object.keys(obj).sort().reduce((/**
         * @param {?} acc
         * @param {?} k
         * @return {?}
         */
        function (acc, k) {
            acc[k] = obj[k];
            return acc;
        }), {}));
    };
    return ObjectUtil;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtY29tcGFyYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NvbW1vbi1mb3JtLWVsZW1lbnRzLyIsInNvdXJjZXMiOlsibGliL3V0aWxpdGllcy92YWx1ZS1jb21wYXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7SUFBQTtJQVlBLENBQUM7Ozs7OztJQVhRLCtCQUFlOzs7OztJQUF0QixVQUF1QixFQUFFLEVBQUUsRUFBRTtRQUMzQixJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRLEVBQUU7WUFDcEQsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNsQzthQUFNLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNwQixPQUFPLElBQUksQ0FBQztTQUNiO2FBQU0sSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBWkQsSUFZQzs7QUFFRDtJQUFBO0lBZ0VBLENBQUM7Ozs7OztJQS9EZSxpQkFBTTs7Ozs7SUFBcEIsVUFBcUIsQ0FBTSxFQUFFLENBQU07O1lBQzNCLFVBQVU7Ozs7UUFBRyxVQUFDLEdBQUc7O2dCQUNqQixLQUFLLEdBQUcsQ0FBQztZQUNiLEtBQUssSUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO2dCQUNuQixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3pCLEtBQUssRUFBRSxDQUFDO2lCQUNUO2FBQ0Y7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsQ0FBQTs7WUFFSyxZQUFZOzs7OztRQUFHLFVBQUMsRUFBTyxFQUFFLEVBQU87WUFDcEMsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUMvQixPQUFPLEtBQUssQ0FBQzthQUNkO1lBRUQsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssVUFBVSxFQUFFO2dCQUM5QixPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDeEM7WUFFRCxJQUFJLEVBQUUsWUFBWSxNQUFNLElBQUksRUFBRSxZQUFZLE1BQU0sRUFBRTtnQkFDaEQsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEtBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO29CQUNyQyxPQUFPLEtBQUssQ0FBQztpQkFDZDs7b0JBRUcsQ0FBQyxHQUFHLElBQUk7Z0JBRVosS0FBSyxJQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7b0JBQ2xCLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvQixJQUFJLENBQUMsQ0FBQyxFQUFFO3dCQUNOLE9BQU8sS0FBSyxDQUFDO3FCQUNkO2lCQUNGO2dCQUNELE9BQU8sSUFBSSxDQUFDO2FBQ2I7aUJBQU07Z0JBQ0wsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQyxDQUFBO1FBRUQsT0FBTyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7OztJQUVhLHNCQUFXOzs7OztJQUF6QixVQUEwQixNQUFVLEVBQUUsTUFBVTtRQUM5QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTTs7Ozs7UUFBVyxVQUFDLEdBQWEsRUFBRSxHQUFHO1lBQzdELElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQy9DLE9BQU8sR0FBRyxDQUFDO2FBQ1o7WUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDOzs7OztJQUVhLHlCQUFjOzs7O0lBQTVCLFVBQTZCLEdBQU87UUFDbEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7UUFBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQVYsQ0FBVSxFQUFDLENBQUM7SUFDdEQsQ0FBQzs7Ozs7SUFFYSwwQkFBZTs7OztJQUE3QixVQUE4QixHQUFPO1FBQ25DLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU07Ozs7O1FBQUssVUFBQyxHQUFHLEVBQUUsQ0FBQztZQUM5RCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxHQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDVixDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBaEVELElBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFZhbHVlQ29tcGFyYXRvciB7XG4gIHN0YXRpYyB2YWx1ZUNvbXBhcmF0b3IodjEsIHYyKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiB2MSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHYyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIE9iamVjdFV0aWwuZXF1YWxzKHYxLCB2Mik7XG4gICAgfSBlbHNlIGlmICh2MSA9PT0gdjIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIXYxICYmICF2Mikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmNsYXNzIE9iamVjdFV0aWwge1xuICBwdWJsaWMgc3RhdGljIGVxdWFscyhhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvdW50UHJvcHMgPSAob2JqKSA9PiB7XG4gICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgZm9yIChjb25zdCBrIGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgY291bnQrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH07XG5cbiAgICBjb25zdCBvYmplY3RFcXVhbHMgPSAodjE6IGFueSwgdjI6IGFueSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiAodjEpICE9PSB0eXBlb2YgKHYyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgKHYxKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdjEudG9TdHJpbmcoKSA9PT0gdjIudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHYxIGluc3RhbmNlb2YgT2JqZWN0ICYmIHYyIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIGlmIChjb3VudFByb3BzKHYxKSAhPT0gY291bnRQcm9wcyh2MikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgciA9IHRydWU7XG5cbiAgICAgICAgZm9yIChjb25zdCBrIGluIHYxKSB7XG4gICAgICAgICAgciA9IG9iamVjdEVxdWFscyh2MVtrXSwgdjJba10pO1xuICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2MSA9PT0gdjI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBvYmplY3RFcXVhbHMoYSwgYik7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFByb3BEaWZmKG5ld09iajoge30sIG9sZE9iajoge30pOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG5ld09iaikucmVkdWNlPHN0cmluZ1tdPigoYWNjOiBzdHJpbmdbXSwga2V5KSA9PiB7XG4gICAgICBpZiAoT2JqZWN0VXRpbC5lcXVhbHMobmV3T2JqW2tleV0sIG9sZE9ialtrZXldKSkge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuXG4gICAgICBhY2MucHVzaChrZXkpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFRydXRoeVByb3BzKG9iajoge30pOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuZmlsdGVyKChrZXkpID0+ICEhb2JqW2tleV0pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB0b09yZGVyZWRTdHJpbmcob2JqOiB7fSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKG9iaikuc29ydCgpLnJlZHVjZTx7fT4oKGFjYywgaykgPT4ge1xuICAgICAgYWNjW2tdID0gb2JqW2tdO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSkpO1xuICB9XG59XG4iXX0=