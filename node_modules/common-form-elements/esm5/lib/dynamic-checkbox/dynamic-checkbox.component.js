/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-checkbox/dynamic-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { Subject } from 'rxjs';
import * as _ from 'lodash-es';
import { ValueComparator } from '../utilities/value-comparator';
var DynamicCheckboxComponent = /** @class */ (function () {
    function DynamicCheckboxComponent() {
        this.ValueComparator = ValueComparator;
        this.onChangeFilter = new EventEmitter();
        this.dependencyTerms = [];
        this._ = _;
    }
    /**
     * @return {?}
     */
    DynamicCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var desiredValue = (this.field.dataType === 'text') ? (this.field.default === 'Yes' ? true : false) : !!this.field.default;
        this.checked = desiredValue;
    };
    /**
     * @param {?} checked
     * @return {?}
     */
    DynamicCheckboxComponent.prototype.onChecklistChange = /**
     * @param {?} checked
     * @return {?}
     */
    function (checked) {
        this.checked = checked;
        /** @type {?} */
        var desiredValue = (this.field.dataType === 'text') ? (checked === true ? 'Yes' : 'No') : checked;
        this.formControlRef.setValue(desiredValue);
    };
    DynamicCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-dynamic-checkbox',
                    template: "<div class=\"sb-checkbox sb-checkbox-primary\">\n  <input [attr.disabled]=\"disabled ? true : null\" type=\"checkbox\" [formControl]=\"formControlRef\" id=\"{{_.kebabCase(field.name) || field.code}}\"\n  name=\"{{_.kebabCase(field.name) || field.code}}\" [checked]=\"checked\" (change)=\"onChecklistChange($event.target.checked)\">\n  <label *ngIf=\"label\" for=\"{{_.kebabCase(field.name) || field.code}}\">{{label}}</label>\n</div>\n",
                    styles: ["label{font-size:16px}.sb-checkbox{padding:0 0 0 8px}.container{position:relative;cursor:pointer;font-size:22px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.container .checkmark{position:absolute;top:0;left:0;height:22px;width:22px;border:2px solid #000;border-radius:4px}.container input:checked~.checkmark{background-color:#2196f3}.checkmark:after{content:\"\";position:absolute;display:none}.container input:checked~.checkmark:after{display:block}.container .checkmark:after{left:7px;top:4px;width:5px;height:9px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.checkbox-label{padding:2px 0 0 32px}.checkbox-row{display:-ms-grid;display:grid;-ms-grid-columns:10% 90%;grid-template-columns:10% 90%;grid-gap:0}.label-html{font-size:14px}"]
                }] }
    ];
    /** @nocollapse */
    DynamicCheckboxComponent.ctorParameters = function () { return []; };
    DynamicCheckboxComponent.propDecorators = {
        field: [{ type: Input }],
        disabled: [{ type: Input }],
        options: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        isMultiple: [{ type: Input }],
        context: [{ type: Input }],
        contextTerms: [{ type: Input }],
        formControlRef: [{ type: Input }],
        formGroup: [{ type: Input }],
        default: [{ type: Input }],
        contextData: [{ type: Input }],
        dataLoadStatusDelegate: [{ type: Input }],
        type: [{ type: Input }],
        styleClass: [{ type: Input }],
        onChangeFilter: [{ type: Output }],
        validations: [{ type: Input }],
        depends: [{ type: Input }],
        dependencyTerms: [{ type: Input }]
    };
    return DynamicCheckboxComponent;
}());
export { DynamicCheckboxComponent };
if (false) {
    /** @type {?} */
    DynamicCheckboxComponent.prototype.ValueComparator;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.field;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.options;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.label;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.placeholder;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.isMultiple;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.context;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.contextTerms;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.formControlRef;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.formGroup;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.default;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.contextData;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.dataLoadStatusDelegate;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.type;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.styleClass;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.onChangeFilter;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.validations;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.depends;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.dependencyTerms;
    /** @type {?} */
    DynamicCheckboxComponent.prototype._;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.checked;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jb21tb24tZm9ybS1lbGVtZW50cy8iLCJzb3VyY2VzIjpbImxpYi9keW5hbWljLWNoZWNrYm94L2R5bmFtaWMtY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUMsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBYSxPQUFPLEVBQXFDLE1BQU0sTUFBTSxDQUFDO0FBRzdFLE9BQU8sS0FBSyxDQUFDLE1BQU0sV0FBVyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUc5RDtJQWlDRTtRQTFCQSxvQkFBZSxHQUFHLGVBQWUsQ0FBQztRQWdCeEIsbUJBQWMsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUl4RCxvQkFBZSxHQUFTLEVBQUUsQ0FBQztRQUVwQyxNQUFDLEdBQVEsQ0FBQyxDQUFDO0lBSUssQ0FBQzs7OztJQUVqQiwyQ0FBUTs7O0lBQVI7O1lBQ1EsWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO1FBQzVILElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDO0lBQzlCLENBQUM7Ozs7O0lBRUQsb0RBQWlCOzs7O0lBQWpCLFVBQWtCLE9BQU87UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7O1lBQ2pCLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87UUFDbkcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Z0JBNUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQiwrYkFBZ0Q7O2lCQUVqRDs7Ozs7d0JBSUUsS0FBSzsyQkFDTCxLQUFLOzBCQUNMLEtBQUs7d0JBQ0wsS0FBSzs4QkFDTCxLQUFLOzZCQUNMLEtBQUs7MEJBQ0wsS0FBSzsrQkFDTCxLQUFLO2lDQUNMLEtBQUs7NEJBQ0wsS0FBSzswQkFDTCxLQUFLOzhCQUNMLEtBQUs7eUNBQ0wsS0FBSzt1QkFDTCxLQUFLOzZCQUNMLEtBQUs7aUNBQ0wsTUFBTTs4QkFDTixLQUFLOzBCQUVMLEtBQUs7a0NBQ0wsS0FBSzs7SUFvQlIsK0JBQUM7Q0FBQSxBQS9DRCxJQStDQztTQTFDWSx3QkFBd0I7OztJQUVuQyxtREFBa0M7O0lBQ2xDLHlDQUFvQzs7SUFDcEMsNENBQTRCOztJQUM1QiwyQ0FBc0I7O0lBQ3RCLHlDQUF3Qjs7SUFDeEIsK0NBQThCOztJQUM5Qiw4Q0FBOEI7O0lBQzlCLDJDQUErQjs7SUFDL0IsZ0RBQTRCOztJQUM1QixrREFBc0M7O0lBQ3RDLDZDQUErQjs7SUFDL0IsMkNBQXVCOztJQUN2QiwrQ0FBMEI7O0lBQzFCLDBEQUErRDs7SUFDL0Qsd0NBQXVCOztJQUN2Qiw4Q0FBNkI7O0lBQzdCLGtEQUFpRTs7SUFDakUsK0NBQTJCOztJQUUzQiwyQ0FBaUM7O0lBQ2pDLG1EQUFvQzs7SUFFcEMscUNBQVc7O0lBRVgsMkNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtQ29udHJvbCwgRm9ybUdyb3VwfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiwgY29tYmluZUxhdGVzdCwgbWVyZ2V9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtGaWVsZENvbmZpZywgRmllbGRDb25maWdPcHRpb24sIEZpZWxkQ29uZmlnT3B0aW9uc0J1aWxkZXJ9IGZyb20gJy4uL2NvbW1vbi1mb3JtLWNvbmZpZyc7XG5pbXBvcnQge3RhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHtWYWx1ZUNvbXBhcmF0b3J9IGZyb20gJy4uL3V0aWxpdGllcy92YWx1ZS1jb21wYXJhdG9yJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzYi1keW5hbWljLWNoZWNrYm94JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2R5bmFtaWMtY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9keW5hbWljLWNoZWNrYm94LmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIFZhbHVlQ29tcGFyYXRvciA9IFZhbHVlQ29tcGFyYXRvcjtcbiAgQElucHV0KCkgZmllbGQ6IEZpZWxkQ29uZmlnPFN0cmluZz47XG4gIEBJbnB1dCgpIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgQElucHV0KCkgb3B0aW9uczogYW55O1xuICBASW5wdXQoKSBsYWJlbD86IHN0cmluZztcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGlzTXVsdGlwbGU/OiBib29sZWFuO1xuICBASW5wdXQoKSBjb250ZXh0PzogRm9ybUNvbnRyb2w7XG4gIEBJbnB1dCgpIGNvbnRleHRUZXJtcz86IGFueTtcbiAgQElucHV0KCkgZm9ybUNvbnRyb2xSZWY/OiBGb3JtQ29udHJvbDtcbiAgQElucHV0KCkgZm9ybUdyb3VwPzogRm9ybUdyb3VwO1xuICBASW5wdXQoKSBkZWZhdWx0PzogYW55O1xuICBASW5wdXQoKSBjb250ZXh0RGF0YTogYW55O1xuICBASW5wdXQoKSBkYXRhTG9hZFN0YXR1c0RlbGVnYXRlOiBTdWJqZWN0PCdMT0FESU5HJyB8ICdMT0FERUQnPjtcbiAgQElucHV0KCkgdHlwZT86IHN0cmluZztcbiAgQElucHV0KCkgc3R5bGVDbGFzcz86IHN0cmluZztcbiAgQE91dHB1dCgpIG9uQ2hhbmdlRmlsdGVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQElucHV0KCkgdmFsaWRhdGlvbnM/OiBhbnk7XG5cbiAgQElucHV0KCkgZGVwZW5kcz86IEZvcm1Db250cm9sW107XG4gIEBJbnB1dCgpIGRlcGVuZGVuY3lUZXJtcz86IGFueSA9IFtdO1xuXG4gIF86IGFueSA9IF87XG5cbiAgcHVibGljIGNoZWNrZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBkZXNpcmVkVmFsdWUgPSAodGhpcy5maWVsZC5kYXRhVHlwZSA9PT0gJ3RleHQnKSA/ICh0aGlzLmZpZWxkLmRlZmF1bHQgPT09ICdZZXMnID8gdHJ1ZSA6IGZhbHNlKSA6ICEhdGhpcy5maWVsZC5kZWZhdWx0O1xuICAgIHRoaXMuY2hlY2tlZCA9IGRlc2lyZWRWYWx1ZTtcbiAgfVxuXG4gIG9uQ2hlY2tsaXN0Q2hhbmdlKGNoZWNrZWQpIHtcbiAgICB0aGlzLmNoZWNrZWQgPSBjaGVja2VkO1xuICAgIGNvbnN0IGRlc2lyZWRWYWx1ZSA9ICh0aGlzLmZpZWxkLmRhdGFUeXBlID09PSAndGV4dCcpID8gKGNoZWNrZWQgPT09IHRydWUgPyAnWWVzJyA6ICdObycpIDogY2hlY2tlZDtcbiAgICB0aGlzLmZvcm1Db250cm9sUmVmLnNldFZhbHVlKGRlc2lyZWRWYWx1ZSk7XG4gIH1cblxuXG59XG4iXX0=