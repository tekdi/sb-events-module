/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-form/dynamic-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FieldConfigInputType } from '../common-form-config';
import { FormBuilder, Validators } from '@angular/forms';
import { Subject } from 'rxjs';
import { tap } from 'rxjs/operators';
import * as _ from 'lodash-es';
var DynamicFormComponent = /** @class */ (function () {
    function DynamicFormComponent(formBuilder) {
        this.formBuilder = formBuilder;
        this.initialize = new EventEmitter();
        this.finalize = new EventEmitter();
        this.dataLoadStatusDelegate = new Subject();
        this.valueChanges = new EventEmitter();
        this.statusChanges = new EventEmitter();
        this._ = _;
        this.FieldConfigInputType = FieldConfigInputType;
        this.isSection = false;
    }
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicFormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var formGroupData = {};
        /** @type {?} */
        var dependency = [];
        if (changes['config']) {
            if ((changes['config'].currentValue && changes['config'].firstChange)
                || changes['config'].previousValue !== changes['config'].currentValue) {
                this.initialize.emit(this.formGroup);
            }
        }
        if (this.statusChangesSubscription) {
            this.statusChangesSubscription.unsubscribe();
        }
        if (this.valueChangesSubscription) {
            this.valueChangesSubscription.unsubscribe();
        }
        this.isSection = !_.isEmpty(_.find(this.config, 'fields'));
        if (this.isSection) {
            this.config.forEach((/**
             * @param {?} sections
             * @return {?}
             */
            function (sections) {
                sections.fields.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                function (element, index) {
                    /** @type {?} */
                    var formValueList = _this.prepareFormValidationData(element, index);
                    if (!_.isEmpty(element.depends)) {
                        dependency.push({ code: element.code, depends: element.depends });
                    }
                    formGroupData[element.code] = formValueList;
                }));
            }));
        }
        else {
            /** @type {?} */
            var defaultSection = [];
            defaultSection = [
                {
                    'name': '',
                    'fields': _.cloneDeep(this.config)
                }
            ];
            this.config = _.cloneDeep(defaultSection);
            defaultSection.forEach((/**
             * @param {?} sections
             * @return {?}
             */
            function (sections) {
                sections.fields.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                function (element, index) {
                    /** @type {?} */
                    var formValueList = _this.prepareFormValidationData(element, index);
                    if (!_.isEmpty(element.depends)) {
                        dependency.push({ code: element.code, depends: element.depends });
                    }
                    formGroupData[element.code] = formValueList;
                }));
            }));
        }
        this.flattenSectionFields = this.getFlattenedSectionFields();
        this.formGroup = this.formBuilder.group(formGroupData);
        this.statusChangesSubscription = this.formGroup.valueChanges.pipe(tap((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            _this.statusChanges.emit({
                isPristine: _this.formGroup.pristine,
                isDirty: _this.formGroup.dirty,
                isInvalid: _this.formGroup.invalid,
                isValid: _this.formGroup.valid,
                controls: _this.getFormValidationErrors()
            });
        }))).subscribe();
        this.valueChangesSubscription = this.formGroup.valueChanges.pipe(tap((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.valueChanges.emit(data);
        }))).subscribe();
    };
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.finalize.emit();
        if (this.statusChangesSubscription) {
            this.statusChangesSubscription.unsubscribe();
        }
        if (this.valueChangesSubscription) {
            this.valueChangesSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.getFormValidationErrors = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var errors = [];
        _.keys(this.formGroup.controls).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var controlErrors = _this.formGroup.get(key).errors;
            if (controlErrors != null) {
                _.keys(controlErrors).forEach((/**
                 * @param {?} keyError
                 * @return {?}
                 */
                function (keyError) {
                    errors.push({
                        control_name: key,
                        error_name: keyError,
                        error_value: controlErrors[keyError]
                    });
                }));
            }
        }));
        return errors;
    };
    /**
     * @private
     * @param {?} element
     * @param {?} index
     * @return {?}
     */
    DynamicFormComponent.prototype.prepareFormValidationData = /**
     * @private
     * @param {?} element
     * @param {?} index
     * @return {?}
     */
    function (element, index) {
        /** @type {?} */
        var formValueList = [];
        /** @type {?} */
        var validationList = [];
        /** @type {?} */
        var defaultVal = '';
        switch (element.inputType) {
            case 'text':
                defaultVal = element.default || null;
                break;
            case 'textarea':
                defaultVal = element.default || null;
                break;
            case 'select':
                if (element.default) {
                    if (element.dataType === 'list') {
                        if (_.isArray(element.default)) {
                            defaultVal = element.default;
                        }
                        else {
                            defaultVal = _.toArray(element.default);
                        }
                    }
                    else if (element.dataType === 'text') {
                        if (_.isString(element.default)) {
                            defaultVal = element.default;
                        }
                        else {
                            defaultVal = _.toString(element.default);
                        }
                    }
                }
                else {
                    defaultVal = null;
                }
                break;
            case 'multiselect':
                if (element.default) {
                    if (element.dataType === 'list' && _.isArray(element.default)) {
                        defaultVal = element.default;
                    }
                    else if (element.dataType === 'list' && _.isString(element.default)) {
                        if (_.includes(element.default, ',')) {
                            defaultVal = _.split(element.default, ',');
                        }
                        else {
                            defaultVal = [element.default];
                        }
                    }
                    else if (element.dataType === 'text') {
                        if (_.includes(element.default, ',')) {
                            defaultVal = _.split(element.default, ',');
                        }
                        else {
                            defaultVal = [element.default];
                        }
                    }
                }
                else {
                    defaultVal = [];
                }
                break;
            case 'nestedselect':
                defaultVal = element.dataType === 'list' ?
                    (element.default && Array.isArray(element.default) ? element.default :
                        _.isEmpty(element.default) ? [] : [element.default]) :
                    (element.default || null);
                break;
            case 'checkbox':
                defaultVal = (element.dataType === 'text') ? (element.default === 'Yes' ? 'Yes' : 'No') : !!element.default;
                break;
        }
        formValueList.push(defaultVal);
        if (element.validations && element.validations.length) {
            element.validations.forEach((/**
             * @param {?} data
             * @param {?} i
             * @return {?}
             */
            function (data, i) {
                switch (data.type) {
                    case 'required':
                        if (element.inputType === 'select' || element.inputType === 'multiselect' || element.inputType === 'nestedselect') {
                            validationList.push(Validators.required);
                        }
                        else if (element.type === 'checkbox') {
                            validationList.push(Validators.requiredTrue);
                        }
                        else {
                            validationList.push(Validators.required);
                        }
                        break;
                    case 'pattern':
                        validationList.push(Validators.pattern((/** @type {?} */ (element.validations[i].value))));
                        break;
                    case 'min':
                        validationList.push(Validators.minLength((/** @type {?} */ (element.validations[i].value))));
                        break;
                    case 'max':
                        validationList.push(Validators.maxLength((/** @type {?} */ (element.validations[i].value))));
                        break;
                }
            }));
        }
        formValueList.push(Validators.compose(validationList));
        return formValueList;
    };
    /**
     * @param {?} config
     * @param {?} context
     * @return {?}
     */
    DynamicFormComponent.prototype.fetchContextTerms = /**
     * @param {?} config
     * @param {?} context
     * @return {?}
     */
    function (config, context) {
        return _.get(_.find(config, { 'code': context }), 'terms') || null;
    };
    /**
     * @param {?} code
     * @param {?} depends
     * @return {?}
     */
    DynamicFormComponent.prototype.getAllDependsFormControl = /**
     * @param {?} code
     * @param {?} depends
     * @return {?}
     */
    function (code, depends) {
        var _this = this;
        /** @type {?} */
        var fieldDepends = {};
        _.forEach(depends, (/**
         * @param {?} depend
         * @return {?}
         */
        function (depend) {
            if (_this.formGroup.get(depend)) {
                fieldDepends[depend] = _this.formGroup.get(depend);
            }
        }));
        return fieldDepends || null;
    };
    /**
     * @param {?} code
     * @param {?} depends
     * @return {?}
     */
    DynamicFormComponent.prototype.fetchDependencyTerms = /**
     * @param {?} code
     * @param {?} depends
     * @return {?}
     */
    function (code, depends) {
        /** @type {?} */
        var dependsTerms = _.map(_.filter(this.flattenSectionFields, (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return _.includes(depends, c.code);
        })), (/**
         * @param {?} depend
         * @return {?}
         */
        function (depend) {
            return depend.terms || depend.range;
        }));
        return _.flatten(dependsTerms);
    };
    /**
     * @param {?} config
     * @param {?} val
     * @return {?}
     */
    DynamicFormComponent.prototype.getAppIcon = /**
     * @param {?} config
     * @param {?} val
     * @return {?}
     */
    function (config, val) {
        if (val) {
            return config.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return field.code === 'appicon';
            }));
        }
        else {
            return config.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return field.code !== 'appicon';
            }));
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    DynamicFormComponent.prototype.groupBySection = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var fields = this.getAppIcon(config, false);
        return _.groupBy(fields, 'section.index');
    };
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.getFlattenedSectionFields = /**
     * @return {?}
     */
    function () {
        return _.flatten(_.map(this.config, 'fields'));
    };
    DynamicFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-dynamic-form',
                    template: "\n<div class=\"dynamic-form\" [formGroup]=\"formGroup\">\n  <div *ngFor=\"let section of config\" class=\"formSection grid two-column-grid\">\n      <ng-container *ngFor=\"let field of section['fields']\" sbDynamicField\n      [depends]=\"getAllDependsFormControl(field.code, field.depends)\" [dependencyTerms]=\"field.depends ? fetchDependencyTerms(field.code, field.depends) : []\"\n      [context]=\"field.context ? formGroup.get(field.context) : null\" [contextTerms]=\"fetchContextTerms(config, field.context)\"\n      [options]=\"field.terms\" [field]=\"field\" [formGroup]=\"formGroup\" [default]=\"field.default || ''\" [label]=\"field.label\" [formControlRef]=\"formGroup.get(field.code)\"\n      [dataLoadStatusDelegate]=\"dataLoadStatusDelegate\" [placeholder]=\"field.placeholder || ''\" [validations]=\"field.validations || []\"\n      [disabled]=\"field.editable === true ? false : true\">\n    </ng-container>\n  </div>\n</div>\n\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DynamicFormComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    DynamicFormComponent.propDecorators = {
        config: [{ type: Input }],
        initialize: [{ type: Output }],
        finalize: [{ type: Output }],
        dataLoadStatusDelegate: [{ type: Input }],
        valueChanges: [{ type: Output }],
        statusChanges: [{ type: Output }]
    };
    return DynamicFormComponent;
}());
export { DynamicFormComponent };
if (false) {
    /** @type {?} */
    DynamicFormComponent.prototype.config;
    /** @type {?} */
    DynamicFormComponent.prototype.initialize;
    /** @type {?} */
    DynamicFormComponent.prototype.finalize;
    /** @type {?} */
    DynamicFormComponent.prototype.dataLoadStatusDelegate;
    /** @type {?} */
    DynamicFormComponent.prototype.valueChanges;
    /** @type {?} */
    DynamicFormComponent.prototype.statusChanges;
    /**
     * @type {?}
     * @private
     */
    DynamicFormComponent.prototype.statusChangesSubscription;
    /**
     * @type {?}
     * @private
     */
    DynamicFormComponent.prototype.valueChangesSubscription;
    /** @type {?} */
    DynamicFormComponent.prototype._;
    /** @type {?} */
    DynamicFormComponent.prototype.formGroup;
    /** @type {?} */
    DynamicFormComponent.prototype.FieldConfigInputType;
    /** @type {?} */
    DynamicFormComponent.prototype.fieldDependency;
    /** @type {?} */
    DynamicFormComponent.prototype.isSection;
    /** @type {?} */
    DynamicFormComponent.prototype.flattenSectionFields;
    /**
     * @type {?}
     * @private
     */
    DynamicFormComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,