/**
 * @fileoverview added by tsickle
 * Generated from: lib/checkbox/checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
var CheckboxComponent = /** @class */ (function () {
    function CheckboxComponent() {
        this.clickedLink = new EventEmitter();
    }
    /**
     * @return {?}
     */
    CheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log('label', this.label);
        console.log('labelHtml', this.labelHtml);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CheckboxComponent.prototype.handleLinkClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.target && event.target['hasAttribute'] && ((/** @type {?} */ (event.target))).hasAttribute('href')) {
            this.clickedLink.emit(((/** @type {?} */ (event.target))).getAttribute('href'));
        }
    };
    CheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-checkbox',
                    template: "<div class=\"sb-checkbox\">\n    <div class=\"checkbox-row\">\n        <label class=\"container\">\n            <input type=\"checkbox\" [formControl]=\"formControlRef\" name=\"checkbox\" value=\"value\">\n            <span class=\"checkmark\"></span>\n        </label>\n        <label *ngIf=\"label\" class=\"checkbox-label\">{{label}}</label>\n        <label class=\"label-html\" *ngIf=\"labelHtml\">\n            <div [innerHTML]=\"labelHtml | transposeHtml\" (click)=\"handleLinkClick($event)\"></div>\n        </label>\n    </div>\n</div>",
                    styles: ["label{font-size:16px}.sb-checkbox{padding:0 0 0 8px}.container{position:relative;cursor:pointer;font-size:22px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.container .checkmark{position:absolute;top:0;left:0;height:22px;width:22px;border:2px solid #000;border-radius:4px}.container input:checked~.checkmark{background-color:#2196f3}.checkmark:after{content:\"\";position:absolute;display:none}.container input:checked~.checkmark:after{display:block}.container .checkmark:after{left:7px;top:4px;width:5px;height:9px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.checkbox-label{padding:2px 0 0 32px}.checkbox-row{display:-ms-grid;display:grid;-ms-grid-columns:10% 90%;grid-template-columns:10% 90%;grid-gap:0}.label-html{font-size:14px}"]
                }] }
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return []; };
    CheckboxComponent.propDecorators = {
        label: [{ type: Input }],
        code: [{ type: Input }],
        value: [{ type: Input }],
        formControlRef: [{ type: Input }],
        labelHtml: [{ type: Input }],
        clickedLink: [{ type: Output }]
    };
    return CheckboxComponent;
}());
export { CheckboxComponent };
if (false) {
    /** @type {?} */
    CheckboxComponent.prototype.label;
    /** @type {?} */
    CheckboxComponent.prototype.code;
    /** @type {?} */
    CheckboxComponent.prototype.value;
    /** @type {?} */
    CheckboxComponent.prototype.formControlRef;
    /** @type {?} */
    CheckboxComponent.prototype.labelHtml;
    /** @type {?} */
    CheckboxComponent.prototype.clickedLink;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY29tbW9uLWZvcm0tZWxlbWVudHMvIiwic291cmNlcyI6WyJsaWIvY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0M7SUFhRTtRQUZVLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUUzQixDQUFDOzs7O0lBRWpCLG9DQUFROzs7SUFBUjtRQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFRCwyQ0FBZTs7OztJQUFmLFVBQWdCLEtBQWlCO1FBQy9CLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsbUJBQUEsS0FBSyxDQUFDLE1BQU0sRUFBcUIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM1RyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLG1CQUFBLEtBQUssQ0FBQyxNQUFNLEVBQXFCLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNqRjtJQUNILENBQUM7O2dCQXhCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLDJpQkFBd0M7O2lCQUV6Qzs7Ozs7d0JBRUUsS0FBSzt1QkFDTCxLQUFLO3dCQUNMLEtBQUs7aUNBQ0wsS0FBSzs0QkFDTCxLQUFLOzhCQUNMLE1BQU07O0lBZVQsd0JBQUM7Q0FBQSxBQTFCRCxJQTBCQztTQXJCWSxpQkFBaUI7OztJQUM1QixrQ0FBb0I7O0lBQ3BCLGlDQUFtQjs7SUFDbkIsa0NBQXFCOztJQUNyQiwyQ0FBc0M7O0lBQ3RDLHNDQUF5Qjs7SUFDekIsd0NBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NiLWNoZWNrYm94JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NoZWNrYm94LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY2hlY2tib3guY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIENoZWNrYm94Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgbGFiZWw6IGFueTtcbiAgQElucHV0KCkgY29kZTogYW55O1xuICBASW5wdXQoKSB2YWx1ZT86IGFueTtcbiAgQElucHV0KCkgZm9ybUNvbnRyb2xSZWY/OiBGb3JtQ29udHJvbDtcbiAgQElucHV0KCkgbGFiZWxIdG1sPzogYW55O1xuICBAT3V0cHV0KCkgY2xpY2tlZExpbmsgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zb2xlLmxvZygnbGFiZWwnLCB0aGlzLmxhYmVsKTtcbiAgICBjb25zb2xlLmxvZygnbGFiZWxIdG1sJywgdGhpcy5sYWJlbEh0bWwpO1xuICB9XG5cbiAgaGFuZGxlTGlua0NsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXRbJ2hhc0F0dHJpYnV0ZSddICYmIChldmVudC50YXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQpLmhhc0F0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICB0aGlzLmNsaWNrZWRMaW5rLmVtaXQoKGV2ZW50LnRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudCkuZ2V0QXR0cmlidXRlKCdocmVmJykpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=