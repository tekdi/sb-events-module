/**
 * @fileoverview added by tsickle
 * Generated from: lib/textbox/textbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef } from '@angular/core';
import { FormControl } from '@angular/forms';
var TextboxComponent = /** @class */ (function () {
    function TextboxComponent() {
    }
    /**
     * @return {?}
     */
    TextboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TextboxComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TextboxComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.asyncValidation && this.asyncValidation.asyncValidatorFactory && this.formControlRef) {
            if (this.formControlRef.asyncValidator) {
                return;
            }
            this.formControlRef.setAsyncValidators(this.asyncValidation.asyncValidatorFactory(this.asyncValidation.marker, this.validationTrigger.nativeElement));
        }
    };
    TextboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-textbox',
                    template: "<div class=\"sb-input\">\n  <label *ngIf=\"label\">{{label}}</label>\n  <div *ngIf=\"labelHtml\" [innerHTML]=\"labelHtml | transposeHtml\"></div>\n\n  <div [ngClass]=\"{'async-text': (asyncValidation && asyncValidation?.trigger), '': (!asyncValidation || !asyncValidation?.trigger)}\">\n    <div class=\"prefix\" *ngIf=\"prefix\">\n      <span>{{prefix}}</span>\n    </div>\n    <input [formControl]=\"formControlRef\" class=\"sb-textbox\" placeholder={{placeholder}} type=\"text\">\n    <div class=\"async-icons\" *ngIf=\"asyncValidation && asyncValidation?.trigger\">\n      <sb-green-tick *ngIf=\"formControlRef.value && formControlRef.status === 'VALID'\"></sb-green-tick>\n      <sb-red-exclamation *ngIf=\"formControlRef.value && formControlRef.status !== 'VALID'\"></sb-red-exclamation>\n      <sb-empty-circle *ngIf=\"!formControlRef.value\"></sb-empty-circle>\n    </div>\n  </div>\n  \n  <ng-container *ngFor=\"let validation of validations\">\n    <div class=\"cf-error\"\n      *ngIf=\"(validation.type && (validation.type).toLowerCase && validation.message && formControlRef.errors && formControlRef.errors[(validation.type).toLowerCase()] && (formControlRef.dirty || formControlRef.touched))\">\n      {{ validation.message }}\n    </div>\n  </ng-container>\n  \n  <ng-container *ngIf=\"asyncValidation?.trigger\">\n    <div class=\"async-validator\"\n      [hidden]=\"formControlRef.status === 'VALID' || formControlRef.status !== 'PENDING' || !formControlRef.value\">\n      <div class=\"cf-error\" *ngIf=\"asyncValidation?.message\">\n        {{ asyncValidation.message }}\n      </div>\n      <div class=\"async-container\">\n        <button class=\"async-btn\" #validationTrigger [attr.data-marker]=\"asyncValidation.marker\">\n          {{asyncValidation.trigger}}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n\n</div>\n",
                    styles: ["label{display:block;font-size:1rem;margin:0}.sb-textbox{width:100%;padding:8px 16px;border:.5px solid #333;box-sizing:border-box}::-webkit-input-placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}::-moz-placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}:-ms-input-placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}::-ms-input-placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}::placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}.sb-input{margin:1rem 0}.cf-error{color:red;font-family:\"Noto Sans\";font-size:12px}.async-container{text-align:center}.async-btn{padding:12px 16px;background-color:#008840;color:#fff;border-radius:20px!important}.async-text{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;border:.5px solid #333}.async-text>input{border:none}.normal-text>.async-icons>sb-empty-circle,.normal-text>.async-icons>sb-green-tick,.normal-text>.async-icons>sb-red-exclamation{display:none}.prefix{white-space:nowrap;padding:0 4px}.async-icons{margin:auto;padding:0 4px}"]
                }] }
    ];
    /** @nocollapse */
    TextboxComponent.ctorParameters = function () { return []; };
    TextboxComponent.propDecorators = {
        asyncValidation: [{ type: Input }],
        label: [{ type: Input }],
        labelHtml: [{ type: Input }],
        placeholder: [{ type: Input }],
        validations: [{ type: Input }],
        formControlRef: [{ type: Input }],
        prefix: [{ type: Input }],
        validationTrigger: [{ type: ViewChild, args: ['validationTrigger', { static: false },] }]
    };
    return TextboxComponent;
}());
export { TextboxComponent };
if (false) {
    /** @type {?} */
    TextboxComponent.prototype.asyncValidation;
    /** @type {?} */
    TextboxComponent.prototype.label;
    /** @type {?} */
    TextboxComponent.prototype.labelHtml;
    /** @type {?} */
    TextboxComponent.prototype.placeholder;
    /** @type {?} */
    TextboxComponent.prototype.validations;
    /** @type {?} */
    TextboxComponent.prototype.formControlRef;
    /** @type {?} */
    TextboxComponent.prototype.prefix;
    /** @type {?} */
    TextboxComponent.prototype.validationTrigger;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jb21tb24tZm9ybS1lbGVtZW50cy8iLCJzb3VyY2VzIjpbImxpYi90ZXh0Ym94L3RleHRib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQW9DLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEcsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRzNDO0lBZUU7SUFDQSxDQUFDOzs7O0lBRUQsbUNBQVE7OztJQUFSO0lBQ0EsQ0FBQzs7OztJQUVELHNDQUFXOzs7SUFBWDtJQUVBLENBQUM7Ozs7SUFFRCwwQ0FBZTs7O0lBQWY7UUFDRSxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQzdGLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUU7Z0JBQ3RDLE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FDL0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQzNCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQ3JDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7Z0JBcENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsZzFEQUF1Qzs7aUJBRXhDOzs7OztrQ0FFRSxLQUFLO3dCQUNMLEtBQUs7NEJBQ0wsS0FBSzs4QkFDTCxLQUFLOzhCQUNMLEtBQUs7aUNBQ0wsS0FBSzt5QkFDTCxLQUFLO29DQUNMLFNBQVMsU0FBQyxtQkFBbUIsRUFBRSxFQUFFLE1BQU0sRUFBQyxLQUFLLEVBQUU7O0lBeUJsRCx1QkFBQztDQUFBLEFBdENELElBc0NDO1NBakNZLGdCQUFnQjs7O0lBQzNCLDJDQUFzRDs7SUFDdEQsaUNBQXVCOztJQUN2QixxQ0FBd0I7O0lBQ3hCLHVDQUE2Qjs7SUFDN0IsdUNBQTJCOztJQUMzQiwwQ0FBc0M7O0lBQ3RDLGtDQUF5Qjs7SUFDekIsNkNBQWdGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgVmlld0NoaWxkLCBFbGVtZW50UmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Rm9ybUNvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZpZWxkQ29uZmlnQXN5bmNWYWxpZGF0aW9uIH0gZnJvbSAnLi4vY29tbW9uLWZvcm0tY29uZmlnJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2ItdGV4dGJveCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90ZXh0Ym94LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGV4dGJveC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGV4dGJveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgYXN5bmNWYWxpZGF0aW9uPzogRmllbGRDb25maWdBc3luY1ZhbGlkYXRpb247XG4gIEBJbnB1dCgpIGxhYmVsOiBTdHJpbmc7XG4gIEBJbnB1dCgpIGxhYmVsSHRtbDogYW55O1xuICBASW5wdXQoKSBwbGFjZWhvbGRlcjogU3RyaW5nO1xuICBASW5wdXQoKSB2YWxpZGF0aW9ucz86IGFueTtcbiAgQElucHV0KCkgZm9ybUNvbnRyb2xSZWY/OiBGb3JtQ29udHJvbDtcbiAgQElucHV0KCkgcHJlZml4PzogU3RyaW5nO1xuICBAVmlld0NoaWxkKCd2YWxpZGF0aW9uVHJpZ2dlcicsIHsgc3RhdGljOmZhbHNlIH0pIHZhbGlkYXRpb25UcmlnZ2VyOiBFbGVtZW50UmVmO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5hc3luY1ZhbGlkYXRpb24gJiYgdGhpcy5hc3luY1ZhbGlkYXRpb24uYXN5bmNWYWxpZGF0b3JGYWN0b3J5ICYmIHRoaXMuZm9ybUNvbnRyb2xSZWYpIHtcbiAgICAgIGlmICh0aGlzLmZvcm1Db250cm9sUmVmLmFzeW5jVmFsaWRhdG9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mb3JtQ29udHJvbFJlZi5zZXRBc3luY1ZhbGlkYXRvcnModGhpcy5hc3luY1ZhbGlkYXRpb24uYXN5bmNWYWxpZGF0b3JGYWN0b3J5KFxuICAgICAgICB0aGlzLmFzeW5jVmFsaWRhdGlvbi5tYXJrZXIsXG4gICAgICAgIHRoaXMudmFsaWRhdGlvblRyaWdnZXIubmF0aXZlRWxlbWVudFxuICAgICAgKSk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==