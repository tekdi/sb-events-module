/**
 * @fileoverview added by tsickle
 * Generated from: lib/keywords/keywords.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { FormControl } from '@angular/forms';
import * as _ from 'lodash-es';
var KeywordsComponent = /** @class */ (function () {
    function KeywordsComponent() {
        this.inputText = '';
    }
    /**
     * @return {?}
     */
    KeywordsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!_.isEmpty(this.default)) {
            this.items = this.default;
        }
    };
    KeywordsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-keywords',
                    template: "<div class=\"sb-keywords\">\n    <label *ngIf=\"label\">{{label}}</label>\n    <tag-input class=\"sb-keywordbox\" [formControl]=\"formControlRef\" [modelAsStrings]=\"true\" [(ngModel)]='items' [placeholder]=\"field.placeholder || 'Enter Keyword'\"\n    [disable]=\"disabled\"></tag-input>\n    <ng-container *ngFor=\"let validation of validations\">\n        <div class=\"cf-error\"\n          *ngIf=\"(validation.type && (validation.type).toLowerCase() && validation.message && formControlRef.errors && formControlRef.errors[(validation.type).toLowerCase()] && (formControlRef.dirty || formControlRef.touched))\">\n          {{ validation.message }}\n        </div>\n      </ng-container>\n</div>\n",
                    styles: [".sb-keywords{margin:1rem 0}label{display:block;font-size:1rem;margin:0}.sb-keywordbox{width:100%;padding:8px 16px;border-bottom:.5px solid #333;box-sizing:border-box}.cf-error{color:red;font-family:\"Noto Sans\";font-size:12px}"]
                }] }
    ];
    /** @nocollapse */
    KeywordsComponent.ctorParameters = function () { return []; };
    KeywordsComponent.propDecorators = {
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        formControlRef: [{ type: Input }],
        field: [{ type: Input }],
        validations: [{ type: Input }],
        disabled: [{ type: Input }],
        default: [{ type: Input }]
    };
    return KeywordsComponent;
}());
export { KeywordsComponent };
if (false) {
    /** @type {?} */
    KeywordsComponent.prototype.label;
    /** @type {?} */
    KeywordsComponent.prototype.placeholder;
    /** @type {?} */
    KeywordsComponent.prototype.formControlRef;
    /** @type {?} */
    KeywordsComponent.prototype.field;
    /** @type {?} */
    KeywordsComponent.prototype.validations;
    /** @type {?} */
    KeywordsComponent.prototype.disabled;
    /** @type {?} */
    KeywordsComponent.prototype.default;
    /** @type {?} */
    KeywordsComponent.prototype.items;
    /** @type {?} */
    KeywordsComponent.prototype.inputText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5d29yZHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY29tbW9uLWZvcm0tZWxlbWVudHMvIiwic291cmNlcyI6WyJsaWIva2V5d29yZHMva2V5d29yZHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sS0FBSyxDQUFDLE1BQU0sV0FBVyxDQUFDO0FBRS9CO0lBaUJFO1FBREEsY0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNDLENBQUM7Ozs7SUFFakIsb0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUMzQjtJQUNILENBQUM7O2dCQXZCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLHVzQkFBd0M7O2lCQUV6Qzs7Ozs7d0JBRUUsS0FBSzs4QkFDTCxLQUFLO2lDQUNMLEtBQUs7d0JBQ0wsS0FBSzs4QkFDTCxLQUFLOzJCQUNMLEtBQUs7MEJBQ0wsS0FBSzs7SUFhUix3QkFBQztDQUFBLEFBekJELElBeUJDO1NBcEJZLGlCQUFpQjs7O0lBQzVCLGtDQUF1Qjs7SUFDdkIsd0NBQTZCOztJQUM3QiwyQ0FBcUM7O0lBQ3JDLGtDQUFvQzs7SUFDcEMsd0NBQTJCOztJQUMzQixxQ0FBMkI7O0lBQzNCLG9DQUF5Qjs7SUFHekIsa0NBQWtCOztJQUNsQixzQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4uL2NvbW1vbi1mb3JtLWNvbmZpZyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaC1lcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NiLWtleXdvcmRzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2tleXdvcmRzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4va2V5d29yZHMuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIEtleXdvcmRzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgbGFiZWw6IFN0cmluZztcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IFN0cmluZztcbiAgQElucHV0KCkgZm9ybUNvbnRyb2xSZWY6IEZvcm1Db250cm9sO1xuICBASW5wdXQoKSBmaWVsZDogRmllbGRDb25maWc8U3RyaW5nPjtcbiAgQElucHV0KCkgdmFsaWRhdGlvbnM/OiBhbnk7XG4gIEBJbnB1dCgpIGRpc2FibGVkOiBCb29sZWFuO1xuICBASW5wdXQoKSBkZWZhdWx0OiBTdHJpbmc7XG5cblxuICBwdWJsaWMgaXRlbXM6IGFueTtcbiAgaW5wdXRUZXh0ID0gJyc7XG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCFfLmlzRW1wdHkodGhpcy5kZWZhdWx0KSkge1xuICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuZGVmYXVsdDtcbiAgICB9XG4gIH1cblxufVxuIl19