/**
 * @fileoverview added by tsickle
 * Generated from: lib/topicpicker/topicpicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Subject, merge } from 'rxjs';
import * as _ from 'lodash-es';
import { FormControl, FormGroup } from '@angular/forms';
import { tap, takeUntil } from 'rxjs/operators';
/**
 * @record
 */
function TopicTreeNode() { }
if (false) {
    /** @type {?} */
    TopicTreeNode.prototype.id;
    /** @type {?} */
    TopicTreeNode.prototype.name;
    /** @type {?} */
    TopicTreeNode.prototype.selectable;
    /** @type {?} */
    TopicTreeNode.prototype.nodes;
}
/**
 * @record
 */
function JQuery() { }
if (false) {
    /**
     * @param {?=} options
     * @return {?}
     */
    JQuery.prototype.treePicker = function (options) { };
}
var TopicpickerComponent = /** @class */ (function () {
    function TopicpickerComponent() {
        this.topicChange = new EventEmitter();
        this.dependencyTerms = [];
        this.dispose$ = new Subject();
    }
    /**
     * @return {?}
     */
    TopicpickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formControlRef.valueChanges.pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            console.log(val);
        })), takeUntil(this.dispose$)).subscribe();
        /** @type {?} */
        var selectedTopics = _.reduce(this.default, (/**
         * @param {?} collector
         * @param {?} element
         * @return {?}
         */
        function (collector, element) {
            if (typeof element === 'string') {
                collector.unformatted.push(element);
            }
            else if (_.get(element, 'identifier')) {
                collector.formatted.push(element);
            }
            return collector;
        }), { formatted: [], unformatted: [] });
        this.formatSelectedTopics(this.field.terms, selectedTopics.unformatted, selectedTopics.formatted);
        this.default = selectedTopics.unformatted;
        this.selectedNodes = tslib_1.__assign({}, selectedTopics.formatted);
        this.topicChange.emit(this.selectedTopics);
        if (!_.isEmpty(this.default)) {
            this.placeHolder = this.default && this.default.length + ' topics selected';
            this.formControlRef.setValue(this.default);
        }
        if (!_.isEmpty(this.depends)) {
            merge.apply(void 0, tslib_1.__spread(_.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            function (depend) { return depend.valueChanges; })))).pipe(tap((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this.latestParentValue = value;
                _this.isDependsInvalid = _.includes(_.map(_this.depends, (/**
                 * @param {?} depend
                 * @return {?}
                 */
                function (depend) { return depend.invalid; })), true);
                _this.formControlRef.patchValue(null);
                _this.placeHolder = '';
                _this.default = [];
                _this.selectedNodes = {};
                _this.initTopicPicker(_this.formatTopics(_this.fetchAssociations()));
            })), takeUntil(this.dispose$)).subscribe();
            this.isDependsInvalid = _.includes(_.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            function (depend) { return depend.invalid; })), true);
        }
    };
    // tslint:disable-next-line:use-life-cycle-interface
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    TopicpickerComponent.prototype.ngAfterViewInit = 
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    function () {
        this.initTopicPicker(this.formatTopics(this.field.terms));
    };
    /**
     * @return {?}
     */
    TopicpickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.dispose$.next(null);
        this.dispose$.complete();
    };
    /**
     * @private
     * @param {?} topics
     * @param {?=} subTopic
     * @return {?}
     */
    TopicpickerComponent.prototype.formatTopics = /**
     * @private
     * @param {?} topics
     * @param {?=} subTopic
     * @return {?}
     */
    function (topics, subTopic) {
        var _this = this;
        if (subTopic === void 0) { subTopic = false; }
        return _.map(topics, (/**
         * @param {?} topic
         * @return {?}
         */
        function (topic) { return ({
            id: topic.identifier,
            name: topic.name,
            selectable: subTopic ? 'selectable' : 'notselectable',
            nodes: _this.formatTopics(topic.children, true)
        }); }));
    };
    /**
     * @private
     * @param {?} topics
     * @param {?} unformatted
     * @param {?} formatted
     * @return {?}
     */
    TopicpickerComponent.prototype.formatSelectedTopics = /**
     * @private
     * @param {?} topics
     * @param {?} unformatted
     * @param {?} formatted
     * @return {?}
     */
    function (topics, unformatted, formatted) {
        var _this = this;
        _.forEach(topics, (/**
         * @param {?} topic
         * @return {?}
         */
        function (topic) {
            if (unformatted.includes(_this.field.output ? topic[_this.field.output] : topic.name) && !topic.children) {
                formatted.push({
                    identifier: topic.identifier,
                    name: topic.name
                });
            }
            if (topic.children) {
                _this.formatSelectedTopics(topic.children, unformatted, formatted);
            }
        }));
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    TopicpickerComponent.prototype.initTopicPicker = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        $(".topic-picker-selector_" + this.field.code).treePicker({
            data: data,
            name: 'Topics',
            noDataMessage: 'noDataMessage',
            submitButtonText: 'Done',
            cancelButtonText: 'Cancel',
            removeAllText: 'Remove All',
            chooseAllText: 'Choose All',
            searchText: 'Search',
            selectedText: 'selected',
            picked: (!_.isEmpty(this.selectedNodes)) ? _.map(this.selectedNodes, 'identifier') : (!_.isEmpty(this.default) ? this.default : []),
            onSubmit: (/**
             * @param {?} selectedNodes
             * @return {?}
             */
            function (selectedNodes) {
                _this.selectedNodes = selectedNodes;
                _this.selectedTopics = _.map(selectedNodes, (/**
                 * @param {?} node
                 * @return {?}
                 */
                function (node) { return ({
                    identifier: node.id,
                    name: node.name
                }); }));
                _this.placeHolder = _this.selectedTopics.length + ' topics selected';
                _this.topicChange.emit(_this.selectedTopics);
                /** @type {?} */
                var topics = [];
                _.forEach(_this.selectedTopics, (/**
                 * @param {?} value
                 * @param {?} index
                 * @return {?}
                 */
                function (value, index) {
                    if (_this.field.output) {
                        topics.push(value[_this.field.output]);
                    }
                    else {
                        topics.push(value.name);
                    }
                }));
                _this.formControlRef.setValue(topics);
            }),
            nodeName: "topicSelector_" + this.field.code,
            displayFormat: (/**
             * @param {?} picked
             * @return {?}
             */
            function (picked) { return this.placeHolder; }),
            minSearchQueryLength: 1,
            disabled: (/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                return _this.disabled ? true : (_this.depends ? (_this.isDependsInvalid ? true : false) : false);
            })
        });
        setTimeout((/**
         * @return {?}
         */
        function () { return document.getElementById("topicSelector_" + _this.field.code).classList.add(_this.topicPickerClass); }), 0);
    };
    /**
     * @return {?}
     */
    TopicpickerComponent.prototype.fetchAssociations = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // && this.context.value && this.field.association
        if (!_.isEmpty(this.depends)) {
            /** @type {?} */
            var filteredTerm = _.find(this.dependencyTerms, (/**
             * @param {?} terms
             * @return {?}
             */
            function (terms) {
                return !_.isEmpty(_this.field.output) ? _.includes(_this.getParentValue(), terms[_this.field.output]) :
                    _.includes(_this.getParentValue(), terms.name);
            }));
            if (filteredTerm) {
                this.tempAssociation = _.filter(filteredTerm.associations, (/**
                 * @param {?} association
                 * @return {?}
                 */
                function (association) {
                    return (_this.field.sourceCategory) ? (association.category === _this.field.sourceCategory) :
                        association.category === _this.field.code;
                }));
                return this.tempAssociation;
            }
            else {
                return this.field.terms;
            }
        }
        else {
            return this.field.terms;
        }
    };
    /**
     * @return {?}
     */
    TopicpickerComponent.prototype.getParentValue = /**
     * @return {?}
     */
    function () {
        return this.latestParentValue || _.compact(_.map(this.depends, 'value'));
    };
    TopicpickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sb-topicpicker',
                    template: "<div class=\"treepicker-parent\">\n  <label *ngIf=\"label\">{{label}}</label>\n  <div [attr.disabled]=\"disabled ? true : ( depends ? (isDependsInvalid ? true : null) : null )\" id=\"treePicker\" class=\"topic-picker-selector_{{field.code}} cursor-pointer list-border\">\n  {{placeHolder}}\n  </div>\n\n  <input [attr.disabled]=\"disabled ? true : ( depends ? (isDependsInvalid ? true : null) : null )\" [formControl]=\"formControlRef\" [placeholder]=\"placeHolder\" readonly hidden/>\n  <ng-container *ngFor=\"let validation of validations\">\n    <div class=\"cf-error\"\n      *ngIf=\"(validation.type && (validation.type).toLowerCase() && validation.message && formControlRef.errors && formControlRef.errors[(validation.type).toLowerCase()] && (formControlRef.dirty || formControlRef.touched))\">\n      {{ validation.message }}\n    </div>\n  </ng-container>\n</div>\n",
                    styles: [".treepicker-parent{margin:1rem 0}label{display:block;font-size:1rem;margin:0}.topic-picker-selector{width:100%;padding:8px 16px;border:.5px solid #333;box-sizing:border-box}.cf-error{color:red;font-family:\"Noto Sans\";font-size:12px}.treepicker-parent .list-border{border:.5px solid var(--gray-400);padding:1.3rem;cursor:pointer;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;left:0;height:40px}"]
                }] }
    ];
    /** @nocollapse */
    TopicpickerComponent.ctorParameters = function () { return []; };
    TopicpickerComponent.propDecorators = {
        selectedTopics: [{ type: Input }],
        topicPickerClass: [{ type: Input }],
        label: [{ type: Input }],
        disabled: [{ type: Input }],
        placeholder: [{ type: Input }],
        formControlRef: [{ type: Input }],
        field: [{ type: Input }],
        topicChange: [{ type: Output }],
        validations: [{ type: Input }],
        formGroup: [{ type: Input }],
        default: [{ type: Input }],
        depends: [{ type: Input }],
        dependencyTerms: [{ type: Input }]
    };
    return TopicpickerComponent;
}());
export { TopicpickerComponent };
if (false) {
    /** @type {?} */
    TopicpickerComponent.prototype.selectedTopics;
    /** @type {?} */
    TopicpickerComponent.prototype.topicPickerClass;
    /** @type {?} */
    TopicpickerComponent.prototype.label;
    /** @type {?} */
    TopicpickerComponent.prototype.disabled;
    /** @type {?} */
    TopicpickerComponent.prototype.placeholder;
    /** @type {?} */
    TopicpickerComponent.prototype.formControlRef;
    /** @type {?} */
    TopicpickerComponent.prototype.field;
    /** @type {?} */
    TopicpickerComponent.prototype.topicChange;
    /** @type {?} */
    TopicpickerComponent.prototype.validations;
    /** @type {?} */
    TopicpickerComponent.prototype.formGroup;
    /** @type {?} */
    TopicpickerComponent.prototype.default;
    /** @type {?} */
    TopicpickerComponent.prototype.depends;
    /** @type {?} */
    TopicpickerComponent.prototype.dependencyTerms;
    /** @type {?} */
    TopicpickerComponent.prototype.selectedNodes;
    /** @type {?} */
    TopicpickerComponent.prototype.placeHolder;
    /** @type {?} */
    TopicpickerComponent.prototype.isDependsInvalid;
    /**
     * @type {?}
     * @private
     */
    TopicpickerComponent.prototype.dispose$;
    /** @type {?} */
    TopicpickerComponent.prototype.latestParentValue;
    /** @type {?} */
    TopicpickerComponent.prototype.tempAssociation;
}
//# sourceMappingURL=data:application/json;base64,