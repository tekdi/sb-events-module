/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-multi-select/dynamic-multi-select.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { Subject, merge } from 'rxjs';
import { tap } from 'rxjs/operators';
import * as _ from 'lodash-es';
import { ValueComparator } from '../utilities/value-comparator';
export class DynamicMultiSelectComponent {
    constructor() {
        this.ValueComparator = ValueComparator;
        this.onChangeFilter = new EventEmitter();
        this.dependencyTerms = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.options) {
            this.options = [];
        }
        if (this.isOptionsClosure(this.options)) {
            this.options$ = (/** @type {?} */ (((/** @type {?} */ (this.options)))(this.formControlRef, this.depends, this.formGroup, (/**
             * @return {?}
             */
            () => this.dataLoadStatusDelegate.next('LOADING')), (/**
             * @return {?}
             */
            () => this.dataLoadStatusDelegate.next('LOADED')))));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // if (this.context) {
        // this.contextValueChangesSubscription = this.context.valueChanges.pipe(
        //   tap(() => {
        //     this.formControlRef.patchValue(null);
        //   })
        // ).subscribe();
        // }
        this.dataLoadStatusDelegate.subscribe(console.log);
        if (this.field && this.field.range) {
            this.options = this.field.range;
        }
        if (!_.isEmpty(this.depends) && !this.isOptionsClosure(this.options)) {
            this.contextValueChangesSubscription = merge(..._.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            depend => depend.valueChanges))).pipe(tap((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                this.latestParentValue = value;
            }))).subscribe();
        }
        if (!_.isEmpty(this.field.depends)) {
            merge(..._.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            depend => depend.valueChanges))).pipe(tap((/**
             * @return {?}
             */
            () => {
                // _.forEach(this.field.depends, depend => {
                //   if (!_.isEmpty(this.formGroup.get(depend))) {
                //     this.formGroup.get(depend).patchValue(null);
                //   }
                // });
                this.formControlRef.patchValue(null);
            }))).subscribe();
        }
        if (this.isOptionsClosure(this.options)) {
            // tslint:disable-next-line:max-line-length
            this.options$ = (/** @type {?} */ (((/** @type {?} */ (this.options)))(this.formControlRef, this.depends, this.formGroup, (/**
             * @return {?}
             */
            () => this.dataLoadStatusDelegate.next('LOADING')), (/**
             * @return {?}
             */
            () => this.dataLoadStatusDelegate.next('LOADED')))));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.contextValueChangesSubscription) {
            this.contextValueChangesSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    isOptionsArray(options) {
        return Array.isArray(options);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    isOptionsClosure(options) {
        return typeof options === 'function';
    }
    /**
     * @param {?} input
     * @return {?}
     */
    isOptionsMap(input) {
        return !Array.isArray(input) && typeof input === 'object';
    }
    /**
     * @param {?} input
     * @return {?}
     */
    isOptionsArrayMap(input) {
        return Array.isArray(input) && typeof input[0] === 'object';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onChangeFacet($event) {
        /** @type {?} */
        const selectedObject = this.options.data[$event.currentTarget.options.selectedIndex - 1];
        /** @type {?} */
        const emitPayload = JSON.parse(JSON.stringify(this.options));
        emitPayload['data'] = selectedObject;
        emitPayload['selectedLabel'] = selectedObject.label;
        emitPayload['selectedValue'] = selectedObject.value;
        this.onChangeFilter.emit(emitPayload);
    }
    /**
     * @return {?}
     */
    fetchAssociations() {
        // && this.context.value && this.field.association
        if (!_.isEmpty(this.depends)) {
            /** @type {?} */
            const filteredTerm = _.find(this.dependencyTerms, (/**
             * @param {?} terms
             * @return {?}
             */
            terms => {
                return _.includes(this.getParentValue(), terms.identifier);
            }));
            if (filteredTerm) {
                this.tempAssociation = _.filter(filteredTerm.associations, (/**
                 * @param {?} association
                 * @return {?}
                 */
                association => {
                    return association.category === this.field.code;
                }));
                return this.tempAssociation;
            }
            else {
                return this.options;
            }
        }
        else {
            return this.options;
        }
    }
    /**
     * @return {?}
     */
    getParentValue() {
        return this.latestParentValue || _.compact(_.map(this.depends, 'value'));
    }
}
DynamicMultiSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-dynamic-multi-select',
                template: "<div class=\"sb-dropdown\" *ngIf=\"!type\">\n  <label>{{label}} {{context && 'has context'}}  {{context ?  field.context : '' }}</label>\n  <ng-container *ngIf=\"options\">\n    <div class=\"dropdown-container\">\n      <sb-icon-dropdown class=\"dropdown-icon\"></sb-icon-dropdown>\n      <!-- [attr.disabled]=\"disabled ? true : ( context ? (context.invalid ? true : null) : null )\" -->\n      <select [formControl]=\"formControlRef\"\n              [compareWith]=\"ValueComparator.valueComparator\" class=\"sb-dropdown-select\" id=\"sb-dropdown\"\n              name=\"sb-dropdown\" multiple>\n        <option [defaultSelected]=\"!default\" [ngValue]=\"null\" disabled>{{placeHolder}}\n        </option>\n        <ng-container *ngIf=\"field.range && isOptionsArrayMap(field.range) && !field.association\">\n          <option class=\"optionsArrayMap\" *ngFor=\"let option of field.range\" [ngValue]=\"option.value\">{{option.label}}</option>\n        </ng-container>\n        <ng-container *ngIf=\"field.range && isOptionsArray(field.range) && !isOptionsArrayMap(field.range) && !field.association\">\n          <option class=\"optionsArray\" *ngFor=\"let option of field.range\" [ngValue]=\"option || option\">{{option.name || option}}</option>\n        </ng-container>\n\n        <ng-container *ngIf=\"field.range && isOptionsClosure(field.range)\">\n          <option class=\"closure\" *ngFor=\"let option of options$ | async\" [ngValue]=\"option.value\">{{option.label}}</option>\n        </ng-container>\n\n        <!-- <ng-container *ngIf=\"isOptionsMap(options) && context && context.value && !field.association\">\n          <option *ngFor=\"let option of options[context.value]\" [ngValue]=\"option.value\">{{option.label}}</option>\n        </ng-container> -->\n\n        <ng-container *ngIf=\"!field.range && field.terms\">\n          <option class=\"optionsLast\" *ngFor=\"let option of fetchAssociations()\" [ngValue]=\"option.identifier\">{{option.name}}</option>\n        </ng-container>\n      </select>\n    </div>\n  </ng-container>\n</div>\n\n<!-- Dropdown for filters component -->\n<div class=\"sb-dropdown\" *ngIf=\"type === 'facet'\">\n  <label>{{label}}</label>\n  <ng-container *ngIf=\"options && options.data\">\n    <div class=\"dropdown-container\">\n      <sb-icon-dropdown class=\"dropdown-icon\"></sb-icon-dropdown>\n      <select [attr.disabled]=\"disabled ? true : ( context ? (context.invalid ? true : null) : null )\"\n        class=\"sb-dropdown-select\" [ngClass]=\"(styleClass ? styleClass : 'default-dropdown')\" id=\"sb-dropdown\" name=\"sb-dropdown\"\n        (change)=\"onChangeFacet($event)\" placeholder=\"placeHolder\">\n        <option *ngIf=\"!default\" [disabled]=\"true\" selected>{{placeHolder}}</option>\n        <option *ngFor=\"let option of options.data\" [ngValue]=\"option\" [selected]=\"options.default === option.value\">{{option.label}}</option>\n      </select>\n    </div>\n  </ng-container>\n</div>\n<ng-container *ngFor=\"let validation of validations\">\n  <div class=\"cf-error\"\n    *ngIf=\"(validation.type && (validation.type).toLowerCase() && validation.message && formControlRef.errors && formControlRef.errors[(validation.type).toLowerCase()] && (formControlRef.dirty || formControlRef.touched))\">\n    {{ validation.message }}\n  </div>\n</ng-container>\n\n<!-- Dropdown for filters component -->\n",
                styles: ["label{display:block;padding:10px;font-size:1rem}.dropdown-icon{position:absolute;top:.5rem;right:18px;z-index:1}.dropdown-container{position:relative}select[disabled]{opacity:.3}select{-webkit-appearance:none;-moz-appearance:none;text-indent:1px;text-overflow:''}.sb-dropdown-select{opacity:.99;color:#333;font-family:\"Noto Sans\";font-size:12px;font-weight:700;letter-spacing:0;line-height:17px}.sb-dropdown{margin-bottom:8px}.placeholder select option:first-child{color:#999}.option-default{color:#333;font-weight:700;font-size:12px}.sb-dropdown select{background-color:#fff;padding:10px 20px;font-size:14px;width:100%;border:.5px solid #333}.cf-error{color:red;font-family:\"Noto Sans\";font-size:12px}"]
            }] }
];
/** @nocollapse */
DynamicMultiSelectComponent.ctorParameters = () => [];
DynamicMultiSelectComponent.propDecorators = {
    field: [{ type: Input }],
    disabled: [{ type: Input }],
    options: [{ type: Input }],
    label: [{ type: Input }],
    placeHolder: [{ type: Input }],
    isMultiple: [{ type: Input }],
    context: [{ type: Input }],
    contextTerms: [{ type: Input }],
    formControlRef: [{ type: Input }],
    formGroup: [{ type: Input }],
    default: [{ type: Input }],
    contextData: [{ type: Input }],
    dataLoadStatusDelegate: [{ type: Input }],
    type: [{ type: Input }],
    styleClass: [{ type: Input }],
    onChangeFilter: [{ type: Output }],
    validations: [{ type: Input }],
    depends: [{ type: Input }],
    dependencyTerms: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.ValueComparator;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.field;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.disabled;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.options;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.label;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.placeHolder;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.isMultiple;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.context;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.contextTerms;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.formControlRef;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.formGroup;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.default;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.contextData;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.dataLoadStatusDelegate;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.type;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.styleClass;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.onChangeFilter;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.validations;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.depends;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.dependencyTerms;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.options$;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.contextValueChangesSubscription;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.selectedType;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.tempAssociation;
    /** @type {?} */
    DynamicMultiSelectComponent.prototype.latestParentValue;
}
//# sourceMappingURL=data:application/json;base64,