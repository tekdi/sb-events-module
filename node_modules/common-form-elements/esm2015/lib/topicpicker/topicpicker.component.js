/**
 * @fileoverview added by tsickle
 * Generated from: lib/topicpicker/topicpicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Subject, merge } from 'rxjs';
import * as _ from 'lodash-es';
import { FormControl, FormGroup } from '@angular/forms';
import { tap, takeUntil } from 'rxjs/operators';
/**
 * @record
 */
function TopicTreeNode() { }
if (false) {
    /** @type {?} */
    TopicTreeNode.prototype.id;
    /** @type {?} */
    TopicTreeNode.prototype.name;
    /** @type {?} */
    TopicTreeNode.prototype.selectable;
    /** @type {?} */
    TopicTreeNode.prototype.nodes;
}
/**
 * @record
 */
function JQuery() { }
if (false) {
    /**
     * @param {?=} options
     * @return {?}
     */
    JQuery.prototype.treePicker = function (options) { };
}
export class TopicpickerComponent {
    constructor() {
        this.topicChange = new EventEmitter();
        this.dependencyTerms = [];
        this.dispose$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formControlRef.valueChanges.pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            console.log(val);
        })), takeUntil(this.dispose$)).subscribe();
        /** @type {?} */
        const selectedTopics = _.reduce(this.default, (/**
         * @param {?} collector
         * @param {?} element
         * @return {?}
         */
        (collector, element) => {
            if (typeof element === 'string') {
                collector.unformatted.push(element);
            }
            else if (_.get(element, 'identifier')) {
                collector.formatted.push(element);
            }
            return collector;
        }), { formatted: [], unformatted: [] });
        this.formatSelectedTopics(this.field.terms, selectedTopics.unformatted, selectedTopics.formatted);
        this.default = selectedTopics.unformatted;
        this.selectedNodes = Object.assign({}, selectedTopics.formatted);
        this.topicChange.emit(this.selectedTopics);
        if (!_.isEmpty(this.default)) {
            this.placeHolder = this.default && this.default.length + ' topics selected';
            this.formControlRef.setValue(this.default);
        }
        if (!_.isEmpty(this.depends)) {
            merge(..._.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            depend => depend.valueChanges))).pipe(tap((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                this.latestParentValue = value;
                this.isDependsInvalid = _.includes(_.map(this.depends, (/**
                 * @param {?} depend
                 * @return {?}
                 */
                depend => depend.invalid)), true);
                this.formControlRef.patchValue(null);
                this.placeHolder = '';
                this.default = [];
                this.selectedNodes = {};
                this.initTopicPicker(this.formatTopics(this.fetchAssociations()));
            })), takeUntil(this.dispose$)).subscribe();
            this.isDependsInvalid = _.includes(_.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            depend => depend.invalid)), true);
        }
    }
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initTopicPicker(this.formatTopics(this.field.terms));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dispose$.next(null);
        this.dispose$.complete();
    }
    /**
     * @private
     * @param {?} topics
     * @param {?=} subTopic
     * @return {?}
     */
    formatTopics(topics, subTopic = false) {
        return _.map(topics, (/**
         * @param {?} topic
         * @return {?}
         */
        (topic) => ({
            id: topic.identifier,
            name: topic.name,
            selectable: subTopic ? 'selectable' : 'notselectable',
            nodes: this.formatTopics(topic.children, true)
        })));
    }
    /**
     * @private
     * @param {?} topics
     * @param {?} unformatted
     * @param {?} formatted
     * @return {?}
     */
    formatSelectedTopics(topics, unformatted, formatted) {
        _.forEach(topics, (/**
         * @param {?} topic
         * @return {?}
         */
        (topic) => {
            if (unformatted.includes(this.field.output ? topic[this.field.output] : topic.name) && !topic.children) {
                formatted.push({
                    identifier: topic.identifier,
                    name: topic.name
                });
            }
            if (topic.children) {
                this.formatSelectedTopics(topic.children, unformatted, formatted);
            }
        }));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    initTopicPicker(data) {
        $(`.topic-picker-selector_${this.field.code}`).treePicker({
            data: data,
            name: 'Topics',
            noDataMessage: 'noDataMessage',
            submitButtonText: 'Done',
            cancelButtonText: 'Cancel',
            removeAllText: 'Remove All',
            chooseAllText: 'Choose All',
            searchText: 'Search',
            selectedText: 'selected',
            picked: (!_.isEmpty(this.selectedNodes)) ? _.map(this.selectedNodes, 'identifier') : (!_.isEmpty(this.default) ? this.default : []),
            onSubmit: (/**
             * @param {?} selectedNodes
             * @return {?}
             */
            (selectedNodes) => {
                this.selectedNodes = selectedNodes;
                this.selectedTopics = _.map(selectedNodes, (/**
                 * @param {?} node
                 * @return {?}
                 */
                node => ({
                    identifier: node.id,
                    name: node.name
                })));
                this.placeHolder = this.selectedTopics.length + ' topics selected';
                this.topicChange.emit(this.selectedTopics);
                /** @type {?} */
                const topics = [];
                _.forEach(this.selectedTopics, (/**
                 * @param {?} value
                 * @param {?} index
                 * @return {?}
                 */
                (value, index) => {
                    if (this.field.output) {
                        topics.push(value[this.field.output]);
                    }
                    else {
                        topics.push(value.name);
                    }
                }));
                this.formControlRef.setValue(topics);
            }),
            nodeName: `topicSelector_${this.field.code}`,
            displayFormat: (/**
             * @param {?} picked
             * @return {?}
             */
            function (picked) { return this.placeHolder; }),
            minSearchQueryLength: 1,
            disabled: (/**
             * @param {?} node
             * @return {?}
             */
            (node) => {
                return this.disabled ? true : (this.depends ? (this.isDependsInvalid ? true : false) : false);
            })
        });
        setTimeout((/**
         * @return {?}
         */
        () => document.getElementById(`topicSelector_${this.field.code}`).classList.add(this.topicPickerClass)), 0);
    }
    /**
     * @return {?}
     */
    fetchAssociations() {
        // && this.context.value && this.field.association
        if (!_.isEmpty(this.depends)) {
            /** @type {?} */
            const filteredTerm = _.find(this.dependencyTerms, (/**
             * @param {?} terms
             * @return {?}
             */
            terms => {
                return !_.isEmpty(this.field.output) ? _.includes(this.getParentValue(), terms[this.field.output]) :
                    _.includes(this.getParentValue(), terms.name);
            }));
            if (filteredTerm) {
                this.tempAssociation = _.filter(filteredTerm.associations, (/**
                 * @param {?} association
                 * @return {?}
                 */
                association => {
                    return (this.field.sourceCategory) ? (association.category === this.field.sourceCategory) :
                        association.category === this.field.code;
                }));
                return this.tempAssociation;
            }
            else {
                return this.field.terms;
            }
        }
        else {
            return this.field.terms;
        }
    }
    /**
     * @return {?}
     */
    getParentValue() {
        return this.latestParentValue || _.compact(_.map(this.depends, 'value'));
    }
}
TopicpickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-topicpicker',
                template: "<div class=\"treepicker-parent\">\n  <label *ngIf=\"label\">{{label}}</label>\n  <div [attr.disabled]=\"disabled ? true : ( depends ? (isDependsInvalid ? true : null) : null )\" id=\"treePicker\" class=\"topic-picker-selector_{{field.code}} cursor-pointer list-border\">\n  {{placeHolder}}\n  </div>\n\n  <input [attr.disabled]=\"disabled ? true : ( depends ? (isDependsInvalid ? true : null) : null )\" [formControl]=\"formControlRef\" [placeholder]=\"placeHolder\" readonly hidden/>\n  <ng-container *ngFor=\"let validation of validations\">\n    <div class=\"cf-error\"\n      *ngIf=\"(validation.type && (validation.type).toLowerCase() && validation.message && formControlRef.errors && formControlRef.errors[(validation.type).toLowerCase()] && (formControlRef.dirty || formControlRef.touched))\">\n      {{ validation.message }}\n    </div>\n  </ng-container>\n</div>\n",
                styles: [".treepicker-parent{margin:1rem 0}label{display:block;font-size:1rem;margin:0}.topic-picker-selector{width:100%;padding:8px 16px;border:.5px solid #333;box-sizing:border-box}.cf-error{color:red;font-family:\"Noto Sans\";font-size:12px}.treepicker-parent .list-border{border:.5px solid var(--gray-400);padding:1.3rem;cursor:pointer;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;left:0;height:40px}"]
            }] }
];
/** @nocollapse */
TopicpickerComponent.ctorParameters = () => [];
TopicpickerComponent.propDecorators = {
    selectedTopics: [{ type: Input }],
    topicPickerClass: [{ type: Input }],
    label: [{ type: Input }],
    disabled: [{ type: Input }],
    placeholder: [{ type: Input }],
    formControlRef: [{ type: Input }],
    field: [{ type: Input }],
    topicChange: [{ type: Output }],
    validations: [{ type: Input }],
    formGroup: [{ type: Input }],
    default: [{ type: Input }],
    depends: [{ type: Input }],
    dependencyTerms: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TopicpickerComponent.prototype.selectedTopics;
    /** @type {?} */
    TopicpickerComponent.prototype.topicPickerClass;
    /** @type {?} */
    TopicpickerComponent.prototype.label;
    /** @type {?} */
    TopicpickerComponent.prototype.disabled;
    /** @type {?} */
    TopicpickerComponent.prototype.placeholder;
    /** @type {?} */
    TopicpickerComponent.prototype.formControlRef;
    /** @type {?} */
    TopicpickerComponent.prototype.field;
    /** @type {?} */
    TopicpickerComponent.prototype.topicChange;
    /** @type {?} */
    TopicpickerComponent.prototype.validations;
    /** @type {?} */
    TopicpickerComponent.prototype.formGroup;
    /** @type {?} */
    TopicpickerComponent.prototype.default;
    /** @type {?} */
    TopicpickerComponent.prototype.depends;
    /** @type {?} */
    TopicpickerComponent.prototype.dependencyTerms;
    /** @type {?} */
    TopicpickerComponent.prototype.selectedNodes;
    /** @type {?} */
    TopicpickerComponent.prototype.placeHolder;
    /** @type {?} */
    TopicpickerComponent.prototype.isDependsInvalid;
    /**
     * @type {?}
     * @private
     */
    TopicpickerComponent.prototype.dispose$;
    /** @type {?} */
    TopicpickerComponent.prototype.latestParentValue;
    /** @type {?} */
    TopicpickerComponent.prototype.tempAssociation;
}
//# sourceMappingURL=data:application/json;base64,