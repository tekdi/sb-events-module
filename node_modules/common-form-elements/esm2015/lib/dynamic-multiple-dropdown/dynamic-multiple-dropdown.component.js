/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-multiple-dropdown/dynamic-multiple-dropdown.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Input, HostListener } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { from, Subject, merge } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
import { fromJS, List, Map, Set } from 'immutable';
import * as _ from 'lodash-es';
export class DynamicMultipleDropdownComponent {
    /**
     * @param {?} changeDetectionRef
     */
    constructor(changeDetectionRef) {
        this.changeDetectionRef = changeDetectionRef;
        this.isMultiple = true;
        this.platform = 'web';
        this.dependencyTerms = [];
        this._ = _;
        this.showModal = false;
        this.tempValue = Set();
        this.resolvedOptions = List();
        this.optionValueToOptionLabelMap = Map();
        this.fromJS = fromJS;
        this.dispose$ = new Subject();
    }
    /**
     * @return {?}
     */
    docClick() {
        if (this.showModal) {
            this.showModal = false;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field && this.field.range) {
            this.options = this.field.range;
        }
        if (!_.isEmpty(this.depends)) {
            merge(..._.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            depend => depend.valueChanges))).pipe(tap((/**
             * @return {?}
             */
            () => {
                this.formControlRef.patchValue(null);
                this.resetTempValue();
            })), takeUntil(this.dispose$)).subscribe();
            merge(..._.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            depend => depend.statusChanges))).pipe(tap((/**
             * @return {?}
             */
            () => {
                this.isDependsInvalid = _.includes(_.map(this.depends, (/**
                 * @param {?} depend
                 * @return {?}
                 */
                depend => depend.invalid)), true);
            })), takeUntil(this.dispose$)).subscribe();
            this.isDependsInvalid = _.includes(_.map(this.depends, (/**
             * @param {?} depend
             * @return {?}
             */
            depend => depend.invalid)), true);
        }
        this.formControlRef.valueChanges.pipe(tap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.setTempValue(value);
            this.changeDetectionRef.detectChanges();
        })), takeUntil(this.dispose$)).subscribe();
        this.setupOptions();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes['options'] || !changes['options'].currentValue) {
            return;
        }
    }
    /**
     * @return {?}
     */
    onSubmit() {
        /** @type {?} */
        const finalValue = this.tempValue.toList().toJS();
        this.formControlRef.patchValue(this.isMultiple ? finalValue : finalValue[0]);
        this.formControlRef.markAsDirty();
        this.showModal = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    openModal(event) {
        if (this.context && this.context.invalid) {
            return;
        }
        if (this.disabled === true || this.isDependsInvalid) {
            return;
        }
        this.setTempValue(this.formControlRef.value);
        /** @type {?} */
        const htmlCollection = document.getElementsByClassName('sb-modal-dropdown-web');
        /** @type {?} */
        const modalElements = Array.from(htmlCollection);
        /** @type {?} */
        const isModalAlreadyOpened = modalElements.some((/**
         * @param {?} element
         * @return {?}
         */
        (element) => element.hidden === false));
        if (this.platform === 'web' && isModalAlreadyOpened && !this.showModal) {
            modalElements.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                item.hidden = true;
            }));
        }
        if (this.platform === 'web' && this.showModal) {
            this.showModal = false;
        }
        else {
            this.showModal = true;
        }
        event.stopPropagation();
    }
    /**
     * @param {?} option
     * @return {?}
     */
    addSelected(option) {
        if (this.isMultiple) {
            if (this.field.output) {
                if (this.tempValue.includes(option.get(this.field.output))) {
                    this.tempValue = this.tempValue.remove(option.get(this.field.output));
                }
                else {
                    this.tempValue = this.tempValue.add(option.get(this.field.output));
                }
            }
            else if (this.tempValue.includes(option.get('name'))) {
                this.tempValue = this.tempValue.remove(option.get('name'));
            }
            else if (this.tempValue.includes(option.get('identifier'))) {
                this.tempValue = this.tempValue.remove(option.get('identifier'));
            }
            else {
                this.tempValue = this.tempValue.add(option.get('name'));
            }
        }
        else {
            if (this.field.output) {
                this.tempValue = this.tempValue.clear();
                this.tempValue = this.tempValue.add(option.get(this.field.output));
            }
            else {
                this.tempValue = this.tempValue.clear();
                this.tempValue = this.tempValue.add(option.get('name'));
            }
        }
    }
    /**
     * @return {?}
     */
    onCancel() {
        this.formControlRef.markAsDirty();
        this.showModal = false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dispose$.next(null);
        this.dispose$.complete();
    }
    /**
     * @private
     * @return {?}
     */
    isOptionsArray() {
        return Array.isArray(this.options);
    }
    /**
     * @private
     * @return {?}
     */
    isOptionsClosure() {
        return typeof this.options === 'function';
    }
    /**
     * @private
     * @return {?}
     */
    isOptionsMap() {
        return !Array.isArray(this.options) && typeof this.options === 'object';
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setTempValue(value) {
        if (value) {
            if (Array.isArray(value)) {
                this.tempValue = Set(fromJS(value));
            }
            else {
                this.tempValue = Set(fromJS([value]));
            }
            // this.onSubmit();
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetTempValue() {
        this.tempValue = Set(null);
    }
    /**
     * @private
     * @return {?}
     */
    setupOptions() {
        if (!this.options) {
            this.options = [];
            this.resolvedOptions = this.resolvedOptions.clear();
        }
        if (this.isOptionsArray()) {
            /** @type {?} */
            const optionMap = _.map(this.options, (/**
             * @param {?} option
             * @return {?}
             */
            option => {
                return {
                    identifier: option.value || option.identifier || option.name || option,
                    name: option.label || option.name || option.value || option,
                };
            }));
            this.resolvedOptions = fromJS(optionMap);
        }
        else if (this.isOptionsMap()) {
            this.resolvedOptions = (this.depends) ?
                fromJS(this.options[this.context.value]) :
                this.resolvedOptions;
        }
        else if (this.isOptionsClosure()) {
            from(((/** @type {?} */ (this.options)))(this.formControlRef, this.depends, this.formGroup, (/**
             * @return {?}
             */
            () => this.dataLoadStatusDelegate.next('LOADING')), (/**
             * @return {?}
             */
            () => this.dataLoadStatusDelegate.next('LOADED')))).pipe(tap((/**
             * @param {?=} options
             * @return {?}
             */
            (options = []) => {
                this.resolvedOptions = fromJS(options);
                this.resolvedOptions.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                (option) => {
                    /** @type {?} */
                    const value = !_.isEmpty(this.field.output) ? option.get(this.field.output) :
                        option.get('name') || option.get('identifier') || option.get('value') || option;
                    /** @type {?} */
                    const labelVal = option.get('name') || option.get('label') || option;
                    this.optionValueToOptionLabelMap = this.optionValueToOptionLabelMap.set(value, labelVal);
                }));
                this.setTempValue(this.default);
                this.changeDetectionRef.detectChanges();
            })), takeUntil(this.dispose$)).subscribe();
        }
        this.resolvedOptions.forEach((/**
         * @param {?} option
         * @return {?}
         */
        (option) => {
            /** @type {?} */
            const value = !_.isEmpty(this.field.output) ? option.get(this.field.output) :
                option.get('name') || option.get('identifier') || option.get('value') || option;
            /** @type {?} */
            const labelVal = option.get('name') || option.get('label') || option;
            this.optionValueToOptionLabelMap = this.optionValueToOptionLabelMap.set(value, labelVal);
        }));
        this.setTempValue(this.default);
    }
}
DynamicMultipleDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-dynamic-multiple-dropdown',
                template: "<div class=\"multi-select-section-app\">\n  <label class=\"input-label\" *ngIf=\"label\">{{label}}</label>\n  <!-- <div *ngIf=\"labelHtml\" [innerHTML]=\"labelHtml | transposeHtml\"></div> -->\n  <div class=\"multi-select-container\">\n    <sb-caret-down class=\"caret-down\" [ngClass]=\"{'disabled': disabled === true ? true : ( depends ? (isDependsInvalid ? true : null) : null ) }\" (click)=\"openModal($event)\" [attr.disabled]=\"disabled ? true : ( depends ? (isDependsInvalid ? true : null) : null )\">\n    </sb-caret-down>\n    <div class=\"list-border\" (click)=\"openModal($event)\">\n      <ul [ngClass]=\"{'disabled': disabled === true ? true : ( depends ? (isDependsInvalid ? true : null) : null ) }\" [attr.disabled]=\"disabled ? true : ( depends ? (isDependsInvalid ? true : null) : null )\">\n        <ng-container *ngIf=\"isMultiple\">\n          <li *ngIf=\"!formControlRef.value || !formControlRef.value?.length\" class=\"placeholder\">{{placeholder}}</li>\n          <ng-container *ngIf=\"formControlRef.value?.length\">\n            <span *ngFor=\"let value of formControlRef.value; let index=index\">\n              {{optionValueToOptionLabelMap.get(fromJS(value))}}\n              <span *ngIf=\"index < formControlRef.value?.length - 1\">,\n              </span>\n            </span>\n          </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"!isMultiple\">\n          <li *ngIf=\"!formControlRef.value\" class=\"placeholder\">{{placeholder}}</li>\n\n          <span *ngIf=\"formControlRef.value\">{{optionValueToOptionLabelMap.get(fromJS(formControlRef.value))}}</span>\n        </ng-container>\n      </ul>\n    </div>\n    <div class=\"sb-modal-container\" *ngIf=\"platform === 'mobile'\" [hidden]=\"!showModal\" (click)=\"showModal=false;\">\n      <div class=\"sb-modal-overlay\">\n        <div class=\"sb-modal\" (click)=\"$event.stopPropagation()\">\n          <div class=\"header\">\n            {{placeholder}}\n          </div>\n          <div class=\"body\">\n            <ul>\n              <li *ngFor=\"let option of resolvedOptions; let i=index\">\n                <div (click)=\"addSelected(option)\" class=\"row\">\n                  <label class=\"container\" style=\"pointer-events: none\">\n                    <input [checked]=\"!_.isEmpty(field.output) ? tempValue.includes(option.get(field.output)) : tempValue.includes(option.get('name'))\" class=\"sb-checkbox\" type=\"checkbox\">\n                    <span class=\"checkmark\"></span>\n                  </label>\n                  <span>{{option.get('name')}}</span>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div class=\"footer\">\n            <div class=\"sb-form-button\">\n              <button class=\"sb-btn-primary-outline\" (click)=\"onCancel()\">cancel</button>\n            </div>\n            <div class=\"sb-form-button\">\n              <button class=\"sb-btn-primary\" (click)=\"onSubmit()\">submit</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"sb-modal-dropdown-web\" *ngIf=\"platform === 'web'\"  [hidden]=\"!showModal\" (click)=\"showModal=false;\">\n      <ul>\n        <li *ngFor=\"let option of resolvedOptions; let i=index\" [ngClass]=\"{'selected-option': !_.isEmpty(field.output) ? tempValue.includes(option.get(field.output)) : tempValue.includes(option.get('name'))}\">\n          <div (click)=\"addSelected(option); onSubmit()\">\n            <span class=\"cursor-pointer\">{{option.get('name')}}</span>\n          </div>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n",
                styles: [".multi-select-section-app{margin:1rem 0}label{font-size:14px;font-weight:400;margin:0}.multi-select-container{position:relative;margin-bottom:8px}.multi-select-container .caret-down{position:absolute;top:12px;right:19px;z-index:0}.multi-select-container .list-border .placeholder{margin:0;color:var(--gray-100)}.multi-select-container .list-border ul[disabled]{opacity:.3;pointer-events:none}.multi-select-container .list-border ul{list-style-type:none;position:absolute;margin:0;font-size:14px;font-weight:700}.multi-select-container .list-border{border:.5px solid var(--gray-400);padding:1.3rem;cursor:pointer;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;left:0;height:40px}.multi-select-container .list-border li{float:left;font-size:12px;font-weight:700;margin-left:4px}.multi-select-container .dropdown li{cursor:pointer;padding:8px;border:1px solid var(--white)}.multi-select-container .dropdown ul{list-style-type:none;margin:0;padding:0}.multi-select-container .row{display:-ms-grid;display:grid;-ms-grid-columns:1fr 10fr;grid-template-columns:1fr 10fr;grid-gap:0}.multi-select-container .footer{display:-ms-grid;display:grid;-ms-grid-columns:1fr 1fr;grid-template-columns:1fr 1fr;grid-gap:0;padding-left:8px;padding-bottom:8px;padding-top:8px}.multi-select-container .sb-modal-container{position:fixed;height:100vh;overflow:hidden;width:100%;left:0;top:0;right:0;z-index:10}.multi-select-container .sb-modal-overlay{position:absolute;width:100%;height:100%;top:0;background:rgba(0,0,0,.6);left:0;z-index:10}.multi-select-container .fa .fa-close{float:right}.multi-select-container .sb-modal{display:block;position:absolute;bottom:0;width:100%;--border-top:0.5px solid var(--white);z-index:11;background:var(--white)}.multi-select-container .sb-modal ul{list-style-type:none}.multi-select-container .sb-modal li{cursor:pointer;padding-bottom:8px;padding-top:8px;padding-left:16px}.value-label{width:270px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.multi-select-container .sb-forms-radio{margin-top:6px}.multi-select-container .sb-form-button{display:inline;padding:10px}.multi-select-container .sb-btn-primary-outline{color:var(--primary-color);background-color:transparent;border:.5px solid var(--primary-color);border-radius:4px;padding:10px 40px;font-size:16px;text-transform:uppercase;width:100%}.multi-select-container .sb-btn-primary{color:var(--white);background-color:var(--primary-color);border:.5px solid var(--primary-color);border-radius:4px;padding:10px 40px;font-size:16px;text-transform:uppercase;width:100%}.multi-select-container .header{padding:16px;margin-left:8px;font-weight:700}.multi-select-container .body{padding-top:8px;border-bottom:.5px solid var(--gray-100);border-top:.5px solid var(--gray-100);max-height:300px;overflow:scroll}.list-with-ellipsis:nth-child(3){float:left;font-size:12px;font-weight:700;margin-left:4px;width:50px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.list-with-ellipsis:nth-child(n+4){visibility:hidden}.multi-select-container .container{display:block;position:relative;padding-left:35px;margin-bottom:12px;cursor:pointer;font-size:22px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.checkmark{position:absolute;top:3px;left:0;height:15px;width:15px;border:.4px solid var(--black)}.container:hover input~.checkmark{background-color:var(--white)}.container input:checked~.checkmark{background-color:var(--primary-600)}.checkmark:after{content:\"\";position:absolute;display:none}.container input:checked~.checkmark:after{display:block}.container .checkmark:after{left:5px;top:0;width:5px;height:10px;border:solid var(--white);border-width:0 2px 2px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.sb-modal-dropdown-web ul{list-style-type:none;display:block;position:absolute;top:38px;left:0;background-color:#fff;width:100%;z-index:999;box-shadow:2px 2px 2px 2px #f0f8ff;border:2px solid #80a7ce;max-height:314px;overflow:scroll}.sb-modal-dropdown-web ul li{margin-top:10px;margin-bottom:8px;padding:8px;font-size:13px}.sb-modal-dropdown-web .selected-option{font-weight:700;background-color:#eee}::-webkit-scrollbar{width:6px}::-webkit-scrollbar-track{background:#f1f1f1}::-webkit-scrollbar-thumb{background:#888}::-webkit-scrollbar-thumb:hover{background:#555}.cursor-pointer{cursor:pointer}"]
            }] }
];
/** @nocollapse */
DynamicMultipleDropdownComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DynamicMultipleDropdownComponent.propDecorators = {
    disabled: [{ type: Input }],
    field: [{ type: Input }],
    options: [{ type: Input }],
    label: [{ type: Input }],
    labelHtml: [{ type: Input }],
    placeholder: [{ type: Input }],
    isMultiple: [{ type: Input }],
    context: [{ type: Input }],
    formControlRef: [{ type: Input }],
    formGroup: [{ type: Input }],
    platform: [{ type: Input }],
    default: [{ type: Input }],
    contextData: [{ type: Input }],
    dataLoadStatusDelegate: [{ type: Input }],
    depends: [{ type: Input }],
    dependencyTerms: [{ type: Input }],
    docClick: [{ type: HostListener, args: ['document:click',] }]
};
if (false) {
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.disabled;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.field;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.options;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.label;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.labelHtml;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.placeholder;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.isMultiple;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.context;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.formControlRef;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.formGroup;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.platform;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.default;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.contextData;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.dataLoadStatusDelegate;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.depends;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.dependencyTerms;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype._;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.isDependsInvalid;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.showModal;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.tempValue;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.resolvedOptions;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.optionValueToOptionLabelMap;
    /** @type {?} */
    DynamicMultipleDropdownComponent.prototype.fromJS;
    /**
     * @type {?}
     * @private
     */
    DynamicMultipleDropdownComponent.prototype.dispose$;
    /**
     * @type {?}
     * @private
     */
    DynamicMultipleDropdownComponent.prototype.changeDetectionRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1tdWx0aXBsZS1kcm9wZG93bi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jb21tb24tZm9ybS1lbGVtZW50cy8iLCJzb3VyY2VzIjpbImxpYi9keW5hbWljLW11bHRpcGxlLWRyb3Bkb3duL2R5bmFtaWMtbXVsdGlwbGUtZHJvcGRvd24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUEyQixpQkFBaUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUM1QyxZQUFZLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFMUMsT0FBTyxFQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pELE9BQU8sS0FBSyxDQUFDLE1BQU0sV0FBVyxDQUFDO0FBTS9CLE1BQU0sT0FBTyxnQ0FBZ0M7Ozs7SUF1QzNDLFlBQ1Usa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFoQ3RDLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFJbEIsYUFBUSxHQUFRLEtBQUssQ0FBQztRQUt0QixvQkFBZSxHQUFTLEVBQUUsQ0FBQztRQUVwQyxNQUFDLEdBQVEsQ0FBQyxDQUFDO1FBS1gsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQixjQUFTLEdBQUcsR0FBRyxFQUFPLENBQUM7UUFDdkIsb0JBQWUsR0FBRyxJQUFJLEVBQXVCLENBQUM7UUFDOUMsZ0NBQTJCLEdBQUcsR0FBRyxFQUFlLENBQUM7UUFFakQsV0FBTSxHQUFHLE1BQU0sQ0FBQztRQUVSLGFB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Q0FBQyxDQUFDO1FBQzNGLENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7O1lBalBGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsOEJBQThCO2dCQUN4Qyx3a0hBQXlEOzthQUUxRDs7OztZQVppQyxpQkFBaUI7Ozt1QkFlaEQsS0FBSztvQkFDTCxLQUFLO3NCQUNMLEtBQUs7b0JBQ0wsS0FBSzt3QkFDTCxLQUFLOzBCQUNMLEtBQUs7eUJBQ0wsS0FBSztzQkFDTCxLQUFLOzZCQUNMLEtBQUs7d0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3NCQUNMLEtBQUs7MEJBQ0wsS0FBSztxQ0FDTCxLQUFLO3NCQUNMLEtBQUs7OEJBQ0wsS0FBSzt1QkFnQkwsWUFBWSxTQUFDLGdCQUFnQjs7OztJQS9COUIsb0RBQTRCOztJQUM1QixpREFBb0M7O0lBQ3BDLG1EQUFzQjs7SUFDdEIsaURBQXdCOztJQUN4QixxREFBd0I7O0lBQ3hCLHVEQUE4Qjs7SUFDOUIsc0RBQTJCOztJQUMzQixtREFBK0I7O0lBQy9CLDBEQUFzQzs7SUFDdEMscURBQStCOztJQUMvQixvREFBK0I7O0lBQy9CLG1EQUF1Qjs7SUFDdkIsdURBQTBCOztJQUMxQixrRUFBK0Q7O0lBQy9ELG1EQUFpQzs7SUFDakMsMkRBQW9DOztJQUVwQyw2Q0FBVzs7SUFHWCw0REFBNkI7O0lBRTdCLHFEQUFrQjs7SUFDbEIscURBQXVCOztJQUN2QiwyREFBOEM7O0lBQzlDLHVFQUFpRDs7SUFFakQsa0RBQWdCOzs7OztJQUVoQixvREFBNEM7Ozs7O0lBUzFDLDhEQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksXG4gIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgSG9zdExpc3RlbmVyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Rm9ybUNvbnRyb2wsIEZvcm1Hcm91cH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtmcm9tLCBTdWJqZWN0LCBtZXJnZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0ZpZWxkQ29uZmlnLCBGaWVsZENvbmZpZ09wdGlvbnNCdWlsZGVyLCBEeW5hbWljRmllbGRDb25maWdPcHRpb25zQnVpbGRlcn0gZnJvbSAnLi4vY29tbW9uLWZvcm0tY29uZmlnJztcbmltcG9ydCB7dGFrZVVudGlsLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7ZnJvbUpTLCBMaXN0LCBNYXAsIFNldH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoLWVzJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NiLWR5bmFtaWMtbXVsdGlwbGUtZHJvcGRvd24nLFxuICB0ZW1wbGF0ZVVybDogJy4vZHluYW1pYy1tdWx0aXBsZS1kcm9wZG93bi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2R5bmFtaWMtbXVsdGlwbGUtZHJvcGRvd24uY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNNdWx0aXBsZURyb3Bkb3duQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBASW5wdXQoKSBmaWVsZDogRmllbGRDb25maWc8U3RyaW5nPjtcbiAgQElucHV0KCkgb3B0aW9uczogYW55O1xuICBASW5wdXQoKSBsYWJlbD86IHN0cmluZztcbiAgQElucHV0KCkgbGFiZWxIdG1sOiBhbnk7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBASW5wdXQoKSBpc011bHRpcGxlID0gdHJ1ZTtcbiAgQElucHV0KCkgY29udGV4dD86IEZvcm1Db250cm9sO1xuICBASW5wdXQoKSBmb3JtQ29udHJvbFJlZj86IEZvcm1Db250cm9sO1xuICBASW5wdXQoKSBmb3JtR3JvdXA/OiBGb3JtR3JvdXA7XG4gIEBJbnB1dCgpIHBsYXRmb3JtOiBhbnkgPSAnd2ViJztcbiAgQElucHV0KCkgZGVmYXVsdD86IGFueTtcbiAgQElucHV0KCkgY29udGV4dERhdGE6IGFueTtcbiAgQElucHV0KCkgZGF0YUxvYWRTdGF0dXNEZWxlZ2F0ZTogU3ViamVjdDwnTE9BRElORycgfCAnTE9BREVEJz47XG4gIEBJbnB1dCgpIGRlcGVuZHM/OiBGb3JtQ29udHJvbFtdO1xuICBASW5wdXQoKSBkZXBlbmRlbmN5VGVybXM/OiBhbnkgPSBbXTtcblxuICBfOiBhbnkgPSBfO1xuXG5cbiAgcHVibGljIGlzRGVwZW5kc0ludmFsaWQ6IGFueTtcblxuICBzaG93TW9kYWwgPSBmYWxzZTtcbiAgdGVtcFZhbHVlID0gU2V0PGFueT4oKTtcbiAgcmVzb2x2ZWRPcHRpb25zID0gTGlzdDxNYXA8c3RyaW5nLCBzdHJpbmc+PigpO1xuICBvcHRpb25WYWx1ZVRvT3B0aW9uTGFiZWxNYXAgPSBNYXA8YW55LCBzdHJpbmc+KCk7XG5cbiAgZnJvbUpTID0gZnJvbUpTO1xuXG4gIHByaXZhdGUgZGlzcG9zZSQgPSBuZXcgU3ViamVjdDx1bmRlZmluZWQ+KCk7XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snKVxuICBkb2NDbGljaygpIHtcbiAgICBpZiAodGhpcy5zaG93TW9kYWwpIHtcbiAgICAgIHRoaXMuc2hvd01vZGFsID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0aW9uUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHtcbiAgfVxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5maWVsZCAmJiB0aGlzLmZpZWxkLnJhbmdlKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmZpZWxkLnJhbmdlO1xuICAgIH1cblxuICAgIGlmICghXy5pc0VtcHR5KHRoaXMuZGVwZW5kcykpIHtcbiAgICAgIG1lcmdlKC4uLl8ubWFwKHRoaXMuZGVwZW5kcywgZGVwZW5kID0+IGRlcGVuZC52YWx1ZUNoYW5nZXMpKS5waXBlKFxuICAgICAgICB0YXAoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZm9ybUNvbnRyb2xSZWYucGF0Y2hWYWx1ZShudWxsKTtcbiAgICAgICAgICB0aGlzLnJlc2V0VGVtcFZhbHVlKCk7XG4gICAgICAgIH0pLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5kaXNwb3NlJClcbiAgICAgICkuc3Vic2NyaWJlKCk7XG5cbiAgICAgIG1lcmdlKC4uLl8ubWFwKHRoaXMuZGVwZW5kcywgZGVwZW5kID0+IGRlcGVuZC5zdGF0dXNDaGFuZ2VzKSkucGlwZShcbiAgICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmlzRGVwZW5kc0ludmFsaWQgPSBfLmluY2x1ZGVzKF8ubWFwKHRoaXMuZGVwZW5kcywgZGVwZW5kID0+IGRlcGVuZC5pbnZhbGlkKSwgdHJ1ZSk7XG4gICAgICAgIH0pLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5kaXNwb3NlJClcbiAgICAgICkuc3Vic2NyaWJlKCk7XG5cbiAgICAgIHRoaXMuaXNEZXBlbmRzSW52YWxpZCA9IF8uaW5jbHVkZXMoXy5tYXAodGhpcy5kZXBlbmRzLCBkZXBlbmQgPT4gZGVwZW5kLmludmFsaWQpLCB0cnVlKTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm1Db250cm9sUmVmLnZhbHVlQ2hhbmdlcy5waXBlKFxuICAgICAgdGFwKCh2YWx1ZSkgPT4ge1xuICAgICAgICB0aGlzLnNldFRlbXBWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH0pLFxuICAgICAgdGFrZVVudGlsKHRoaXMuZGlzcG9zZSQpXG4gICAgKS5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnNldHVwT3B0aW9ucygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICghY2hhbmdlc1snb3B0aW9ucyddIHx8ICFjaGFuZ2VzWydvcHRpb25zJ10uY3VycmVudFZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgb25TdWJtaXQoKSB7XG4gICAgY29uc3QgZmluYWxWYWx1ZSA9IHRoaXMudGVtcFZhbHVlLnRvTGlzdCgpLnRvSlMoKTtcbiAgICB0aGlzLmZvcm1Db250cm9sUmVmLnBhdGNoVmFsdWUodGhpcy5pc011bHRpcGxlID8gZmluYWxWYWx1ZSA6IGZpbmFsVmFsdWVbMF0pO1xuICAgIHRoaXMuZm9ybUNvbnRyb2xSZWYubWFya0FzRGlydHkoKTtcbiAgICB0aGlzLnNob3dNb2RhbCA9IGZhbHNlO1xuICB9XG5cbiAgb3Blbk1vZGFsKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuaW52YWxpZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5kaXNhYmxlZCA9PT0gdHJ1ZSB8fCB0aGlzLmlzRGVwZW5kc0ludmFsaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldFRlbXBWYWx1ZSh0aGlzLmZvcm1Db250cm9sUmVmLnZhbHVlKTtcbiAgICBjb25zdCBodG1sQ29sbGVjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NiLW1vZGFsLWRyb3Bkb3duLXdlYicpO1xuICAgIGNvbnN0IG1vZGFsRWxlbWVudHMgPSBBcnJheS5mcm9tKGh0bWxDb2xsZWN0aW9uKTtcbiAgICBjb25zdCBpc01vZGFsQWxyZWFkeU9wZW5lZCA9IG1vZGFsRWxlbWVudHMuc29tZSgoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IGVsZW1lbnQuaGlkZGVuID09PSBmYWxzZSApO1xuXG4gICAgaWYgKHRoaXMucGxhdGZvcm0gPT09ICd3ZWInICYmIGlzTW9kYWxBbHJlYWR5T3BlbmVkICYmICF0aGlzLnNob3dNb2RhbCkge1xuICAgICAgbW9kYWxFbGVtZW50cy5mb3JFYWNoKChpdGVtOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBpdGVtLmhpZGRlbiA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wbGF0Zm9ybSA9PT0gJ3dlYicgJiYgdGhpcy5zaG93TW9kYWwpIHtcbiAgICAgIHRoaXMuc2hvd01vZGFsID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd01vZGFsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGFkZFNlbGVjdGVkKG9wdGlvbjogTWFwPHN0cmluZywgc3RyaW5nPikge1xuICAgIGlmICh0aGlzLmlzTXVsdGlwbGUpIHtcbiAgICAgIGlmKHRoaXMuZmllbGQub3V0cHV0KSB7XG4gICAgICAgIGlmKHRoaXMudGVtcFZhbHVlLmluY2x1ZGVzKG9wdGlvbi5nZXQodGhpcy5maWVsZC5vdXRwdXQpKSkge1xuICAgICAgICAgIHRoaXMudGVtcFZhbHVlID0gdGhpcy50ZW1wVmFsdWUucmVtb3ZlKG9wdGlvbi5nZXQodGhpcy5maWVsZC5vdXRwdXQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRlbXBWYWx1ZSA9IHRoaXMudGVtcFZhbHVlLmFkZChvcHRpb24uZ2V0KHRoaXMuZmllbGQub3V0cHV0KSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy50ZW1wVmFsdWUuaW5jbHVkZXMob3B0aW9uLmdldCgnbmFtZScpKSkge1xuICAgICAgICB0aGlzLnRlbXBWYWx1ZSA9IHRoaXMudGVtcFZhbHVlLnJlbW92ZShvcHRpb24uZ2V0KCduYW1lJykpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnRlbXBWYWx1ZS5pbmNsdWRlcyhvcHRpb24uZ2V0KCdpZGVudGlmaWVyJykpKSB7XG4gICAgICAgIHRoaXMudGVtcFZhbHVlID0gdGhpcy50ZW1wVmFsdWUucmVtb3ZlKG9wdGlvbi5nZXQoJ2lkZW50aWZpZXInKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRlbXBWYWx1ZSA9IHRoaXMudGVtcFZhbHVlLmFkZChvcHRpb24uZ2V0KCduYW1lJykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZih0aGlzLmZpZWxkLm91dHB1dCkge1xuICAgICAgICB0aGlzLnRlbXBWYWx1ZSA9IHRoaXMudGVtcFZhbHVlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMudGVtcFZhbHVlID0gdGhpcy50ZW1wVmFsdWUuYWRkKG9wdGlvbi5nZXQodGhpcy5maWVsZC5vdXRwdXQpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50ZW1wVmFsdWUgPSB0aGlzLnRlbXBWYWx1ZS5jbGVhcigpO1xuICAgICAgICB0aGlzLnRlbXBWYWx1ZSA9IHRoaXMudGVtcFZhbHVlLmFkZChvcHRpb24uZ2V0KCduYW1lJykpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQ2FuY2VsKCkge1xuICAgIHRoaXMuZm9ybUNvbnRyb2xSZWYubWFya0FzRGlydHkoKTtcbiAgICB0aGlzLnNob3dNb2RhbCA9IGZhbHNlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwb3NlJC5uZXh0KG51bGwpO1xuICAgIHRoaXMuZGlzcG9zZSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNPcHRpb25zQXJyYXkoKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNPcHRpb25zQ2xvc3VyZSgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMub3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIHByaXZhdGUgaXNPcHRpb25zTWFwKCkge1xuICAgIHJldHVybiAhQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMpICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMgPT09ICdvYmplY3QnO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRUZW1wVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHRoaXMudGVtcFZhbHVlID0gU2V0KGZyb21KUyh2YWx1ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50ZW1wVmFsdWUgPSBTZXQoZnJvbUpTKFt2YWx1ZV0pKTtcbiAgICAgIH1cbiAgICAgIC8vIHRoaXMub25TdWJtaXQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlc2V0VGVtcFZhbHVlKCkge1xuICAgIHRoaXMudGVtcFZhbHVlID0gU2V0KG51bGwpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXR1cE9wdGlvbnMoKSB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IFtdO1xuICAgICAgdGhpcy5yZXNvbHZlZE9wdGlvbnMgPSB0aGlzLnJlc29sdmVkT3B0aW9ucy5jbGVhcigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzT3B0aW9uc0FycmF5KCkpIHtcbiAgICAgIGNvbnN0IG9wdGlvbk1hcCA9IF8ubWFwKHRoaXMub3B0aW9ucywgb3B0aW9uID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZGVudGlmaWVyOiBvcHRpb24udmFsdWUgfHwgb3B0aW9uLmlkZW50aWZpZXIgfHwgb3B0aW9uLm5hbWUgfHwgb3B0aW9uLFxuICAgICAgICAgIG5hbWU6IG9wdGlvbi5sYWJlbCB8fCBvcHRpb24ubmFtZSB8fCBvcHRpb24udmFsdWUgfHwgb3B0aW9uLFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlc29sdmVkT3B0aW9ucyA9IGZyb21KUyhvcHRpb25NYXApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc09wdGlvbnNNYXAoKSkge1xuICAgICAgdGhpcy5yZXNvbHZlZE9wdGlvbnMgPSAodGhpcy5kZXBlbmRzKSA/XG4gICAgICAgIGZyb21KUyh0aGlzLm9wdGlvbnNbdGhpcy5jb250ZXh0LnZhbHVlXSkgOlxuICAgICAgICB0aGlzLnJlc29sdmVkT3B0aW9ucztcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNPcHRpb25zQ2xvc3VyZSgpKSB7XG4gICAgICBmcm9tKCh0aGlzLm9wdGlvbnMgYXMgRHluYW1pY0ZpZWxkQ29uZmlnT3B0aW9uc0J1aWxkZXI8YW55PikoXG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2xSZWYsXG4gICAgICAgIHRoaXMuZGVwZW5kcyxcbiAgICAgICAgdGhpcy5mb3JtR3JvdXAsXG4gICAgICAgICgpID0+IHRoaXMuZGF0YUxvYWRTdGF0dXNEZWxlZ2F0ZS5uZXh0KCdMT0FESU5HJyksXG4gICAgICAgICgpID0+IHRoaXMuZGF0YUxvYWRTdGF0dXNEZWxlZ2F0ZS5uZXh0KCdMT0FERUQnKVxuICAgICAgKSkucGlwZShcbiAgICAgICAgdGFwKChvcHRpb25zID0gW10pID0+IHtcbiAgICAgICAgICB0aGlzLnJlc29sdmVkT3B0aW9ucyA9IGZyb21KUyhvcHRpb25zKTtcblxuICAgICAgICAgIHRoaXMucmVzb2x2ZWRPcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWU6IGFueSA9ICFfLmlzRW1wdHkodGhpcy5maWVsZC5vdXRwdXQpID8gb3B0aW9uLmdldCh0aGlzLmZpZWxkLm91dHB1dCkgOlxuICAgICAgICAgICAgIG9wdGlvbi5nZXQoJ25hbWUnKSB8fCBvcHRpb24uZ2V0KCdpZGVudGlmaWVyJykgfHwgb3B0aW9uLmdldCgndmFsdWUnKSB8fCBvcHRpb247XG4gICAgICAgICAgICBjb25zdCBsYWJlbFZhbDogYW55ID0gb3B0aW9uLmdldCgnbmFtZScpIHx8IG9wdGlvbi5nZXQoJ2xhYmVsJykgfHwgb3B0aW9uO1xuXG4gICAgICAgICAgICB0aGlzLm9wdGlvblZhbHVlVG9PcHRpb25MYWJlbE1hcCA9IHRoaXMub3B0aW9uVmFsdWVUb09wdGlvbkxhYmVsTWFwLnNldCh2YWx1ZSwgbGFiZWxWYWwpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy5zZXRUZW1wVmFsdWUodGhpcy5kZWZhdWx0KTtcblxuICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfSksXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLmRpc3Bvc2UkKVxuICAgICAgKS5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVkT3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlOiBhbnkgPSAhXy5pc0VtcHR5KHRoaXMuZmllbGQub3V0cHV0KSA/IG9wdGlvbi5nZXQodGhpcy5maWVsZC5vdXRwdXQpIDpcbiAgICAgIG9wdGlvbi5nZXQoJ25hbWUnKSB8fCBvcHRpb24uZ2V0KCdpZGVudGlmaWVyJykgfHwgb3B0aW9uLmdldCgndmFsdWUnKSB8fCBvcHRpb247XG5cbiAgICAgIGNvbnN0IGxhYmVsVmFsOiBhbnkgPSBvcHRpb24uZ2V0KCduYW1lJykgfHwgb3B0aW9uLmdldCgnbGFiZWwnKSB8fCBvcHRpb247XG5cbiAgICAgIHRoaXMub3B0aW9uVmFsdWVUb09wdGlvbkxhYmVsTWFwID0gdGhpcy5vcHRpb25WYWx1ZVRvT3B0aW9uTGFiZWxNYXAuc2V0KHZhbHVlLCBsYWJlbFZhbCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFRlbXBWYWx1ZSh0aGlzLmRlZmF1bHQpO1xuICB9XG5cbn1cbiJdfQ==