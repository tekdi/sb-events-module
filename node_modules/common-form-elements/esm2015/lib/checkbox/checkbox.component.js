/**
 * @fileoverview added by tsickle
 * Generated from: lib/checkbox/checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
export class CheckboxComponent {
    constructor() {
        this.clickedLink = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log('label', this.label);
        console.log('labelHtml', this.labelHtml);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleLinkClick(event) {
        if (event.target && event.target['hasAttribute'] && ((/** @type {?} */ (event.target))).hasAttribute('href')) {
            this.clickedLink.emit(((/** @type {?} */ (event.target))).getAttribute('href'));
        }
    }
}
CheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-checkbox',
                template: "<div class=\"sb-checkbox\">\n    <div class=\"checkbox-row\">\n        <label class=\"container\">\n            <input type=\"checkbox\" [formControl]=\"formControlRef\" name=\"checkbox\" value=\"value\">\n            <span class=\"checkmark\"></span>\n        </label>\n        <label *ngIf=\"label\" class=\"checkbox-label\">{{label}}</label>\n        <label class=\"label-html\" *ngIf=\"labelHtml\">\n            <div [innerHTML]=\"labelHtml | transposeHtml\" (click)=\"handleLinkClick($event)\"></div>\n        </label>\n    </div>\n</div>",
                styles: ["label{font-size:16px}.sb-checkbox{padding:0 0 0 8px}.container{position:relative;cursor:pointer;font-size:22px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.container .checkmark{position:absolute;top:0;left:0;height:22px;width:22px;border:2px solid #000;border-radius:4px}.container input:checked~.checkmark{background-color:#2196f3}.checkmark:after{content:\"\";position:absolute;display:none}.container input:checked~.checkmark:after{display:block}.container .checkmark:after{left:7px;top:4px;width:5px;height:9px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.checkbox-label{padding:2px 0 0 32px}.checkbox-row{display:-ms-grid;display:grid;-ms-grid-columns:10% 90%;grid-template-columns:10% 90%;grid-gap:0}.label-html{font-size:14px}"]
            }] }
];
/** @nocollapse */
CheckboxComponent.ctorParameters = () => [];
CheckboxComponent.propDecorators = {
    label: [{ type: Input }],
    code: [{ type: Input }],
    value: [{ type: Input }],
    formControlRef: [{ type: Input }],
    labelHtml: [{ type: Input }],
    clickedLink: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CheckboxComponent.prototype.label;
    /** @type {?} */
    CheckboxComponent.prototype.code;
    /** @type {?} */
    CheckboxComponent.prototype.value;
    /** @type {?} */
    CheckboxComponent.prototype.formControlRef;
    /** @type {?} */
    CheckboxComponent.prototype.labelHtml;
    /** @type {?} */
    CheckboxComponent.prototype.clickedLink;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY29tbW9uLWZvcm0tZWxlbWVudHMvIiwic291cmNlcyI6WyJsaWIvY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFPN0MsTUFBTSxPQUFPLGlCQUFpQjtJQVE1QjtRQUZVLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUUzQixDQUFDOzs7O0lBRWpCLFFBQVE7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBRUQsZUFBZSxDQUFDLEtBQWlCO1FBQy9CLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsbUJBQUEsS0FBSyxDQUFDLE1BQU0sRUFBcUIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM1RyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLG1CQUFBLEtBQUssQ0FBQyxNQUFNLEVBQXFCLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNqRjtJQUNILENBQUM7OztZQXhCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLDJpQkFBd0M7O2FBRXpDOzs7OztvQkFFRSxLQUFLO21CQUNMLEtBQUs7b0JBQ0wsS0FBSzs2QkFDTCxLQUFLO3dCQUNMLEtBQUs7MEJBQ0wsTUFBTTs7OztJQUxQLGtDQUFvQjs7SUFDcEIsaUNBQW1COztJQUNuQixrQ0FBcUI7O0lBQ3JCLDJDQUFzQzs7SUFDdEMsc0NBQXlCOztJQUN6Qix3Q0FBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2ItY2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jaGVja2JveC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBsYWJlbDogYW55O1xuICBASW5wdXQoKSBjb2RlOiBhbnk7XG4gIEBJbnB1dCgpIHZhbHVlPzogYW55O1xuICBASW5wdXQoKSBmb3JtQ29udHJvbFJlZj86IEZvcm1Db250cm9sO1xuICBASW5wdXQoKSBsYWJlbEh0bWw/OiBhbnk7XG4gIEBPdXRwdXQoKSBjbGlja2VkTGluayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnNvbGUubG9nKCdsYWJlbCcsIHRoaXMubGFiZWwpO1xuICAgIGNvbnNvbGUubG9nKCdsYWJlbEh0bWwnLCB0aGlzLmxhYmVsSHRtbCk7XG4gIH1cblxuICBoYW5kbGVMaW5rQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldFsnaGFzQXR0cmlidXRlJ10gJiYgKGV2ZW50LnRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudCkuaGFzQXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIHRoaXMuY2xpY2tlZExpbmsuZW1pdCgoZXZlbnQudGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50KS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==