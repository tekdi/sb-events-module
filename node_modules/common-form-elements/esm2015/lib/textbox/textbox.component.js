/**
 * @fileoverview added by tsickle
 * Generated from: lib/textbox/textbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef } from '@angular/core';
import { FormControl } from '@angular/forms';
export class TextboxComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.asyncValidation && this.asyncValidation.asyncValidatorFactory && this.formControlRef) {
            if (this.formControlRef.asyncValidator) {
                return;
            }
            this.formControlRef.setAsyncValidators(this.asyncValidation.asyncValidatorFactory(this.asyncValidation.marker, this.validationTrigger.nativeElement));
        }
    }
}
TextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-textbox',
                template: "<div class=\"sb-input\">\n  <label *ngIf=\"label\">{{label}}</label>\n  <div *ngIf=\"labelHtml\" [innerHTML]=\"labelHtml | transposeHtml\"></div>\n\n  <div [ngClass]=\"{'async-text': (asyncValidation && asyncValidation?.trigger), '': (!asyncValidation || !asyncValidation?.trigger)}\">\n    <div class=\"prefix\" *ngIf=\"prefix\">\n      <span>{{prefix}}</span>\n    </div>\n    <input [formControl]=\"formControlRef\" class=\"sb-textbox\" placeholder={{placeholder}} type=\"text\">\n    <div class=\"async-icons\" *ngIf=\"asyncValidation && asyncValidation?.trigger\">\n      <sb-green-tick *ngIf=\"formControlRef.value && formControlRef.status === 'VALID'\"></sb-green-tick>\n      <sb-red-exclamation *ngIf=\"formControlRef.value && formControlRef.status !== 'VALID'\"></sb-red-exclamation>\n      <sb-empty-circle *ngIf=\"!formControlRef.value\"></sb-empty-circle>\n    </div>\n  </div>\n  \n  <ng-container *ngFor=\"let validation of validations\">\n    <div class=\"cf-error\"\n      *ngIf=\"(validation.type && (validation.type).toLowerCase && validation.message && formControlRef.errors && formControlRef.errors[(validation.type).toLowerCase()] && (formControlRef.dirty || formControlRef.touched))\">\n      {{ validation.message }}\n    </div>\n  </ng-container>\n  \n  <ng-container *ngIf=\"asyncValidation?.trigger\">\n    <div class=\"async-validator\"\n      [hidden]=\"formControlRef.status === 'VALID' || formControlRef.status !== 'PENDING' || !formControlRef.value\">\n      <div class=\"cf-error\" *ngIf=\"asyncValidation?.message\">\n        {{ asyncValidation.message }}\n      </div>\n      <div class=\"async-container\">\n        <button class=\"async-btn\" #validationTrigger [attr.data-marker]=\"asyncValidation.marker\">\n          {{asyncValidation.trigger}}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n\n</div>\n",
                styles: ["label{display:block;font-size:1rem;margin:0}.sb-textbox{width:100%;padding:8px 16px;border:.5px solid #333;box-sizing:border-box}::-webkit-input-placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}::-moz-placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}:-ms-input-placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}::-ms-input-placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}::placeholder{padding:.25rem;opacity:.99;color:#999;font-family:\"Noto Sans\";font-size:12px;font-weight:700}.sb-input{margin:1rem 0}.cf-error{color:red;font-family:\"Noto Sans\";font-size:12px}.async-container{text-align:center}.async-btn{padding:12px 16px;background-color:#008840;color:#fff;border-radius:20px!important}.async-text{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;border:.5px solid #333}.async-text>input{border:none}.normal-text>.async-icons>sb-empty-circle,.normal-text>.async-icons>sb-green-tick,.normal-text>.async-icons>sb-red-exclamation{display:none}.prefix{white-space:nowrap;padding:0 4px}.async-icons{margin:auto;padding:0 4px}"]
            }] }
];
/** @nocollapse */
TextboxComponent.ctorParameters = () => [];
TextboxComponent.propDecorators = {
    asyncValidation: [{ type: Input }],
    label: [{ type: Input }],
    labelHtml: [{ type: Input }],
    placeholder: [{ type: Input }],
    validations: [{ type: Input }],
    formControlRef: [{ type: Input }],
    prefix: [{ type: Input }],
    validationTrigger: [{ type: ViewChild, args: ['validationTrigger', { static: false },] }]
};
if (false) {
    /** @type {?} */
    TextboxComponent.prototype.asyncValidation;
    /** @type {?} */
    TextboxComponent.prototype.label;
    /** @type {?} */
    TextboxComponent.prototype.labelHtml;
    /** @type {?} */
    TextboxComponent.prototype.placeholder;
    /** @type {?} */
    TextboxComponent.prototype.validations;
    /** @type {?} */
    TextboxComponent.prototype.formControlRef;
    /** @type {?} */
    TextboxComponent.prototype.prefix;
    /** @type {?} */
    TextboxComponent.prototype.validationTrigger;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jb21tb24tZm9ybS1lbGVtZW50cy8iLCJzb3VyY2VzIjpbImxpYi90ZXh0Ym94L3RleHRib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQW9DLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEcsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBUTNDLE1BQU0sT0FBTyxnQkFBZ0I7SUFVM0I7SUFDQSxDQUFDOzs7O0lBRUQsUUFBUTtJQUNSLENBQUM7Ozs7SUFFRCxXQUFXO0lBRVgsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQzdGLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUU7Z0JBQ3RDLE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FDL0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQzNCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQ3JDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7O1lBcENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsZzFEQUF1Qzs7YUFFeEM7Ozs7OzhCQUVFLEtBQUs7b0JBQ0wsS0FBSzt3QkFDTCxLQUFLOzBCQUNMLEtBQUs7MEJBQ0wsS0FBSzs2QkFDTCxLQUFLO3FCQUNMLEtBQUs7Z0NBQ0wsU0FBUyxTQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFDLEtBQUssRUFBRTs7OztJQVBoRCwyQ0FBc0Q7O0lBQ3RELGlDQUF1Qjs7SUFDdkIscUNBQXdCOztJQUN4Qix1Q0FBNkI7O0lBQzdCLHVDQUEyQjs7SUFDM0IsMENBQXNDOztJQUN0QyxrQ0FBeUI7O0lBQ3pCLDZDQUFnRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIFZpZXdDaGlsZCwgRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1Db250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZ0FzeW5jVmFsaWRhdGlvbiB9IGZyb20gJy4uL2NvbW1vbi1mb3JtLWNvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NiLXRleHRib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGV4dGJveC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RleHRib3guY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRleHRib3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGFzeW5jVmFsaWRhdGlvbj86IEZpZWxkQ29uZmlnQXN5bmNWYWxpZGF0aW9uO1xuICBASW5wdXQoKSBsYWJlbDogU3RyaW5nO1xuICBASW5wdXQoKSBsYWJlbEh0bWw6IGFueTtcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IFN0cmluZztcbiAgQElucHV0KCkgdmFsaWRhdGlvbnM/OiBhbnk7XG4gIEBJbnB1dCgpIGZvcm1Db250cm9sUmVmPzogRm9ybUNvbnRyb2w7XG4gIEBJbnB1dCgpIHByZWZpeD86IFN0cmluZztcbiAgQFZpZXdDaGlsZCgndmFsaWRhdGlvblRyaWdnZXInLCB7IHN0YXRpYzpmYWxzZSB9KSB2YWxpZGF0aW9uVHJpZ2dlcjogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgXG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMuYXN5bmNWYWxpZGF0aW9uICYmIHRoaXMuYXN5bmNWYWxpZGF0aW9uLmFzeW5jVmFsaWRhdG9yRmFjdG9yeSAmJiB0aGlzLmZvcm1Db250cm9sUmVmKSB7XG4gICAgICBpZiAodGhpcy5mb3JtQ29udHJvbFJlZi5hc3luY1ZhbGlkYXRvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZm9ybUNvbnRyb2xSZWYuc2V0QXN5bmNWYWxpZGF0b3JzKHRoaXMuYXN5bmNWYWxpZGF0aW9uLmFzeW5jVmFsaWRhdG9yRmFjdG9yeShcbiAgICAgICAgdGhpcy5hc3luY1ZhbGlkYXRpb24ubWFya2VyLFxuICAgICAgICB0aGlzLnZhbGlkYXRpb25UcmlnZ2VyLm5hdGl2ZUVsZW1lbnRcbiAgICAgICkpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=