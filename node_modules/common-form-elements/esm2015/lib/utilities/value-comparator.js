/**
 * @fileoverview added by tsickle
 * Generated from: lib/utilities/value-comparator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class ValueComparator {
    /**
     * @param {?} v1
     * @param {?} v2
     * @return {?}
     */
    static valueComparator(v1, v2) {
        if (typeof v1 === 'object' && typeof v2 === 'object') {
            return ObjectUtil.equals(v1, v2);
        }
        else if (v1 === v2) {
            return true;
        }
        else if (!v1 && !v2) {
            return true;
        }
        return false;
    }
}
class ObjectUtil {
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    static equals(a, b) {
        /** @type {?} */
        const countProps = (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => {
            /** @type {?} */
            let count = 0;
            for (const k in obj) {
                if (obj.hasOwnProperty(k)) {
                    count++;
                }
            }
            return count;
        });
        /** @type {?} */
        const objectEquals = (/**
         * @param {?} v1
         * @param {?} v2
         * @return {?}
         */
        (v1, v2) => {
            if (typeof (v1) !== typeof (v2)) {
                return false;
            }
            if (typeof (v1) === 'function') {
                return v1.toString() === v2.toString();
            }
            if (v1 instanceof Object && v2 instanceof Object) {
                if (countProps(v1) !== countProps(v2)) {
                    return false;
                }
                /** @type {?} */
                let r = true;
                for (const k in v1) {
                    r = objectEquals(v1[k], v2[k]);
                    if (!r) {
                        return false;
                    }
                }
                return true;
            }
            else {
                return v1 === v2;
            }
        });
        return objectEquals(a, b);
    }
    /**
     * @param {?} newObj
     * @param {?} oldObj
     * @return {?}
     */
    static getPropDiff(newObj, oldObj) {
        return Object.keys(newObj).reduce((/**
         * @param {?} acc
         * @param {?} key
         * @return {?}
         */
        (acc, key) => {
            if (ObjectUtil.equals(newObj[key], oldObj[key])) {
                return acc;
            }
            acc.push(key);
            return acc;
        }), []);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static getTruthyProps(obj) {
        return Object.keys(obj).filter((/**
         * @param {?} key
         * @return {?}
         */
        (key) => !!obj[key]));
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static toOrderedString(obj) {
        return JSON.stringify(Object.keys(obj).sort().reduce((/**
         * @param {?} acc
         * @param {?} k
         * @return {?}
         */
        (acc, k) => {
            acc[k] = obj[k];
            return acc;
        }), {}));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtY29tcGFyYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NvbW1vbi1mb3JtLWVsZW1lbnRzLyIsInNvdXJjZXMiOlsibGliL3V0aWxpdGllcy92YWx1ZS1jb21wYXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTSxPQUFPLGVBQWU7Ozs7OztJQUMxQixNQUFNLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQzNCLElBQUksT0FBTyxFQUFFLEtBQUssUUFBUSxJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRTtZQUNwRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ2xDO2FBQU0sSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVTs7Ozs7O0lBQ1AsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFNLEVBQUUsQ0FBTTs7Y0FDM0IsVUFBVTs7OztRQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7O2dCQUNyQixLQUFLLEdBQUcsQ0FBQztZQUNiLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO2dCQUNuQixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3pCLEtBQUssRUFBRSxDQUFDO2lCQUNUO2FBQ0Y7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsQ0FBQTs7Y0FFSyxZQUFZOzs7OztRQUFHLENBQUMsRUFBTyxFQUFFLEVBQU8sRUFBRSxFQUFFO1lBQ3hDLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUVELElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLFVBQVUsRUFBRTtnQkFDOUIsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ3hDO1lBRUQsSUFBSSxFQUFFLFlBQVksTUFBTSxJQUFJLEVBQUUsWUFBWSxNQUFNLEVBQUU7Z0JBQ2hELElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtvQkFDckMsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7O29CQUVHLENBQUMsR0FBRyxJQUFJO2dCQUVaLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO29CQUNsQixDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLENBQUMsRUFBRTt3QkFDTixPQUFPLEtBQUssQ0FBQztxQkFDZDtpQkFDRjtnQkFDRCxPQUFPLElBQUksQ0FBQzthQUNiO2lCQUFNO2dCQUNMLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUNsQjtRQUNILENBQUMsQ0FBQTtRQUVELE9BQU8sWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7Ozs7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQVUsRUFBRSxNQUFVO1FBQzlDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNOzs7OztRQUFXLENBQUMsR0FBYSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ2pFLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQy9DLE9BQU8sR0FBRyxDQUFDO2FBQ1o7WUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBTztRQUNsQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTTs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUM7SUFDdEQsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLEdBQU87UUFDbkMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTTs7Ozs7UUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxHQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDVixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVmFsdWVDb21wYXJhdG9yIHtcbiAgc3RhdGljIHZhbHVlQ29tcGFyYXRvcih2MSwgdjIpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIHYxID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdjIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VXRpbC5lcXVhbHModjEsIHYyKTtcbiAgICB9IGVsc2UgaWYgKHYxID09PSB2Mikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICghdjEgJiYgIXYyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuY2xhc3MgT2JqZWN0VXRpbCB7XG4gIHB1YmxpYyBzdGF0aWMgZXF1YWxzKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gICAgY29uc3QgY291bnRQcm9wcyA9IChvYmopID0+IHtcbiAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY291bnQ7XG4gICAgfTtcblxuICAgIGNvbnN0IG9iamVjdEVxdWFscyA9ICh2MTogYW55LCB2MjogYW55KSA9PiB7XG4gICAgICBpZiAodHlwZW9mICh2MSkgIT09IHR5cGVvZiAodjIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiAodjEpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2MS50b1N0cmluZygpID09PSB2Mi50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodjEgaW5zdGFuY2VvZiBPYmplY3QgJiYgdjIgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgaWYgKGNvdW50UHJvcHModjEpICE9PSBjb3VudFByb3BzKHYyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKGNvbnN0IGsgaW4gdjEpIHtcbiAgICAgICAgICByID0gb2JqZWN0RXF1YWxzKHYxW2tdLCB2MltrXSk7XG4gICAgICAgICAgaWYgKCFyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHYxID09PSB2MjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG9iamVjdEVxdWFscyhhLCBiKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0UHJvcERpZmYobmV3T2JqOiB7fSwgb2xkT2JqOiB7fSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobmV3T2JqKS5yZWR1Y2U8c3RyaW5nW10+KChhY2M6IHN0cmluZ1tdLCBrZXkpID0+IHtcbiAgICAgIGlmIChPYmplY3RVdGlsLmVxdWFscyhuZXdPYmpba2V5XSwgb2xkT2JqW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIGFjYy5wdXNoKGtleSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VHJ1dGh5UHJvcHMob2JqOiB7fSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoKGtleSkgPT4gISFvYmpba2V5XSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHRvT3JkZXJlZFN0cmluZyhvYmo6IHt9KTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMob2JqKS5zb3J0KCkucmVkdWNlPHt9PigoYWNjLCBrKSA9PiB7XG4gICAgICBhY2Nba10gPSBvYmpba107XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KSk7XG4gIH1cbn1cbiJdfQ==