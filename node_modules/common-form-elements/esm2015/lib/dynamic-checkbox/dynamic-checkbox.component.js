/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-checkbox/dynamic-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { Subject } from 'rxjs';
import * as _ from 'lodash-es';
import { ValueComparator } from '../utilities/value-comparator';
export class DynamicCheckboxComponent {
    constructor() {
        this.ValueComparator = ValueComparator;
        this.onChangeFilter = new EventEmitter();
        this.dependencyTerms = [];
        this._ = _;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const desiredValue = (this.field.dataType === 'text') ? (this.field.default === 'Yes' ? true : false) : !!this.field.default;
        this.checked = desiredValue;
    }
    /**
     * @param {?} checked
     * @return {?}
     */
    onChecklistChange(checked) {
        this.checked = checked;
        /** @type {?} */
        const desiredValue = (this.field.dataType === 'text') ? (checked === true ? 'Yes' : 'No') : checked;
        this.formControlRef.setValue(desiredValue);
    }
}
DynamicCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-dynamic-checkbox',
                template: "<div class=\"sb-checkbox sb-checkbox-primary\">\n  <input [attr.disabled]=\"disabled ? true : null\" type=\"checkbox\" [formControl]=\"formControlRef\" id=\"{{_.kebabCase(field.name) || field.code}}\"\n  name=\"{{_.kebabCase(field.name) || field.code}}\" [checked]=\"checked\" (change)=\"onChecklistChange($event.target.checked)\">\n  <label *ngIf=\"label\" for=\"{{_.kebabCase(field.name) || field.code}}\">{{label}}</label>\n</div>\n",
                styles: ["label{font-size:16px}.sb-checkbox{padding:0 0 0 8px}.container{position:relative;cursor:pointer;font-size:22px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.container .checkmark{position:absolute;top:0;left:0;height:22px;width:22px;border:2px solid #000;border-radius:4px}.container input:checked~.checkmark{background-color:#2196f3}.checkmark:after{content:\"\";position:absolute;display:none}.container input:checked~.checkmark:after{display:block}.container .checkmark:after{left:7px;top:4px;width:5px;height:9px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.checkbox-label{padding:2px 0 0 32px}.checkbox-row{display:-ms-grid;display:grid;-ms-grid-columns:10% 90%;grid-template-columns:10% 90%;grid-gap:0}.label-html{font-size:14px}"]
            }] }
];
/** @nocollapse */
DynamicCheckboxComponent.ctorParameters = () => [];
DynamicCheckboxComponent.propDecorators = {
    field: [{ type: Input }],
    disabled: [{ type: Input }],
    options: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    isMultiple: [{ type: Input }],
    context: [{ type: Input }],
    contextTerms: [{ type: Input }],
    formControlRef: [{ type: Input }],
    formGroup: [{ type: Input }],
    default: [{ type: Input }],
    contextData: [{ type: Input }],
    dataLoadStatusDelegate: [{ type: Input }],
    type: [{ type: Input }],
    styleClass: [{ type: Input }],
    onChangeFilter: [{ type: Output }],
    validations: [{ type: Input }],
    depends: [{ type: Input }],
    dependencyTerms: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicCheckboxComponent.prototype.ValueComparator;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.field;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.options;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.label;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.placeholder;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.isMultiple;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.context;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.contextTerms;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.formControlRef;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.formGroup;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.default;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.contextData;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.dataLoadStatusDelegate;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.type;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.styleClass;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.onChangeFilter;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.validations;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.depends;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.dependencyTerms;
    /** @type {?} */
    DynamicCheckboxComponent.prototype._;
    /** @type {?} */
    DynamicCheckboxComponent.prototype.checked;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jb21tb24tZm9ybS1lbGVtZW50cy8iLCJzb3VyY2VzIjpbImxpYi9keW5hbWljLWNoZWNrYm94L2R5bmFtaWMtY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUMsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBYSxPQUFPLEVBQXFDLE1BQU0sTUFBTSxDQUFDO0FBRzdFLE9BQU8sS0FBSyxDQUFDLE1BQU0sV0FBVyxDQUFDO0FBQy9CLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQVE5RCxNQUFNLE9BQU8sd0JBQXdCO0lBNEJuQztRQTFCQSxvQkFBZSxHQUFHLGVBQWUsQ0FBQztRQWdCeEIsbUJBQWMsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUl4RCxvQkFBZSxHQUFTLEVBQUUsQ0FBQztRQUVwQyxNQUFDLEdBQVEsQ0FBQyxDQUFDO0lBSUssQ0FBQzs7OztJQUVqQixRQUFROztjQUNBLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTztRQUM1SCxJQUFJLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLE9BQU87UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7O2NBQ2pCLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87UUFDbkcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7O1lBNUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQiwrYkFBZ0Q7O2FBRWpEOzs7OztvQkFJRSxLQUFLO3VCQUNMLEtBQUs7c0JBQ0wsS0FBSztvQkFDTCxLQUFLOzBCQUNMLEtBQUs7eUJBQ0wsS0FBSztzQkFDTCxLQUFLOzJCQUNMLEtBQUs7NkJBQ0wsS0FBSzt3QkFDTCxLQUFLO3NCQUNMLEtBQUs7MEJBQ0wsS0FBSztxQ0FDTCxLQUFLO21CQUNMLEtBQUs7eUJBQ0wsS0FBSzs2QkFDTCxNQUFNOzBCQUNOLEtBQUs7c0JBRUwsS0FBSzs4QkFDTCxLQUFLOzs7O0lBcEJOLG1EQUFrQzs7SUFDbEMseUNBQW9DOztJQUNwQyw0Q0FBNEI7O0lBQzVCLDJDQUFzQjs7SUFDdEIseUNBQXdCOztJQUN4QiwrQ0FBOEI7O0lBQzlCLDhDQUE4Qjs7SUFDOUIsMkNBQStCOztJQUMvQixnREFBNEI7O0lBQzVCLGtEQUFzQzs7SUFDdEMsNkNBQStCOztJQUMvQiwyQ0FBdUI7O0lBQ3ZCLCtDQUEwQjs7SUFDMUIsMERBQStEOztJQUMvRCx3Q0FBdUI7O0lBQ3ZCLDhDQUE2Qjs7SUFDN0Isa0RBQWlFOztJQUNqRSwrQ0FBMkI7O0lBRTNCLDJDQUFpQzs7SUFDakMsbURBQW9DOztJQUVwQyxxQ0FBVzs7SUFFWCwyQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1Db250cm9sLCBGb3JtR3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdCwgU3Vic2NyaXB0aW9uLCBjb21iaW5lTGF0ZXN0LCBtZXJnZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0ZpZWxkQ29uZmlnLCBGaWVsZENvbmZpZ09wdGlvbiwgRmllbGRDb25maWdPcHRpb25zQnVpbGRlcn0gZnJvbSAnLi4vY29tbW9uLWZvcm0tY29uZmlnJztcbmltcG9ydCB7dGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQge1ZhbHVlQ29tcGFyYXRvcn0gZnJvbSAnLi4vdXRpbGl0aWVzL3ZhbHVlLWNvbXBhcmF0b3InO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NiLWR5bmFtaWMtY2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vZHluYW1pYy1jaGVja2JveC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2R5bmFtaWMtY2hlY2tib3guY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgVmFsdWVDb21wYXJhdG9yID0gVmFsdWVDb21wYXJhdG9yO1xuICBASW5wdXQoKSBmaWVsZDogRmllbGRDb25maWc8U3RyaW5nPjtcbiAgQElucHV0KCkgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBASW5wdXQoKSBvcHRpb25zOiBhbnk7XG4gIEBJbnB1dCgpIGxhYmVsPzogc3RyaW5nO1xuICBASW5wdXQoKSBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgQElucHV0KCkgaXNNdWx0aXBsZT86IGJvb2xlYW47XG4gIEBJbnB1dCgpIGNvbnRleHQ/OiBGb3JtQ29udHJvbDtcbiAgQElucHV0KCkgY29udGV4dFRlcm1zPzogYW55O1xuICBASW5wdXQoKSBmb3JtQ29udHJvbFJlZj86IEZvcm1Db250cm9sO1xuICBASW5wdXQoKSBmb3JtR3JvdXA/OiBGb3JtR3JvdXA7XG4gIEBJbnB1dCgpIGRlZmF1bHQ/OiBhbnk7XG4gIEBJbnB1dCgpIGNvbnRleHREYXRhOiBhbnk7XG4gIEBJbnB1dCgpIGRhdGFMb2FkU3RhdHVzRGVsZWdhdGU6IFN1YmplY3Q8J0xPQURJTkcnIHwgJ0xPQURFRCc+O1xuICBASW5wdXQoKSB0eXBlPzogc3RyaW5nO1xuICBASW5wdXQoKSBzdHlsZUNsYXNzPzogc3RyaW5nO1xuICBAT3V0cHV0KCkgb25DaGFuZ2VGaWx0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBASW5wdXQoKSB2YWxpZGF0aW9ucz86IGFueTtcblxuICBASW5wdXQoKSBkZXBlbmRzPzogRm9ybUNvbnRyb2xbXTtcbiAgQElucHV0KCkgZGVwZW5kZW5jeVRlcm1zPzogYW55ID0gW107XG5cbiAgXzogYW55ID0gXztcblxuICBwdWJsaWMgY2hlY2tlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnN0IGRlc2lyZWRWYWx1ZSA9ICh0aGlzLmZpZWxkLmRhdGFUeXBlID09PSAndGV4dCcpID8gKHRoaXMuZmllbGQuZGVmYXVsdCA9PT0gJ1llcycgPyB0cnVlIDogZmFsc2UpIDogISF0aGlzLmZpZWxkLmRlZmF1bHQ7XG4gICAgdGhpcy5jaGVja2VkID0gZGVzaXJlZFZhbHVlO1xuICB9XG5cbiAgb25DaGVja2xpc3RDaGFuZ2UoY2hlY2tlZCkge1xuICAgIHRoaXMuY2hlY2tlZCA9IGNoZWNrZWQ7XG4gICAgY29uc3QgZGVzaXJlZFZhbHVlID0gKHRoaXMuZmllbGQuZGF0YVR5cGUgPT09ICd0ZXh0JykgPyAoY2hlY2tlZCA9PT0gdHJ1ZSA/ICdZZXMnIDogJ05vJykgOiBjaGVja2VkO1xuICAgIHRoaXMuZm9ybUNvbnRyb2xSZWYuc2V0VmFsdWUoZGVzaXJlZFZhbHVlKTtcbiAgfVxuXG5cbn1cbiJdfQ==