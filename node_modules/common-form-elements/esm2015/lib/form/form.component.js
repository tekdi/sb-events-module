/**
 * @fileoverview added by tsickle
 * Generated from: lib/form/form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FieldConfigInputType, FieldConfigValidationType } from '../common-form-config';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Subject } from 'rxjs';
import { distinctUntilChanged, map, scan, tap } from 'rxjs/operators';
export class FormComponent {
    /**
     * @param {?} formBuilder
     */
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.initialize = new EventEmitter();
        this.finalize = new EventEmitter();
        this.linkClicked = new EventEmitter();
        this.valueChanges = new EventEmitter();
        this.statusChanges = new EventEmitter();
        this.platform = 'web';
        this.dataLoadStatus = new EventEmitter();
        this.dataLoadStatusDelegate = new Subject();
        this.FieldConfigInputType = FieldConfigInputType;
        if (!window['forms']) {
            window['forms'] = [];
        }
        window['forms'].push(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.finalize.emit();
        if (this.statusChangesSubscription) {
            this.statusChangesSubscription.unsubscribe();
        }
        if (this.valueChangesSubscription) {
            this.valueChangesSubscription.unsubscribe();
        }
        if (this.dataLoadStatusSinkSubscription) {
            this.dataLoadStatusSinkSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['config']) {
            if ((changes['config'].currentValue && changes['config'].firstChange) || changes['config'].previousValue !== changes['config'].currentValue) {
                this.initializeForm();
            }
        }
        if (this.dataLoadStatusSinkSubscription) {
            this.dataLoadStatusSinkSubscription.unsubscribe();
        }
        if (this.statusChangesSubscription) {
            this.statusChangesSubscription.unsubscribe();
        }
        if (this.valueChangesSubscription) {
            this.valueChangesSubscription.unsubscribe();
        }
        this.dataLoadStatusSinkSubscription = this.dataLoadStatusDelegate.pipe(scan((/**
         * @param {?} acc
         * @param {?} event
         * @return {?}
         */
        (acc, event) => {
            if (event === 'LOADED') {
                acc.loadedCount++;
                return acc;
            }
            acc.loadingCount++;
            return acc;
        }), { loadingCount: 0, loadedCount: 0 }), map((/**
         * @param {?} aggregates
         * @return {?}
         */
        (aggregates) => {
            if (aggregates.loadingCount !== aggregates.loadedCount) {
                return 'LOADING';
            }
            return 'LOADED';
        })), distinctUntilChanged(), tap((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result === 'LOADING') {
                this.dataLoadStatus.emit('LOADING');
            }
            else {
                this.dataLoadStatus.emit('LOADED');
            }
        }))).subscribe();
        this.statusChangesSubscription = this.formGroup.statusChanges.pipe(tap((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            this.statusChanges.emit({
                isPristine: this.formGroup.pristine,
                isDirty: this.formGroup.dirty,
                isInvalid: this.formGroup.invalid,
                isValid: this.formGroup.valid
            });
        }))).subscribe();
        this.valueChangesSubscription = this.formGroup.valueChanges.pipe(tap((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            this.valueChanges.emit(v);
        }))).subscribe();
    }
    /**
     * @param {?} nestedFormGroup
     * @param {?} fieldConfig
     * @return {?}
     */
    onNestedFormFinalize(nestedFormGroup, fieldConfig) {
        if (!this.formGroup.get('children') || !this.formGroup.get(`children.${fieldConfig.code}`)) {
            return;
        }
        ((/** @type {?} */ (this.formGroup.get('children')))).removeControl(fieldConfig.code);
        if (!Object.keys(((/** @type {?} */ (this.formGroup.get('children')))).controls).length) {
            this.formGroup.removeControl('children');
        }
    }
    /**
     * @param {?} nestedFormGroup
     * @param {?} fieldConfig
     * @return {?}
     */
    onNestedFormInitialize(nestedFormGroup, fieldConfig) {
        if (!this.formGroup.get('children')) {
            this.formGroup.addControl('children', new FormGroup({}));
        }
        ((/** @type {?} */ (this.formGroup.get('children')))).removeControl(fieldConfig.code);
        ((/** @type {?} */ (this.formGroup.get('children')))).addControl(fieldConfig.code, nestedFormGroup);
    }
    /**
     * @private
     * @return {?}
     */
    initializeForm() {
        if (!this.config.length) {
            console.error('FORM LIST IS EMPTY');
            return;
        }
        /** @type {?} */
        const formGroupData = {};
        this.config.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (element.type !== FieldConfigInputType.LABEL) {
                /** @type {?} */
                const formValueList = this.prepareFormValidationData(element, index);
                formGroupData[element.code] = formValueList;
            }
        }));
        this.formGroup = this.formBuilder.group(formGroupData);
        this.initialize.emit(this.formGroup);
    }
    /**
     * @private
     * @param {?} element
     * @param {?} index
     * @return {?}
     */
    prepareFormValidationData(element, index) {
        /** @type {?} */
        const formValueList = [];
        /** @type {?} */
        const validationList = [];
        /** @type {?} */
        let defaultVal = '';
        switch (element.type) {
            case FieldConfigInputType.INPUT:
                defaultVal = element.templateOptions.type === 'number' ?
                    (element.default && Number.isInteger(element.default) ? element.default : 0) :
                    (element.default && (typeof element.default) === 'string' ? element.default : '');
                break;
            case FieldConfigInputType.SELECT:
            case FieldConfigInputType.NESTED_SELECT:
                defaultVal = element.templateOptions.multiple ?
                    (element.default && Array.isArray(element.default) ? element.default : []) : (element.default || null);
                break;
            case FieldConfigInputType.CHECKBOX:
                defaultVal = false || !!element.default;
                break;
        }
        formValueList.push(defaultVal);
        if (element.validations && element.validations.length) {
            element.validations.forEach((/**
             * @param {?} data
             * @param {?} i
             * @return {?}
             */
            (data, i) => {
                switch (data.type) {
                    case FieldConfigValidationType.REQUIRED:
                        if (element.type === FieldConfigInputType.CHECKBOX) {
                            validationList.push(Validators.requiredTrue);
                        }
                        else if (element.type === FieldConfigInputType.SELECT || element.type === FieldConfigInputType.NESTED_SELECT) {
                            validationList.push((/**
                             * @param {?} c
                             * @return {?}
                             */
                            (c) => {
                                if (element.templateOptions.multiple) {
                                    return c.value && c.value.length ? null : 'error';
                                }
                                return !!c.value ? null : 'error';
                            }));
                        }
                        else {
                            validationList.push(Validators.required);
                        }
                        break;
                    case FieldConfigValidationType.PATTERN:
                        validationList.push(Validators.pattern((/** @type {?} */ (element.validations[i].value))));
                        break;
                    case FieldConfigValidationType.MINLENGTH:
                        validationList.push(Validators.minLength((/** @type {?} */ (element.validations[i].value))));
                        break;
                    case FieldConfigValidationType.MAXLENGTH:
                        validationList.push(Validators.maxLength((/** @type {?} */ (element.validations[i].value))));
                        break;
                }
            }));
        }
        formValueList.push(Validators.compose(validationList));
        return formValueList;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickedLink(event) {
        this.linkClicked.emit(event);
    }
}
FormComponent.decorators = [
    { type: Component, args: [{
                selector: 'sb-form',
                template: "<div [formGroup]=\"formGroup\">\n  <ng-container *ngFor=\"let field of config; let index = i\">\n      <!-- <div *ngIf=\"field.type === FieldConfigInputType.SELECT && !field.templateOptions.multiple\" [hidden]=\"field.templateOptions?.hidden || null\">\n        <sb-dropdown [context]=\"field.context ? formGroup.get(field.context) : null \" [default]=\"field.default\"\n          [formControlRef]=\"formGroup.get(field.code)\" [label]=\"field.templateOptions.label\"\n          [dataLoadStatusDelegate]=\"dataLoadStatusDelegate\" [options]=\"field.templateOptions?.options\"\n          [disabled]=\"field.templateOptions?.disabled\" [placeHolder]=\"field?.templateOptions?.placeHolder\">\n        </sb-dropdown>\n      </div>\n    <div *ngIf=\"field.type === FieldConfigInputType.NESTED_SELECT\" [hidden]=\"field.templateOptions?.hidden || null\">\n      <sb-dropdown [context]=\"field.context ? formGroup.get(field.context) : null \" [default]=\"field.default\"\n        [formControlRef]=\"formGroup.get(field.code)\" [label]=\"field.templateOptions.label\"\n        [dataLoadStatusDelegate]=\"dataLoadStatusDelegate\" [options]=\"field.templateOptions?.options\"\n        [disabled]=\"field.templateOptions?.disabled\" [placeHolder]=\"field?.templateOptions?.placeHolder\">\n      </sb-dropdown>\n    </div> -->\n    <div *ngIf=\"field.type === FieldConfigInputType.SELECT || field.type === FieldConfigInputType.NESTED_SELECT\" [hidden]=\"field.templateOptions?.hidden || null\">\n      <sb-multiple-dropdown [context]=\"field.context ? formGroup.get(field.context) : null \" [default]=\"field.default\"\n        [formControlRef]=\"formGroup.get(field.code)\" [options]=\"field.templateOptions?.options\"\n        [label]=\"field.templateOptions.label\" [dataLoadStatusDelegate]=\"dataLoadStatusDelegate\"\n        [disabled]=\"field.templateOptions?.disabled\" [placeHolder]=\"field?.templateOptions?.placeHolder\" \n        [isMultiple]=\"field.templateOptions.multiple\" [labelHtml]=\"field.templateOptions.labelHtml\">\n      </sb-multiple-dropdown>\n    </div>\n    <div *ngIf=\"field.type === FieldConfigInputType.INPUT\" [hidden]=\"field.templateOptions?.hidden || null\">\n      <sb-textbox [formControlRef]=\"formGroup.get(field.code)\" [asyncValidation]=\"field.asyncValidation\" [label]=\"field.templateOptions.label\"\n        [placeholder]=\"field.templateOptions.placeHolder\" [validations]=\"field.validations\" [prefix]=\"field.templateOptions.prefix\"\n        [labelHtml]=\"field.templateOptions.labelHtml\">\n      </sb-textbox>\n    </div>\n    <div *ngIf=\"field.type === FieldConfigInputType.TEXTAREA\" [hidden]=\"field.templateOptions?.hidden || null\">\n      <sb-textarea [config]=\"field\" [formControlRef]=\"formGroup.get(field.code)\" [label]=\"field.templateOptions.label\"\n        [placeholder]=\"field.templateOptions.placeHolder\">\n      </sb-textarea>\n    </div>\n    <div *ngIf=\"field.type === FieldConfigInputType.CHECKBOX\" [hidden]=\"field.templateOptions?.hidden || null\">\n      <sb-checkbox [code]=\"field.code\" [formControlRef]=\"formGroup.get(field.code)\"\n        [label]=\"field.templateOptions.label\" [labelHtml]=\"field.templateOptions.labelHtml\" [value]=\"field.default\"\n        (clickedLink)=\"clickedLink($event)\"></sb-checkbox>\n    </div>\n    <div *ngIf=\"asyncValidatorFactory && field.asyncValidation?.trigger\">\n      <button #validationTrigger [attr.data-marker]=\"field.asyncValidation.marker\">\n        {{field.asyncValidation.trigger}}\n      </button>\n    </div>\n    <ng-container *ngIf=\"formGroup.get(field.code) as ref\">\n      <div *ngIf=\"field.type === FieldConfigInputType.NESTED_SELECT && ref && ref.value && field.children && field.children[ref.value]\">\n        <sb-form (initialize)=\"onNestedFormInitialize($event, field)\" (finalize)=\"onNestedFormFinalize($event, field)\"\n          [dataLoadStatusDelegate]=\"dataLoadStatusDelegate\" [config]=\"field.children[ref.value]\"></sb-form>\n      </div>\n\n      <div *ngIf=\"field.type === FieldConfigInputType.NESTED_GROUP && field.children\">\n        <sb-form (initialize)=\"onNestedFormInitialize($event, field)\" (finalize)=\"onNestedFormFinalize($event, field)\"\n          [dataLoadStatusDelegate]=\"dataLoadStatusDelegate\" [config]=\"field.children\"></sb-form>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"field.type === FieldConfigInputType.LABEL\">\n      <label *ngIf=\"field.templateOptions?.label\">{{field.templateOptions?.label}}</label>\n      <div *ngIf=\"field.templateOptions?.labelHtml\" [innerHTML]=\"field.templateOptions?.labelHtml | transposeHtml\"></div>\n    </ng-container>\n    \n  </ng-container>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
FormComponent.ctorParameters = () => [
    { type: FormBuilder }
];
FormComponent.propDecorators = {
    initialize: [{ type: Output }],
    finalize: [{ type: Output }],
    linkClicked: [{ type: Output }],
    valueChanges: [{ type: Output }],
    statusChanges: [{ type: Output }],
    platform: [{ type: Input }],
    dataLoadStatus: [{ type: Output }],
    config: [{ type: Input }],
    dataLoadStatusDelegate: [{ type: Input }],
    asyncValidatorFactory: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FormComponent.prototype.initialize;
    /** @type {?} */
    FormComponent.prototype.finalize;
    /** @type {?} */
    FormComponent.prototype.linkClicked;
    /** @type {?} */
    FormComponent.prototype.valueChanges;
    /** @type {?} */
    FormComponent.prototype.statusChanges;
    /** @type {?} */
    FormComponent.prototype.platform;
    /** @type {?} */
    FormComponent.prototype.dataLoadStatus;
    /** @type {?} */
    FormComponent.prototype.config;
    /** @type {?} */
    FormComponent.prototype.dataLoadStatusDelegate;
    /** @type {?} */
    FormComponent.prototype.asyncValidatorFactory;
    /** @type {?} */
    FormComponent.prototype.formGroup;
    /** @type {?} */
    FormComponent.prototype.FieldConfigInputType;
    /**
     * @type {?}
     * @private
     */
    FormComponent.prototype.statusChangesSubscription;
    /**
     * @type {?}
     * @private
     */
    FormComponent.prototype.valueChangesSubscription;
    /**
     * @type {?}
     * @private
     */
    FormComponent.prototype.dataLoadStatusSinkSubscription;
    /**
     * @type {?}
     * @private
     */
    FormComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,