/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-field/dynamic-field.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, Input, ViewContainerRef, Renderer2, ElementRef } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
// import { InputComponent } from '../input/input.component';
// import { ButtonComponent } from '../button/button.component';
// import { SelectComponent } from '../select/select.component';
import * as _ from 'lodash-es';
import { Subject } from 'rxjs';
import { DynamicTextboxComponent } from '../dynamic-textbox/dynamic-textbox.component';
import { DynamicTextareaComponent } from '../dynamic-textarea/dynamic-textarea.component';
import { TopicpickerComponent } from '../topicpicker/topicpicker.component';
import { KeywordsComponent } from '../keywords/keywords.component';
import { DynamicMultiSelectComponent } from '../dynamic-multi-select/dynamic-multi-select.component';
import { DynamicDropdownComponent } from '../dynamic-dropdown/dynamic-dropdown.component';
import { DynamicMultipleDropdownComponent } from '../dynamic-multiple-dropdown/dynamic-multiple-dropdown.component';
import { DynamicCheckboxComponent } from '../dynamic-checkbox/dynamic-checkbox.component';
/** @type {?} */
const componentMapper = {
    textarea: DynamicTextareaComponent,
    text: DynamicTextboxComponent,
    select: DynamicDropdownComponent,
    multiselect: DynamicMultiSelectComponent,
    nestedselect: DynamicMultipleDropdownComponent,
    keywords: KeywordsComponent,
    dialcode: DynamicTextboxComponent,
    topicselector: TopicpickerComponent,
    licenses: DynamicDropdownComponent,
    label: DynamicTextboxComponent,
    number: DynamicTextboxComponent,
    checkbox: DynamicCheckboxComponent
};
export class DynamicFieldDirective {
    /**
     * @param {?} resolver
     * @param {?} container
     * @param {?} renderer2
     * @param {?} elementRef
     */
    constructor(resolver, container, renderer2, elementRef) {
        this.resolver = resolver;
        this.container = container;
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        this.options = [];
        this.contextTerms = [];
        this.dependencyTerms = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(componentMapper[this.field.inputType]);
        this.componentRef = this.container.createComponent(factory);
        // this.renderer2.appendChild(this.elementRef.nativeElement, this.componentRef.location.nativeElement);
        if (this.field.renderingHints && this.field.renderingHints.class) {
            this.setClassListOnElement(this.field.renderingHints.class);
        }
        this.componentRef.instance.field = this.field;
        this.componentRef.instance.formGroup = this.formGroup;
        this.componentRef.instance.formControlRef = this.formControlRef;
        this.componentRef.instance.label = this.label;
        this.componentRef.instance.placeholder = this.placeholder;
        this.componentRef.instance.options = this.options;
        this.componentRef.instance.context = this.context;
        this.componentRef.instance.contextTerms = this.contextTerms;
        this.componentRef.instance.depends = this.depends;
        this.componentRef.instance.dependencyTerms = this.dependencyTerms;
        this.componentRef.instance.default = this.default;
        this.componentRef.instance.dataLoadStatusDelegate = this.dataLoadStatusDelegate;
        this.componentRef.instance.validations = this.validations;
        this.componentRef.instance.disabled = this.disabled;
        // this.componentRef.instance = {
        //   field : this.field,
        //   formGroup : this.formGroup,
        //   formControlRef : this.formControlRef,
        //   label : this.label,
        //   options : this.options,
        //   context : this.context
        // };
    }
    /**
     * @param {?} cssClasses
     * @return {?}
     */
    setClassListOnElement(cssClasses) {
        /** @type {?} */
        const classList = cssClasses.split(' ');
        _.forEach(classList, (/**
         * @param {?} cssClass
         * @return {?}
         */
        cssClass => {
            this.renderer2.addClass(this.componentRef.location.nativeElement, cssClass);
        }));
    }
}
DynamicFieldDirective.decorators = [
    { type: Directive, args: [{
                selector: '[sbDynamicField]'
            },] }
];
/** @nocollapse */
DynamicFieldDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: ElementRef }
];
DynamicFieldDirective.propDecorators = {
    field: [{ type: Input }],
    formGroup: [{ type: Input }],
    formControlRef: [{ type: Input }],
    disabled: [{ type: Input }],
    label: [{ type: Input }],
    options: [{ type: Input }],
    placeholder: [{ type: Input }],
    context: [{ type: Input }],
    validations: [{ type: Input }],
    contextTerms: [{ type: Input }],
    depends: [{ type: Input }],
    dependencyTerms: [{ type: Input }],
    default: [{ type: Input }],
    dataLoadStatusDelegate: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicFieldDirective.prototype.field;
    /** @type {?} */
    DynamicFieldDirective.prototype.formGroup;
    /** @type {?} */
    DynamicFieldDirective.prototype.formControlRef;
    /** @type {?} */
    DynamicFieldDirective.prototype.disabled;
    /** @type {?} */
    DynamicFieldDirective.prototype.label;
    /** @type {?} */
    DynamicFieldDirective.prototype.options;
    /** @type {?} */
    DynamicFieldDirective.prototype.placeholder;
    /** @type {?} */
    DynamicFieldDirective.prototype.context;
    /** @type {?} */
    DynamicFieldDirective.prototype.validations;
    /** @type {?} */
    DynamicFieldDirective.prototype.contextTerms;
    /** @type {?} */
    DynamicFieldDirective.prototype.depends;
    /** @type {?} */
    DynamicFieldDirective.prototype.dependencyTerms;
    /** @type {?} */
    DynamicFieldDirective.prototype.default;
    /** @type {?} */
    DynamicFieldDirective.prototype.dataLoadStatusDelegate;
    /** @type {?} */
    DynamicFieldDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynamicFieldDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    DynamicFieldDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    DynamicFieldDirective.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    DynamicFieldDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,