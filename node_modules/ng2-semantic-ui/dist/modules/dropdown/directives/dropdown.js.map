{"version":3,"file":"dropdown.js","sourceRoot":"","sources":["../../../../src/modules/dropdown/directives/dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Directive, Input, HostBinding, EventEmitter, Output, AfterContentInit, ContentChild,\n    ElementRef, HostListener, QueryList, ContentChildren\n} from \"@angular/core\";\nimport { HandledEvent, KeyCode, IFocusEvent } from \"../../../misc/util/index\";\nimport { DropdownService, DropdownAutoCloseType } from \"../services/dropdown.service\";\nimport { SuiDropdownMenu } from \"./dropdown-menu\";\n\n@Directive({\n    selector: \"[suiDropdown]\"\n})\nexport class SuiDropdown implements AfterContentInit {\n    public service:DropdownService;\n\n    @ContentChild(SuiDropdownMenu)\n    private _menu:SuiDropdownMenu;\n\n    @ContentChildren(SuiDropdown, { descendants: true })\n    private _children:QueryList<SuiDropdown>;\n\n    public get children():SuiDropdown[] {\n        // @ContentChildren includes the current element by default.\n        return this._children.filter(c => c !== this);\n    }\n\n    @Output()\n    public get isOpenChange():EventEmitter<boolean> {\n        return this.service.isOpenChange;\n    }\n\n    @HostBinding(\"class.active\")\n    public get isActive():boolean {\n        // This is to ensure nested dropdowns don't get made bold.\n        return this.service.isOpen && !this.service.isNested;\n    }\n\n    @Input()\n    public get isOpen():boolean {\n        return this.service.isOpen;\n    }\n\n    public set isOpen(value:boolean) {\n        // If we are opening the dropdown, we want to always open its parents.\n        this.service.setOpenState(value, !!value);\n    }\n\n    @HostBinding(\"class.disabled\")\n    @Input()\n    public get isDisabled():boolean {\n        return this.service.isDisabled;\n    }\n\n    public set isDisabled(value:boolean) {\n        this.service.setDisabledState(value);\n    }\n\n    @Input(\"tabindex\")\n    private _tabIndex?:number;\n\n    @HostBinding(\"attr.tabindex\")\n    public get tabIndex():number | undefined {\n        if (this.isDisabled || this.service.isNested) {\n            // If disabled, remove from tabindex.\n            return undefined;\n        }\n        if (this._tabIndex != undefined) {\n            // If custom tabindex, default to that.\n            return this._tabIndex;\n        }\n        // Otherwise, return default of 0.\n        return 0;\n    }\n\n    @Input()\n    public get autoClose():DropdownAutoCloseType {\n        return this.service.autoCloseMode;\n    }\n\n    public set autoClose(value:DropdownAutoCloseType) {\n        this.service.autoCloseMode = value;\n    }\n\n    constructor(private _element:ElementRef) {\n        this.service = new DropdownService();\n        this.service.isOpenChange.subscribe(() => {\n            if (this.service.isOpen) {\n                this._element.nativeElement.focus();\n            }\n        });\n    }\n\n    public ngAfterContentInit():void {\n        if (!this._menu) {\n            throw new Error(\"You must set [suiDropdownMenu] on the menu element.\");\n        }\n        this._menu.service = this.service;\n\n        this.childrenUpdated();\n        this._children.changes\n            .subscribe(() => this.childrenUpdated());\n    }\n\n    private childrenUpdated():void {\n        // Reregister child dropdowns each time the menu content changes.\n        this.children\n            .map(c => c.service)\n            .forEach(s => this.service.registerChild(s));\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(e:HandledEvent):void {\n        if (!e.eventHandled) {\n            e.eventHandled = true;\n\n            this.service.toggleOpenState();\n        }\n    }\n\n    @HostListener(\"focusout\", [\"$event\"])\n    private onFocusOut(e:IFocusEvent):void {\n        if (!this._element.nativeElement.contains(e.relatedTarget)) {\n            this.externallyClose();\n        }\n    }\n\n    @HostListener(\"keypress\", [\"$event\"])\n    public onKeypress(e:HandledEvent & KeyboardEvent):void {\n        // Block the keyboard event from being fired on parent dropdowns.\n        if (!e.eventHandled) {\n\n            if (e.keyCode === KeyCode.Enter) {\n                e.eventHandled = true;\n\n                this.service.setOpenState(true);\n            }\n        }\n    }\n\n    private externallyClose():void {\n        if (this.service.autoCloseMode === DropdownAutoCloseType.ItemClick ||\n                this.service.autoCloseMode === DropdownAutoCloseType.OutsideClick) {\n                // No need to reflect in parent since they are also bound to document.\n            this.service.setOpenState(false);\n        }\n    }\n}\n"]}