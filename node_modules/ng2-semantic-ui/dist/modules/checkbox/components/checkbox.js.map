{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../../src/modules/checkbox/components/checkbox.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EACH,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAC9D,YAAY,EAAE,SAAS,EAAE,UAAU,EACtC,MAAM,eAAe,CAAC;AACvB,OAAO,EAA4B,0BAA0B,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;;IAqDjH;QACI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,EAAW,CAAC;QACjD,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,EAAQ,CAAC;QAE1C,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;KAChC;IApBD,sBAAW,yCAAgB;aAA3B;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;SAC1C;;;OAAA;IAED,sBAAW,4CAAmB;aAA9B;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;SACnD;;;OAAA;IAiBM,iCAAW,aAAC,CAAY;QAC3B,CAAC,CAAC,cAAc,EAAE,CAAC;;IAIhB,6BAAO;QACV,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;;IAIE,gCAAU;QACb,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;;IAGnB,4BAAM,GAAb;QACI,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC3C;IAEM,gCAAU,GAAjB,UAAkB,KAAa;QAC3B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KAC1B;IAEO,mCAAa,GAArB;QACI,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KAC/C;;gBA3FJ,SAAS,SAAC;oBACP,QAAQ,EAAE,cAAc;oBACxB,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,uRAWb;iBACA;;;;;qCAEI,WAAW,SAAC,UAAU,cACtB,WAAW,SAAC,gBAAgB;yBAG5B,KAAK;8BAGL,WAAW,SAAC,eAAe;kCAG3B,MAAM,SAAC,aAAa;8BAGpB,MAAM,SAAC,SAAS;+BAGhB,KAAK;+BAGL,WAAW,SAAC,iBAAiB,cAC7B,KAAK;qCAWL,SAAS,SAAC,UAAU;gCAcpB,YAAY,SAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;4BAKpC,YAAY,SAAC,OAAO;+BAQpB,YAAY,SAAC,UAAU;;sBAjF5B;;SAsBa,WAAW;;IAsFsB,4CAAyC;IACnF,kCAAY,IAAgB;eACxB,kBAAM,IAAI,CAAC;KACd;;gBAXJ,SAAS,SAAC;oBACP,QAAQ,EAAE,cAAc;oBACxB,IAAI,EAAE;wBACF,eAAe,EAAE,kBAAkB;wBACnC,WAAW,EAAE,aAAa;qBAC7B;oBACD,SAAS,EAAE,CAAC,0BAA0B,CAAC,wBAAwB,CAAC,CAAC;iBACpE;;;;gBArFY,WAAW;;mCAtBxB;EA4G8C,mBAAmB;SAApD,wBAAwB","sourcesContent":["import {\n    Component, Directive, Input, Output, HostListener, HostBinding,\n    EventEmitter, ViewChild, ElementRef\n} from \"@angular/core\";\nimport { ICustomValueAccessorHost, customValueAccessorFactory, CustomValueAccessor } from \"../../../misc/util/index\";\n\n@Component({\n    selector: \"sui-checkbox\",\n    exportAs: \"suiCheckbox\",\n    template: `\n<input class=\"hidden\"\n       type=\"checkbox\"\n       [attr.name]=\"name\"\n       [attr.checked]=\"checkedAttribute\"\n       [attr.disabled]=\"isDisabledAttribute\"\n       [(ngModel)]=\"isChecked\"\n       #checkbox>\n<label>\n    <ng-content></ng-content>\n</label>\n`\n})\nexport class SuiCheckbox implements ICustomValueAccessorHost<boolean> {\n    @HostBinding(\"class.ui\")\n    @HostBinding(\"class.checkbox\")\n    private _checkboxClasses:boolean;\n\n    @Input()\n    public name:string;\n\n    @HostBinding(\"class.checked\")\n    public isChecked:boolean;\n\n    @Output(\"checkChange\")\n    public onCheckChange:EventEmitter<boolean>;\n\n    @Output(\"touched\")\n    public onTouched:EventEmitter<void>;\n\n    @Input()\n    public isDisabled:boolean;\n\n    @HostBinding(\"class.read-only\")\n    @Input()\n    public isReadonly:boolean;\n\n    public get checkedAttribute():string | undefined {\n        return this.isChecked ? \"\" : undefined;\n    }\n\n    public get isDisabledAttribute():string | undefined {\n        return this.isDisabled ? \"disabled\" : undefined;\n    }\n\n    @ViewChild(\"checkbox\")\n    private _checkboxElement:ElementRef;\n\n    constructor() {\n        this.isChecked = false;\n        this.onCheckChange = new EventEmitter<boolean>();\n        this.onTouched = new EventEmitter<void>();\n\n        this.isDisabled = false;\n        this.isReadonly = false;\n\n        this._checkboxClasses = true;\n    }\n\n    @HostListener(\"mousedown\", [\"$event\"])\n    public onMouseDown(e:MouseEvent):void {\n        e.preventDefault();\n    }\n\n    @HostListener(\"click\")\n    public onClick():void {\n        if (!this.isDisabled && !this.isReadonly) {\n            this.toggle();\n            this.focusCheckbox();\n        }\n    }\n\n    @HostListener(\"focusout\")\n    public onFocusOut():void {\n        this.onTouched.emit();\n    }\n\n    public toggle():void {\n        this.isChecked = !this.isChecked;\n        this.onCheckChange.emit(this.isChecked);\n    }\n\n    public writeValue(value:boolean):void {\n        this.isChecked = value;\n    }\n\n    private focusCheckbox():void {\n        this._checkboxElement.nativeElement.focus();\n    }\n}\n\n@Directive({\n    selector: \"sui-checkbox\",\n    host: {\n        \"(checkChange)\": \"onChange($event)\",\n        \"(touched)\": \"onTouched()\"\n    },\n    providers: [customValueAccessorFactory(SuiCheckboxValueAccessor)]\n})\nexport class SuiCheckboxValueAccessor extends CustomValueAccessor<boolean, SuiCheckbox> {\n    constructor(host:SuiCheckbox) {\n        super(host);\n    }\n}\n"]}