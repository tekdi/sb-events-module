{"version":3,"file":"multi-select.js","sourceRoot":"","sources":["../../../../src/modules/select/components/multi-select.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, HostBinding, ElementRef, EventEmitter, Output, Input, Directive, Renderer2 } from \"@angular/core\";\nimport { ICustomValueAccessorHost, KeyCode, customValueAccessorFactory, CustomValueAccessor } from \"../../../misc/util/index\";\nimport { SuiLocalizationService } from \"../../../behaviors/localization/index\";\nimport { SuiSelectBase } from \"../classes/select-base\";\nimport { SuiSelectOption } from \"./select-option\";\n\n@Component({\n    selector: \"sui-multi-select\",\n    template: `\n<!-- Dropdown icon -->\n<i class=\"{{ icon }} icon\" (click)=\"onCaretClick($event)\"></i>\n\n<ng-container *ngIf=\"hasLabels\">\n<!-- Multi-select labels -->\n    <sui-multi-select-label *ngFor=\"let selected of selectedOptions;\"\n                            [value]=\"selected\"\n                            [query]=\"query\"\n                            [formatter]=\"configuredFormatter\"\n                            [template]=\"optionTemplate\"\n                            (deselected)=\"deselectOption($event)\"></sui-multi-select-label>\n</ng-container>\n\n<!-- Query input -->\n<input suiSelectSearch\n       type=\"text\"\n       [hidden]=\"!isSearchable || isSearchExternal\">\n\n<!-- Helper text -->\n<div class=\"text\"\n     [class.default]=\"hasLabels\"\n     [class.filtered]=\"!!query && !isSearchExternal\">\n    \n    <!-- Placeholder text -->\n    <ng-container *ngIf=\"hasLabels; else selectedBlock\">{{ placeholder }}</ng-container>\n    \n    <!-- Summary shown when labels are hidden -->\n    <ng-template #selectedBlock> {{ selectedMessage }}</ng-template>\n</div>\n\n<!-- Select dropdown menu -->\n<div class=\"menu\"\n     suiDropdownMenu\n     [menuTransition]=\"transition\"\n     [menuTransitionDuration]=\"transitionDuration\"\n     [menuAutoSelectFirst]=\"true\">\n\n    <ng-content></ng-content>\n    <ng-container *ngIf=\"availableOptions.length == 0 \">\n        <div *ngIf=\"!maxSelectedReached\" class=\"message\">{{ localeValues.noResultsMessage }}</div>\n        <div *ngIf=\"maxSelectedReached\" class=\"message\">{{ maxSelectedMessage }}</div>\n    </ng-container>\n</div>\n`,\n    styles: [`\n:host input.search {\n    width: 12em !important;\n}\n`]\n})\nexport class SuiMultiSelect<T, U> extends SuiSelectBase<T, U> implements ICustomValueAccessorHost<U[]> {\n    public selectedOptions:T[];\n    // Stores the values written by ngModel before it can be matched to an option from `options`.\n    private _writtenOptions?:U[];\n\n    @Output()\n    public selectedOptionsChange:EventEmitter<U[]>;\n\n    public get filteredOptions():T[] {\n        if (this.maxSelectedReached) {\n            // If we have reached the maximum number of selections, then empty the results completely.\n            return [];\n        }\n\n        const searchResults:T[] = this.searchService.results;\n\n        if (!this.hasLabels) {\n            return searchResults;\n        } else {\n            // Returns the search results \\ selected options.\n            return searchResults\n                .filter(r => this.selectedOptions.find(o => r === o) == undefined);\n        }\n    }\n\n    public get availableOptions():T[] {\n        return this.filteredOptions;\n    }\n\n    private _hasLabels:boolean;\n\n    @Input()\n    public get hasLabels():boolean {\n        return this._hasLabels;\n    }\n\n    public set hasLabels(hasLabels:boolean) {\n        this._hasLabels = hasLabels;\n    }\n\n    private _placeholder:string;\n\n    @Input()\n    public get placeholder():string {\n        return this._placeholder || this.localeValues.multi.placeholder;\n    }\n\n    public set placeholder(placeholder:string) {\n        this._placeholder = placeholder;\n    }\n\n    @Input()\n    public maxSelected:number;\n\n    private _zeroSelectionText:string;\n    private _defaultSelectionText:string;\n\n    @Input()\n    public get zeroSelectionText():string {\n        return this._zeroSelectionText;\n    }\n\n    public set zeroSelectionText(zeroSelectionText:string) {\n        this._zeroSelectionText = zeroSelectionText;\n    }\n\n    @Input()\n    public get defaultSelectionText():string {\n        return this._defaultSelectionText || this.localeValues.multi.placeholder;\n    }\n\n    public set defaultSelectionText(defaultSelectionText:string) {\n        this._defaultSelectionText = `#{count} ${defaultSelectionText}`;\n    }\n\n    public get maxSelectedReached():boolean {\n        if (this.maxSelected == undefined) {\n            // If there is no maximum then we can immediately return.\n            return false;\n        }\n        return this.selectedOptions.length === this.maxSelected;\n    }\n\n    public get maxSelectedMessage():string {\n        return this._localizationService.interpolate(\n            this.localeValues.multi.maxSelectedMessage,\n            [[\"max\", this.maxSelected.toString()]]);\n    }\n\n    public get selectedMessage():string {\n        if (this.selectedOptions.length  > 0) {\n            return this._localizationService.interpolate(\n                this._defaultSelectionText ? this._defaultSelectionText : this.localeValues.multi.selectedMessage,\n                [[\"count\", this.selectedOptions.length.toString()]]);\n        } else {\n            return this._localizationService.interpolate(\n                this._defaultSelectionText ? this._defaultSelectionText : this.localeValues.multi.selectedMessage,\n                [[\"count\", this._zeroSelectionText ? this._zeroSelectionText : this.selectedOptions.length.toString()]]);\n        }\n    }\n\n    @HostBinding(\"class.multiple\")\n    private _multiSelectClasses:boolean;\n\n    constructor(element:ElementRef, renderer:Renderer2, localizationService:SuiLocalizationService) {\n        super(element, renderer, localizationService);\n\n        this.selectedOptions = [];\n        this.selectedOptionsChange = new EventEmitter<U[]>();\n\n        this.hasLabels = true;\n        this._multiSelectClasses = true;\n    }\n\n    protected optionsUpdateHook():void {\n        if (!this._writtenOptions && this.selectedOptions.length > 0) {\n            // We need to check the options still exist.\n            this.writeValue(this.selectedOptions.map(o => this.valueGetter(o)));\n        }\n\n        if (this._writtenOptions && this.searchService.options.length > 0) {\n            // If there were values written by ngModel before the options had been loaded, this runs to fix it.\n            this.selectedOptions = this._writtenOptions\n                // non-null assertion added here because Typescript doesn't recognise the non-null filter.\n                .map(v => this.findOption(this.searchService.options, v)!)\n                .filter(v => v != undefined);\n\n            if (this.selectedOptions.length === this._writtenOptions.length) {\n                this._writtenOptions = undefined;\n            }\n        }\n    }\n\n    protected initialiseRenderedOption(option:SuiSelectOption<T>):void {\n        super.initialiseRenderedOption(option);\n\n        // Boldens the item so it appears selected in the dropdown.\n        option.isActive = !this.hasLabels && this.selectedOptions.indexOf(option.value) !== -1;\n    }\n\n    public selectOption(option:T):void {\n        if (this.selectedOptions.indexOf(option) !== -1) {\n            this.deselectOption(option);\n            return;\n        }\n        this.selectedOptions.push(option);\n        this.selectedOptionsChange.emit(this.selectedOptions.map(o => this.valueGetter(o)));\n\n        this.resetQuery(false);\n\n        // Automatically refocus the search input for better keyboard accessibility.\n        this.focus();\n\n        if (!this.hasLabels) {\n            this.onAvailableOptionsRendered();\n        }\n    }\n\n    public writeValue(values:U[]):void {\n        if (values instanceof Array) {\n            if (this.searchService.options.length > 0) {\n                // If the options have already been loaded, we can immediately match the ngModel values to options.\n                this.selectedOptions = values\n                    // non-null assertion added here because Typescript doesn't recognise the non-null filter.\n                    .map(v => this.findOption(this.searchService.options, v)!)\n                    .filter(v => v != undefined);\n            }\n            if (values.length > 0 && this.selectedOptions.length === 0) {\n                if (this.valueField && this.searchService.hasItemLookup) {\n                    // If the search service has a selected lookup function, make use of that to load the initial values.\n                    this.searchService\n                        .initialLookup(values)\n                        .then(items => this.selectedOptions = items);\n                } else {\n                    // Otherwise, cache the written value for when options are set.\n                    this._writtenOptions = values;\n                }\n            }\n            if (values.length === 0) {\n                this.selectedOptions = [];\n            }\n        } else {\n            this.selectedOptions = [];\n        }\n    }\n\n    public deselectOption(option:T):void {\n        // Update selected options to the previously selected options \\ {option}.\n        this.selectedOptions = this.selectedOptions.filter(so => so !== option);\n        this.selectedOptionsChange.emit(this.selectedOptions.map(o => this.valueGetter(o)));\n\n        // Automatically refocus the search input for better keyboard accessibility.\n        this.focus();\n\n        if (!this.hasLabels) {\n            this.onAvailableOptionsRendered();\n        }\n    }\n\n    public onQueryInputKeydown(event:KeyboardEvent):void {\n        if (event.keyCode === KeyCode.Backspace && this.query === \"\" && this.selectedOptions.length > 0) {\n            // Deselect the rightmost option when the user presses backspace in the search input.\n            this.deselectOption(this.selectedOptions[this.selectedOptions.length - 1]);\n        }\n    }\n}\n\n// Value accessor directive for the select to support ngModel.\n@Directive({\n    selector: \"sui-multi-select\",\n    host: {\n        \"(selectedOptionsChange)\": \"onChange($event)\",\n        \"(touched)\": \"onTouched()\"\n    },\n    providers: [customValueAccessorFactory(SuiMultiSelectValueAccessor)]\n})\nexport class SuiMultiSelectValueAccessor<T, U> extends CustomValueAccessor<U[], SuiMultiSelect<T, U>> {\n    constructor(host:SuiMultiSelect<T, U>) {\n        super(host);\n    }\n}\n"]}